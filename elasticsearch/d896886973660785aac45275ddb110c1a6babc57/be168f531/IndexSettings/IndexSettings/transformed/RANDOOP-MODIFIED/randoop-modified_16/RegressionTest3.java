import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData30.getInitialRecoveryFilters();
        boolean boolean33 = indexMetaData30.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray44 = settings36.getAsArray("active_allocations", strArray43);
        java.lang.String str46 = settings36.toDelimitedString('4');
        indexScopedSettings34.validate("index.number_of_shards", settings36);
        java.util.function.Predicate<java.lang.String> strPredicate48 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings49 = settings36.filter(strPredicate48);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings36.toXContent(xContentBuilder50, params51);
        org.elasticsearch.Version version54 = null;
        org.elasticsearch.Version version55 = settings36.getAsVersion("index.blocks.metadata", version54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings57 = settings36.filter(strPredicate56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData0.diff(indexMetaData30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap60 = indexMetaData0.getCustoms();
        int int61 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNull(xContentBuilder52);
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertNotNull(strImmutableOpenMap60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("state-", custom9);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData29.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property32 = indexScopedSettings31.getScope();
        boolean boolean34 = indexScopedSettings31.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting36 = indexScopedSettings31.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray44 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray45 = settings37.getAsArray("active_allocations", strArray44);
        java.lang.String str47 = settings37.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings37.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean60 = indexScopedSettings31.updateSettings(settings37, builder51, builder58, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder51.put("index.number_of_shards", 10L);
        java.lang.String[] strArray72 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder63.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList73);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder63.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings79 = builder63.build();
        java.lang.Boolean boolean82 = settings79.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue84 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue85 = settings79.getAsSize("", sizeValue84);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings79);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting87 = indexSettings86.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version88 = indexSettings86.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue89 = indexSettings86.flushThresholdSize;
        indexSettings28.flushThresholdSize = byteSizeValue89;
        indexSettings28.setTTLPurgeDisabled(true);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting93 = indexSettings28.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + property32 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property32.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertEquals("'" + boolean82 + "' != '" + false + "'", boolean82, false);
        org.junit.Assert.assertNull(sizeValue85);
        org.junit.Assert.assertNotNull(intSetting87);
        org.junit.Assert.assertNotNull(version88);
        org.junit.Assert.assertNotNull(byteSizeValue89);
        org.junit.Assert.assertNotNull(booleanSetting93);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.normalizePrefix("");
        java.lang.String str9 = builder5.get("index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings31 = settings6.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings31.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings31.getGroups("index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap34);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        boolean boolean63 = indexSettings57.getwarmerEnabled();
        int int64 = indexSettings57.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = indexSettings57.indexMetaData;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting66 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(intSetting66);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.settings.Settings settings53 = null; // flaky: indexSettings52.getNodeSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting54 = null; // flaky: indexSettings52.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.index.translog.Translog.Durability durability55 = null; // flaky: indexSettings52.durability;
        java.lang.Class<?> wildcardClass56 = null; // flaky: durability55.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(settings53);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting54);
// flaky:         org.junit.Assert.assertTrue("'" + durability55 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability55.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
// flaky:         org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings57.getNodeSettings();
        boolean boolean62 = indexSettings57.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder54.removeAllAliases();
        int int56 = builder55.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData0.mappingOrDefault("index.blocks.write");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap17 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap17);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean63 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        java.lang.String str65 = indexSettings57.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability66 = indexSettings57.durability;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(booleanSetting62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(booleanSetting64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + durability66 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability66.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher63 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting64 = indexSettings57.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(parseFieldMatcher63);
        org.junit.Assert.assertNotNull(strSetting64);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        org.elasticsearch.Version version5 = null;
        org.elasticsearch.Version version6 = settings2.getAsVersion("", version5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        java.util.Set<java.lang.String> strSet8 = settings2.names();
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.putNull("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder30.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray59 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray60 = settings52.getAsArray("active_allocations", strArray59);
        java.lang.String str62 = settings52.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings52.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder70 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean75 = indexScopedSettings46.updateSettings(settings52, builder66, builder73, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder66.put("index.number_of_shards", 10L);
        java.lang.String[] strArray87 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder78.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder30.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder8.putArray("index.version.created", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder92.normalizePrefix("index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder94.put("state-", "index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder97.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings15.getScope();
        boolean boolean18 = indexScopedSettings15.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings20.toXContent(xContentBuilder21, params22);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings20);
        indexScopedSettings15.validate("index.shared_filesystem.recover_on_any_node", settings20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray35 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray36 = settings28.getAsArray("active_allocations", strArray35);
        java.lang.String str38 = settings28.toDelimitedString('4');
        indexScopedSettings26.validate("index.number_of_shards", settings28);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings28);
        java.util.Set<java.lang.String> strSet42 = settings28.names();
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray56 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray57 = settings49.getAsArray("active_allocations", strArray56);
        java.lang.String str59 = settings49.toDelimitedString('4');
        indexScopedSettings47.validate("index.number_of_shards", settings49);
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        org.elasticsearch.common.unit.TimeValue timeValue63 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue64 = settings61.getAsTime("hi!", timeValue63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder46.settings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings61);
        java.lang.String str67 = indexSettings66.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = builder32.build();
        org.elasticsearch.common.settings.Settings settings50 = settings48.getAsSettings("index.priority");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = settings50.toXContent(xContentBuilder51, params52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        java.lang.String str59 = indexSettings57.getDefaultField();
        org.elasticsearch.Version version60 = indexSettings57.getversion();
        java.lang.Class<?> wildcardClass61 = indexSettings57.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "_all" + "'", str59, "_all");
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.numberOfReplicas(1000);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getALLOW_UNMAPPED();
        indexSettings57.setTTLPurgeDisabled(false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue67 = indexSettings57.getTranslogSyncInterval();
        int int68 = indexSettings57.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNull(byteSizeValue66);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        boolean boolean22 = settings21.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        long long24 = indexSettings23.gcDeletesInMillis;
        org.apache.lucene.index.MergePolicy mergePolicy25 = indexSettings23.getMergePolicy();
        indexSettings23.setwarmerEnabled(true);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting28 = indexSettings23.getDEFAULT_FIELD_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(mergePolicy25);
        org.junit.Assert.assertNotNull(strSetting28);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        java.lang.String str11 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder3.put("primary_terms", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        indexScopedSettings16.validate("index.number_of_shards", settings18);
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings31 = settings18.filter(strPredicate30);
        org.elasticsearch.common.unit.TimeValue timeValue33 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue34 = settings31.getAsTime("index.number_of_replicas", timeValue33);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray44 = settings36.getAsArray("active_allocations", strArray43);
        java.lang.String[] strArray45 = settings31.getAsArray("index.blocks.metadata", strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder14.putArray("index.number_of_replicas", strArray44);
        java.lang.String str48 = builder14.get("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100.0" + "'", str11, "100.0");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("", (int) (short) 1);
        java.util.concurrent.TimeUnit timeUnit22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder23 = builder19.put("index.shared_filesystem.recover_on_any_node", 10000L, timeUnit22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.shadow_replicas", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        java.lang.String str64 = indexSettings57.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        org.elasticsearch.index.translog.Translog.Durability durability65 = indexSettings57.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + durability65 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability65.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        boolean boolean65 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings57.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(timeValue66);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.auto_expand_replicas");
        int int14 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putAlias(builder15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        boolean boolean4 = indexMetaData1.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData1.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet9 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) 10, indexMetaData1, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder1.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder1.put("", (-1L));
        java.nio.file.Path path6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.loadFromPath(path6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfReplicas((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting64 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean66 = indexSettings57.isTTLPurgeDisabled();
        boolean boolean67 = indexSettings57.isDefaultAllowUnmappedFields();
        boolean boolean68 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Settings settings69 = null;
        indexSettings57.settings = settings69;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValueSetting64);
        org.junit.Assert.assertNotNull(timeValueSetting65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig60 = indexSettings57.getMergeSchedulerConfig();
        boolean boolean61 = indexSettings57.getqueryStringLenient();
        boolean boolean62 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(byteSizeValue59);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder35.put("index.auto_expand_replicas", false);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property43 = indexScopedSettings42.getScope();
        boolean boolean45 = indexScopedSettings42.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting47 = indexScopedSettings42.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray55 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray56 = settings48.getAsArray("active_allocations", strArray55);
        java.lang.String str58 = settings48.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings48);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings48.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean71 = indexScopedSettings42.updateSettings(settings48, builder62, builder69, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder62.put("index.number_of_shards", 10L);
        java.lang.String str76 = builder74.remove("");
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray84 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray85 = settings77.getAsArray("active_allocations", strArray84);
        java.lang.String str87 = settings77.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings77);
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings77);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue91 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue92 = settings89.getAsBytesSize("index.creation_date", byteSizeValue91);
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder74.put(settings89);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet95 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass96 = wildcardSettingSet95.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder74.put("index.number_of_shards", (java.lang.Class) wildcardClass96);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder35.put("index.uuid", (java.lang.Class) wildcardClass96);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + property43 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property43.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(wildcardSetting47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNull(byteSizeValue92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(wildcardSettingSet95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        boolean boolean65 = indexSettings57.isOnSharedFilesystem();
        java.lang.String str66 = indexSettings57.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData0.getCustoms();
        int int54 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long56 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet12 = indexScopedSettings11.getBUILT_IN_INDEX_SETTINGS();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(wildcardSettingSet12);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("");
        int int11 = indexMetaData0.getNumberOfReplicas();
        long long12 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int7 = indexMetaData0.getNumberOfShards();
        boolean boolean9 = indexMetaData0.isSameUUID("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray39 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray40 = settings32.getAsArray("active_allocations", strArray39);
        java.lang.String str42 = settings32.toDelimitedString('4');
        indexScopedSettings30.validate("index.number_of_shards", settings32);
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings45 = settings32.filter(strPredicate44);
        org.elasticsearch.common.unit.TimeValue timeValue47 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue48 = settings45.getAsTime("index.number_of_replicas", timeValue47);
        java.lang.String str50 = settings45.get("index.");
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder52.settings(builder53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder29.putNull("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(builder33);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder33.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("100.0", (double) (short) 1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property10 = indexScopedSettings9.getScope();
        boolean boolean12 = indexScopedSettings9.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting14 = indexScopedSettings9.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray22 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray23 = settings15.getAsArray("active_allocations", strArray22);
        java.lang.String str25 = settings15.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings15.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean38 = indexScopedSettings9.updateSettings(settings15, builder29, builder36, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder29.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder29.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder46.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder52.putCustom("", custom54);
        java.lang.Class<?> wildcardClass56 = builder52.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder29.put("archived.", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder4.put("index.creation_date", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder62 = builder4.put("index.uuid", (long) 1, byteSizeUnit61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + property10 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property10.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardSetting14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putCustom("index.blocks.read", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.removeAllAliases();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue64 = indexSettings57.getFlushThresholdSize();
        boolean boolean65 = indexSettings57.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNull(byteSizeValue64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.number_of_replicas", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder37.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder37.put("10.0", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder37.normalizePrefix("10.0");
        java.io.InputStream inputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder48 = builder37.loadFromStream("primary_terms", inputStream47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray39 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray40 = settings32.getAsArray("active_allocations", strArray39);
        java.lang.String str42 = settings32.toDelimitedString('4');
        indexScopedSettings30.validate("index.number_of_shards", settings32);
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings45 = settings32.filter(strPredicate44);
        org.elasticsearch.common.unit.TimeValue timeValue47 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue48 = settings45.getAsTime("index.number_of_replicas", timeValue47);
        java.lang.String str50 = settings45.get("index.");
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings51.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        boolean boolean53 = indexSettings51.isQueryStringAllowLeadingWildcard();
        org.apache.lucene.index.MergePolicy mergePolicy54 = indexSettings51.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mergePolicy54);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getTranslogSyncInterval();
        org.elasticsearch.Version version62 = indexSettings57.getversion();
        boolean boolean63 = indexSettings57.isWarmerEnabled();
        java.lang.String str64 = indexSettings57.nodeName;
        indexSettings57.setEnableWarmer(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.uuid", "index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("primary_terms", 1000);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", "index.version.upgraded");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getALLOW_UNMAPPED();
        long long67 = indexSettings57.gcDeletesInMillis;
        boolean boolean68 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.index.translog.Translog.Durability durability62 = indexSettings57.durability;
        boolean boolean63 = indexSettings57.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + durability62 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability62.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData1.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData1.mapping("index.creation_date");
        boolean boolean9 = indexMetaData1.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData1.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData1.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData1.mapping("100.0");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet15 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(1000, indexMetaData1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (0) must be greater than the shard id: 1000");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(mappingMetaData13);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.put("index.shared_filesystem", "hi!");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder27 = builder18.put("index.uuid", (long) 1000, byteSizeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getALLOW_UNMAPPED();
        long long67 = indexSettings57.gcDeletesInMillis;
        org.apache.lucene.index.MergePolicy mergePolicy68 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = indexSettings57.flushThresholdSize;
        boolean boolean70 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertNotNull(mergePolicy68);
        org.junit.Assert.assertNull(byteSizeValue69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData62.mappingOrDefault("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData62, xContentBuilder66, params67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNull(mappingMetaData65);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        boolean boolean63 = indexSettings57.isIndexUsingShadowReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(indexMetaData64);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.lang.String str65 = indexSettings57.defaultField;
        boolean boolean66 = indexSettings57.defaultAllowUnmappedFields;
        org.elasticsearch.common.logging.ESLogger eSLogger67 = indexSettings57.getlogger();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting68 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(eSLogger67);
        org.junit.Assert.assertNotNull(timeValueSetting68);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting58 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig59 = indexSettings57.getmergePolicyConfig();
        org.elasticsearch.Version version60 = indexSettings57.getversion();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(durabilitySetting58);
        org.junit.Assert.assertNotNull(mergePolicyConfig59);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(timeValue61);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting60 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(intSetting60);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(timeValueSetting62);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.putNull("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet16 = indexScopedSettings10.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean18 = indexScopedSettings10.get(booleanSetting17);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray26 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray27 = settings19.getAsArray("active_allocations", strArray26);
        java.lang.String str29 = settings19.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate36 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass37 = strPredicate36.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder31.put("index.creation_date_string", (java.lang.Class) wildcardClass37);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder39.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate45 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass46 = strPredicate45.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder40.put("index.creation_date_string", (java.lang.Class) wildcardClass46);
        boolean boolean49 = indexScopedSettings10.updateDynamicSettings(settings19, builder38, builder40, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.put("index.creation_date", true);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder40.loadFromSource("index.uuid");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray64 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray65 = settings57.getAsArray("active_allocations", strArray64);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray75 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray76 = settings68.getAsArray("active_allocations", strArray75);
        java.lang.String str78 = settings68.toDelimitedString('4');
        indexScopedSettings66.validate("index.number_of_shards", settings68);
        java.util.function.Predicate<java.lang.String> strPredicate80 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings81 = settings68.filter(strPredicate80);
        org.elasticsearch.common.unit.TimeValue timeValue83 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue84 = settings81.getAsTime("index.number_of_replicas", timeValue83);
        org.elasticsearch.common.settings.Settings settings86 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray93 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray94 = settings86.getAsArray("active_allocations", strArray93);
        java.lang.String[] strArray95 = settings81.getAsArray("index.blocks.metadata", strArray94);
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder40.put("_na_", "index.version.upgraded", strArray65, strArray95);
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder8.putArray("archived.", strArray95);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder8.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(wildcardSettingSet16);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + false + "'", boolean18, false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strPredicate36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strPredicate45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strPredicate80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(timeValue84);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.put("index.shared_filesystem.recover_on_any_node", "");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = builder48.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.put("", (-1));
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.elasticsearch.Version version30 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version32 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNull(version32);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings10.toXContent(xContentBuilder11, params12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        indexScopedSettings5.validate("index.shared_filesystem.recover_on_any_node", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        indexScopedSettings16.validate("index.number_of_shards", settings18);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.common.settings.Settings settings33 = settings18.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings18);
        org.elasticsearch.Version version35 = indexMetaData0.getUpgradedVersion();
        java.lang.Object obj36 = null;
        boolean boolean37 = indexMetaData0.equals(obj36);
        int int38 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertNull(xContentBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(version35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap56 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap56);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings57.getNodeSettings();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig62 = indexSettings57.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(mergePolicyConfig62);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property53 = indexScopedSettings52.getScope();
        boolean boolean55 = indexScopedSettings52.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting57 = indexScopedSettings52.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray65 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray66 = settings58.getAsArray("active_allocations", strArray65);
        java.lang.String str68 = settings58.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings58);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings58.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder76 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean81 = indexScopedSettings52.updateSettings(settings58, builder72, builder79, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder72.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = builder84.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder32.put(strMap85);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder32.putNull("index.creation_date");
        java.util.concurrent.TimeUnit timeUnit91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder92 = builder32.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", 60000L, timeUnit91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + property53 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property53.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder54.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder55.putMapping("", "index.priority");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.data_path", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder53.put("", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder53.put("_na_", "index.version.created");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder53.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder46.put(strMap63);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig63 = indexSettings57.mergePolicyConfig;
        java.lang.String str64 = indexSettings57.defaultField;
        boolean boolean65 = indexSettings57.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str65 = indexSettings57.getNodeName();
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.getlogger();
        org.elasticsearch.common.settings.Settings settings67 = indexSettings57.settings;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.syncInterval;
        org.elasticsearch.Version version69 = indexSettings57.getIndexVersionCreated();
        boolean boolean70 = indexSettings57.defaultAllowUnmappedFields;
        indexSettings57.setMaxRefreshListeners((int) (short) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(eSLogger66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.index("index.version.upgraded");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings57.getSettings();
        org.elasticsearch.Version version63 = indexSettings57.getIndexVersionCreated();
        org.apache.lucene.index.MergePolicy mergePolicy64 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(mergePolicy64);
        org.junit.Assert.assertNotNull(eSLogger65);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.blocks.metadata");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.version.created_string");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        int int97 = indexMetaData61.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap98 = indexMetaData61.getMappings();
        org.elasticsearch.Version version99 = indexMetaData61.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap98);
        org.junit.Assert.assertNotNull(version99);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings60.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings60.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue63 = null;
        indexSettings60.refreshInterval = timeValue63;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = indexSettings60.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(indexMetaData65);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.version.minimum_compatible");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting65 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = indexSettings57.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str68 = indexSettings57.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue70 = indexSettings57.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intSetting65);
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
        org.junit.Assert.assertNotNull(timeValueSetting67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "_all" + "'", str68, "_all");
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(timeValue70);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("archived.");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.putMapping(mappingMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm((int) '#', (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str14 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version15 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("state-", (double) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.creation_date_string", 1);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder50.putNull("10.0");
        java.nio.file.Path path56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder57 = builder50.loadFromPath(path56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("hi!", (int) '4');
        java.io.InputStream inputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder53 = builder47.loadFromStream("index.auto_expand_replicas", inputStream52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.settings.Settings settings53 = null; // flaky: indexSettings52.getNodeSettings();
        boolean boolean54 = false; // flaky: org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings53);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        java.lang.Object obj36 = null;
        boolean boolean37 = settings12.equals(obj36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings0.dryRun(settings12);
        java.lang.String str39 = indexScopedSettings0.nodeName();
        java.lang.String str40 = indexScopedSettings0.nodeName();
        java.util.function.Predicate<java.lang.String> strPredicate41 = indexScopedSettings0.getINDEX_SETTINGS_KEY_PREDICATE();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strPredicate41);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        int int55 = 0; // flaky: indexSettings52.getMaxRefreshListeners();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1000 + "'", int55 == 1000);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String str40 = builder38.remove("");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray48 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray49 = settings41.getAsArray("active_allocations", strArray48);
        java.lang.String str51 = settings41.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue56 = settings53.getAsBytesSize("index.creation_date", byteSizeValue55);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder38.put(settings53);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet59 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass60 = wildcardSettingSet59.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder38.put("index.number_of_shards", (java.lang.Class) wildcardClass60);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder38.put("index.shared_filesystem.recover_on_any_node", 10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state69 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder67.state(state69);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray80 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray81 = settings73.getAsArray("active_allocations", strArray80);
        java.lang.String str83 = settings73.toDelimitedString('4');
        indexScopedSettings71.validate("index.number_of_shards", settings73);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder70.settings(settings73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder70.index("active_allocations");
        int int89 = builder88.numberOfShards();
        java.lang.Class<?> wildcardClass90 = builder88.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder38.put("index.blocks.metadata", (java.lang.Class) wildcardClass90);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder4.put("archived.", (java.lang.Class) wildcardClass90);
        java.nio.file.Path path93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder94 = builder4.loadFromPath(path93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNull(byteSizeValue56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(wildcardSettingSet59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + state69 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state69.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(indexScopedSettings71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.data_path", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder46.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.putNull("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("active_allocations", (long) '#');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        java.util.Set<java.lang.String> strSet63 = indexMetaData61.activeAllocationIds(0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters64 = indexMetaData61.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(discoveryNodeFilters64);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Set<java.lang.String> strSet7 = settings6.names();
        boolean boolean8 = settings6.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.blocks.write", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property53 = indexScopedSettings52.getScope();
        boolean boolean55 = indexScopedSettings52.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting57 = indexScopedSettings52.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray65 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray66 = settings58.getAsArray("active_allocations", strArray65);
        java.lang.String str68 = settings58.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings58);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings58.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder76 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean81 = indexScopedSettings52.updateSettings(settings58, builder72, builder79, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder72.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = builder84.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder32.put(strMap85);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder32.putNull("index.creation_date");
        java.nio.file.Path path89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder90 = builder32.loadFromPath(path89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + property53 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property53.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property53 = indexScopedSettings52.getScope();
        boolean boolean55 = indexScopedSettings52.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting57 = indexScopedSettings52.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray65 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray66 = settings58.getAsArray("active_allocations", strArray65);
        java.lang.String str68 = settings58.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings58);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings58.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder76 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean81 = indexScopedSettings52.updateSettings(settings58, builder72, builder79, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder72.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = builder84.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder32.put(strMap85);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder32.putNull("index.creation_date");
        java.nio.file.Path path89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder90 = builder88.loadFromPath(path89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + property53 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property53.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("hi!", (int) '4');
        org.elasticsearch.common.settings.Settings.Builder builder51 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.loadFromSource("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray64 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray65 = settings57.getAsArray("active_allocations", strArray64);
        java.lang.String str67 = settings57.toDelimitedString('4');
        indexScopedSettings55.validate("index.number_of_shards", settings57);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = settings57.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        java.lang.String str71 = indexScopedSettings70.nodeName();
        java.util.function.Predicate<java.lang.String> strPredicate72 = indexScopedSettings70.getINDEX_SETTINGS_KEY_PREDICATE();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction73 = null;
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder54.putProperties(strMap69, strPredicate72, strFunction73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder50.put(strMap69);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder50.put("index.number_of_shards", "_all");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder82 = builder50.put("", (long) 10, byteSizeUnit81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strPredicate72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher65 = indexSettings57.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher65);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.getlogger();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting66 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = indexSettings57.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(eSLogger65);
        org.junit.Assert.assertNotNull(intSetting66);
        org.junit.Assert.assertNotNull(timeValueSetting67);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putMapping(mappingMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray39 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray40 = settings32.getAsArray("active_allocations", strArray39);
        java.lang.String str42 = settings32.toDelimitedString('4');
        indexScopedSettings30.validate("index.number_of_shards", settings32);
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings45 = settings32.filter(strPredicate44);
        org.elasticsearch.common.unit.TimeValue timeValue47 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue48 = settings45.getAsTime("index.number_of_replicas", timeValue47);
        java.lang.String str50 = settings45.get("index.");
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        boolean boolean52 = indexSettings51.getqueryStringAnalyzeWildcard();
        indexSettings51.setTTLPurgeDisabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) (short) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.setRoutingNumShards(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder22.putCustom("index.blocks.metadata", custom24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfReplicas(1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.shadow_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("", false);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.putNull("index.version.created_string");
        java.io.InputStream inputStream56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.loadFromStream("archived.", inputStream56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        java.lang.String[] strArray62 = new java.lang.String[] { "active_allocations", "index.shared_filesystem", "index.uuid", "", "index.uuid", "index.version.created", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index.shared_filesystem", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder48.putArray("index.priority", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder48.put("index.blocks.read", 1000);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder68.replacePropertyPlaceholders();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder73 = builder68.put("index.data_path", (-1L), byteSizeUnit72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder37.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("", "index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder9.settings(builder41);
        org.elasticsearch.common.settings.Settings settings46 = builder41.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting58 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting59 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        indexSettings57.maxRefreshListeners = (short) 100;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(durabilitySetting58);
        org.junit.Assert.assertNotNull(timeValueSetting59);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting65 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int66 = indexSettings57.maxRefreshListeners;
        org.elasticsearch.common.unit.TimeValue timeValue67 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intSetting65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1000 + "'", int66 == 1000);
        org.junit.Assert.assertNotNull(timeValue67);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings57.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap62 = settings61.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap62);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        indexSettings19.setEnableWarmer(true);
        java.lang.String str22 = indexSettings19.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting23 = indexSettings19.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.unit.TimeValue timeValue24 = indexSettings19.getTranslogSyncInterval();
        java.lang.String str25 = indexSettings19.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_all" + "'", str22, "_all");
        org.junit.Assert.assertNotNull(booleanSetting23);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_all" + "'", str25, "_all");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        indexSettings57.warmerEnabled = true;
        boolean boolean63 = indexSettings57.isIndexUsingShadowReplicas();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig64 = indexSettings57.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig64);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putCustom("index.creation_date", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.numberOfReplicas(32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfReplicas((int) (byte) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getALLOW_UNMAPPED();
        long long67 = indexSettings57.gcDeletesInMillis;
        org.apache.lucene.index.MergePolicy mergePolicy68 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting69 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting70 = indexSettings57.getDEFAULT_FIELD_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertNotNull(mergePolicy68);
        org.junit.Assert.assertNotNull(booleanSetting69);
        org.junit.Assert.assertNotNull(strSetting70);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards((int) (byte) 10);
        long long5 = builder4.version();
        int int6 = builder4.getRoutingNumShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        java.util.function.Predicate<java.lang.String> strPredicate64 = indexSettings57.indexNameMatcher;
        boolean boolean65 = indexSettings57.getqueryStringLenient();
        boolean boolean66 = indexSettings57.getdefaultAllowUnmappedFields();
        boolean boolean67 = indexSettings57.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        indexSettings57.gcDeletesInMillis = (short) 10;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting63 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger64 = indexSettings57.logger;
        boolean boolean65 = indexSettings57.queryStringAllowLeadingWildcard;
        indexSettings57.setTTLPurgeDisabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(byteSizeValueSetting63);
        org.junit.Assert.assertNotNull(eSLogger64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder8.mapping("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings11.getScope();
        boolean boolean14 = indexScopedSettings11.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting16 = indexScopedSettings11.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray24 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray25 = settings17.getAsArray("active_allocations", strArray24);
        java.lang.String str27 = settings17.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings17.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean40 = indexScopedSettings11.updateSettings(settings17, builder31, builder38, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder31.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = builder43.internalMap();
        org.elasticsearch.common.settings.Settings settings45 = builder43.build();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder43.put("index.number_of_replicas", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder48.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder48.put("10.0", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder48.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder48.normalizePrefix("10.0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder8.settings(builder48);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        java.lang.String str59 = indexSettings57.getDefaultField();
        indexSettings57.setMaxRescoreWindow((int) ' ');
        long long62 = indexSettings57.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "_all" + "'", str59, "_all");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putMapping(mappingMetaData6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        indexScopedSettings2.validate("index.number_of_shards", settings4);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings16.getAsTime("hi!", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings16);
        java.util.Set<java.lang.String> strSet21 = settings16.names();
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) (-1));
        int int6 = builder3.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.loadFromSource("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings6.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        java.lang.String str20 = indexScopedSettings19.nodeName();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings19.getINDEX_SETTINGS_KEY_PREDICATE();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction22 = null;
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder3.putProperties(strMap18, strPredicate21, strFunction22);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder27 = builder3.put("index.number_of_shards", (long) 'a', byteSizeUnit26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.loadFromSource("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings6.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        java.lang.String str20 = indexScopedSettings19.nodeName();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings19.getINDEX_SETTINGS_KEY_PREDICATE();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction22 = null;
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder3.putProperties(strMap18, strPredicate21, strFunction22);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder3.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", 10);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.number_of_replicas", (float) 10);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder33 = builder26.put("_na_", (long) ' ', byteSizeUnit32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray54 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray55 = settings47.getAsArray("active_allocations", strArray54);
        java.lang.String str57 = settings47.toDelimitedString('4');
        indexScopedSettings45.validate("index.number_of_shards", settings47);
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings60 = settings47.filter(strPredicate59);
        org.elasticsearch.common.unit.TimeValue timeValue62 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue63 = settings60.getAsTime("index.number_of_replicas", timeValue62);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray72 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray73 = settings65.getAsArray("active_allocations", strArray72);
        java.lang.String[] strArray74 = settings60.getAsArray("index.blocks.metadata", strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder44.put(settings60);
        java.lang.String str78 = settings60.get("index.shared_filesystem", "index.version.minimum_compatible");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings60.getGroups("state-", false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "index.version.minimum_compatible" + "'", str78, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(strMap81);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData58);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData58.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        indexSettings28.gcDeletesInMillis = (-1L);
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig31 = indexSettings28.getmergePolicyConfig();
        boolean boolean32 = indexSettings28.getisShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(mergePolicyConfig31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig65 = indexSettings57.mergeSchedulerConfig;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig65);
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        boolean boolean66 = indexSettings57.getqueryStringAllowLeadingWildcard();
        int int67 = indexSettings57.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings52.syncInterval;
        int int54 = 0; // flaky: indexSettings52.getNumberOfShards();
        boolean boolean55 = false; // flaky: indexSettings52.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        java.lang.Object obj36 = null;
        boolean boolean37 = settings12.equals(obj36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings0.dryRun(settings12);
        org.elasticsearch.common.settings.Settings settings40 = settings38.getByPrefix("index.creation_date_string");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue43 = settings40.getAsRatio("index.blocks.read_only", "index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putAlias(aliasMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.blocks.read_only", custom12);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(100L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        long long12 = indexMetaData0.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData64.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData64.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        int int72 = indexMetaData64.getRoutingNumShards();
        boolean boolean73 = indexSettings57.updateIndexMetaData(indexMetaData64);
        org.elasticsearch.Version version74 = indexMetaData64.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(version74);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings8.toXContent(xContentBuilder9, params10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings8.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings8.getAsSize("index.blocks.read", sizeValue16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings18.getScope();
        boolean boolean21 = indexScopedSettings18.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting23 = indexScopedSettings18.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray31 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray32 = settings24.getAsArray("active_allocations", strArray31);
        java.lang.String str34 = settings24.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings24.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean47 = indexScopedSettings18.updateSettings(settings24, builder38, builder45, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.put("index.number_of_shards", 10L);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder50.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList60);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = builder50.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray76 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray77 = settings69.getAsArray("active_allocations", strArray76);
        java.lang.String str79 = settings69.toDelimitedString('4');
        indexScopedSettings67.validate("index.number_of_shards", settings69);
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings82 = settings69.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = settings66.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings84 = settings8.filter(strPredicate81);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings84);
        java.lang.String str86 = indexSettings85.defaultField;
        int int87 = indexSettings85.numberOfShards;
        boolean boolean88 = indexSettings85.isIndexUsingShadowReplicas();
        boolean boolean89 = indexSettings85.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "_all" + "'", str86, "_all");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters56 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters56);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue24 = settings21.getAsBytesSize("index.creation_date", byteSizeValue23);
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        int int26 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNull(byteSizeValue24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData64.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData64.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        int int72 = indexMetaData64.getRoutingNumShards();
        boolean boolean73 = indexSettings57.updateIndexMetaData(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData64.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.creation_date", custom5);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putMapping(mappingMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        boolean boolean60 = indexSettings57.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting61 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings57.getNodeSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(intSetting61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNotNull(booleanSetting64);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas((int) '#');
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.putAlias(aliasMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting64 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Settings settings65 = indexSettings57.nodeSettings;
        java.util.function.Predicate<java.lang.String> strPredicate66 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(durabilitySetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertNotNull(booleanSetting67);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig65 = indexSettings57.mergeSchedulerConfig;
        boolean boolean66 = indexSettings57.getdefaultAllowUnmappedFields();
        indexSettings57.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Settings settings69 = indexSettings57.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(settings69);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        int int61 = indexSettings57.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10000 + "'", int61 == 10000);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        boolean boolean11 = indexMetaData0.isSameUUID("10.0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray54 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray55 = settings47.getAsArray("active_allocations", strArray54);
        java.lang.String str57 = settings47.toDelimitedString('4');
        indexScopedSettings45.validate("index.number_of_shards", settings47);
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings60 = settings47.filter(strPredicate59);
        org.elasticsearch.common.unit.TimeValue timeValue62 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue63 = settings60.getAsTime("index.number_of_replicas", timeValue62);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray72 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray73 = settings65.getAsArray("active_allocations", strArray72);
        java.lang.String[] strArray74 = settings60.getAsArray("index.blocks.metadata", strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder44.put(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings60.getAsGroups(false);
        java.lang.String str79 = settings60.toDelimitedString('4');
        java.lang.String str82 = settings60.get("index.version.created", "primary_terms");
        java.lang.String[] strArray84 = settings60.getAsArray("index.blocks.read");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings60.getAsGroups();
        java.lang.String[] strArray87 = settings60.getAsArray("index.blocks.write");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "primary_terms" + "'", str82, "primary_terms");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        java.nio.file.Path path6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.loadFromPath(path6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet6 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer8 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(booleanSetting7, booleanConsumer8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.number_of_shards", 10L);
        java.lang.String str44 = builder42.remove("");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray52 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray53 = settings45.getAsArray("active_allocations", strArray52);
        java.lang.String str55 = settings45.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings45);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings45);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = settings57.getAsBytesSize("index.creation_date", byteSizeValue59);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder42.put(settings57);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params64 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings62.toXContent(xContentBuilder63, params64);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings62.getGroups("index.shared_filesystem", true);
        java.lang.Object obj69 = null;
        boolean boolean70 = settings62.equals(obj69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings0.diff(settings57, settings62);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = settings62.getAsMemory("index.shadow_replicas", "index.uuid");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.shadow_replicas] with value [index.uuid] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(wildcardSettingSet6);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(params64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int55 = builder54.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData57 = builder54.mapping("active_allocations");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(mappingMetaData57);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.putNull("index.creation_date_string");
        java.lang.String str22 = builder20.get("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder20.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("", 0L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        java.lang.String str50 = builder48.get("index.shadow_replicas");
        java.lang.String str52 = builder48.get("index.version.minimum_compatible");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder56 = builder48.put("index.blocks.write", (long) '4', byteSizeUnit55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        org.elasticsearch.common.unit.TimeValue timeValue55 = null; // flaky: indexSettings52.getTranslogSyncInterval();
        boolean boolean56 = false; // flaky: indexSettings52.getqueryStringLenient();
        long long57 = 0L; // flaky: indexSettings52.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = null; // flaky: indexSettings52.getFlushThresholdSize();
        boolean boolean59 = false; // flaky: indexSettings52.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
// flaky:         org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        org.elasticsearch.common.unit.TimeValue timeValue55 = null; // flaky: indexSettings52.getTranslogSyncInterval();
        boolean boolean56 = false; // flaky: indexSettings52.getqueryStringLenient();
        long long57 = 0L; // flaky: indexSettings52.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = null; // flaky: indexSettings52.getFlushThresholdSize();
        boolean boolean59 = false; // flaky: indexSettings52.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
// flaky:         org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder4.settings(settings7);
        long long21 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder23.removeAllAliases();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.common.unit.TimeValue timeValue54 = null; // flaky: indexSettings52.syncInterval;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher55 = null; // flaky: indexSettings52.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue54);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher55);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.putNull("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder27.put("index.version.upgraded", 100);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder27.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.upgraded", custom3);
        int int5 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.removeAlias("false");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting60 = indexSettings57.getDEFAULT_FIELD_SETTING();
        boolean boolean61 = indexSettings57.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getINDEX_TTL_DISABLE_PURGE_SETTING();
        indexSettings57.warmerEnabled = false;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig65 = indexSettings57.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(strSetting60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(booleanSetting62);
        org.junit.Assert.assertNotNull(mergePolicyConfig65);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("100.0", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("false");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray7 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray8 = settings0.getAsArray("active_allocations", strArray7);
        java.lang.String str10 = settings0.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings0.getAsGroups(true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue16 = settings0.getAsRatio("100.0", "index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.index("index.");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.putMapping(mappingMetaData11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        int int65 = indexSettings57.maxRefreshListeners;
        indexSettings57.maxRefreshListeners = '4';
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting69 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1000 + "'", int65 == 1000);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(intSetting69);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings52.syncInterval;
        int int54 = 0; // flaky: indexSettings52.getNumberOfShards();
        org.apache.lucene.index.MergePolicy mergePolicy55 = null; // flaky: indexSettings52.getMergePolicy();
        java.util.function.Predicate<java.lang.String> strPredicate56 = null; // flaky: indexSettings52.indexNameMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy55);
        org.junit.Assert.assertNull(strPredicate56);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        org.elasticsearch.Version version13 = null;
        org.elasticsearch.Version version14 = settings10.getAsVersion("", version13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings10);
        java.lang.String str16 = indexSettings15.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings15.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean18 = indexSettings15.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting19 = indexSettings15.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValueSetting19);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.put("", (float) (short) 100);
        java.lang.String str35 = builder27.get("");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder27.put("primary_terms", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray49 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray50 = settings42.getAsArray("active_allocations", strArray49);
        java.lang.String str52 = settings42.toDelimitedString('4');
        indexScopedSettings40.validate("index.number_of_shards", settings42);
        java.util.function.Predicate<java.lang.String> strPredicate54 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings55 = settings42.filter(strPredicate54);
        org.elasticsearch.common.unit.TimeValue timeValue57 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue58 = settings55.getAsTime("index.number_of_replicas", timeValue57);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray67 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray68 = settings60.getAsArray("active_allocations", strArray67);
        java.lang.String[] strArray69 = settings55.getAsArray("index.blocks.metadata", strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder38.putArray("index.number_of_replicas", strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder22.extendArray("_na_", strArray68);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100.0" + "'", str35, "100.0");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strPredicate54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertNotNull(timeValue58);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        int int65 = indexSettings57.maxRefreshListeners;
        indexSettings57.maxRefreshListeners = '4';
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig68 = indexSettings57.mergePolicyConfig;
        indexSettings57.maxRefreshListeners = '4';
        boolean boolean71 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Settings settings72 = indexSettings57.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1000 + "'", int65 == 1000);
        org.junit.Assert.assertNotNull(mergePolicyConfig68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putCustom("index.creation_date", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.creationDate((long) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(version5);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings39 = settings14.getByPrefix("index.version.upgraded_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = null;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params43 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = settings41.toXContent(xContentBuilder42, params43);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = settings39.toXContent(xContentBuilder40, params43);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = indexMetaData0.toXContent(xContentBuilder7, params43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(params43);
        org.junit.Assert.assertNull(xContentBuilder44);
        org.junit.Assert.assertNull(xContentBuilder45);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting60 = indexSettings57.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting61 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        int int62 = indexSettings57.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig63 = indexSettings57.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(booleanSetting60);
        org.junit.Assert.assertNotNull(durabilitySetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig63);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder64.index("index.shadow_replicas");
        long long67 = builder66.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder66.removeAlias("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder69.removeAlias("index.creation_date");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfReplicas((int) (short) 10);
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Set<java.lang.String> strSet7 = settings6.names();
        boolean boolean8 = settings6.isEmpty();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.settings(settings6);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = settings6.getAsMap();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        java.lang.String str63 = indexSettings57.getNodeName();
        java.lang.String str64 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Settings settings65 = indexSettings57.getNodeSettings();
        indexSettings57.gcDeletesInMillis = (short) 1;
        boolean boolean68 = indexSettings57.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        long long6 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.index("active_allocations");
        // The following exception was thrown during execution in test generation
        try {
            long long10 = builder3.primaryTerm(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig61 = indexSettings57.mergeSchedulerConfig;
        boolean boolean62 = indexSettings57.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version63 = indexSettings57.getversion();
        indexSettings57.setMaxRescoreWindow(32);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(version63);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getdefaultAllowUnmappedFields();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.queryStringAnalyzeWildcard;
        boolean boolean65 = indexSettings57.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData29.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property32 = indexScopedSettings31.getScope();
        boolean boolean34 = indexScopedSettings31.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting36 = indexScopedSettings31.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray44 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray45 = settings37.getAsArray("active_allocations", strArray44);
        java.lang.String str47 = settings37.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings37.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean60 = indexScopedSettings31.updateSettings(settings37, builder51, builder58, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder51.put("index.number_of_shards", 10L);
        java.lang.String[] strArray72 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder63.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList73);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder63.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings79 = builder63.build();
        java.lang.Boolean boolean82 = settings79.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue84 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue85 = settings79.getAsSize("", sizeValue84);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings79);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting87 = indexSettings86.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version88 = indexSettings86.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue89 = indexSettings86.flushThresholdSize;
        indexSettings28.flushThresholdSize = byteSizeValue89;
        java.lang.String str91 = indexSettings28.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + property32 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property32.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertEquals("'" + boolean82 + "' != '" + false + "'", boolean82, false);
        org.junit.Assert.assertNull(sizeValue85);
        org.junit.Assert.assertNotNull(intSetting87);
        org.junit.Assert.assertNotNull(version88);
        org.junit.Assert.assertNotNull(byteSizeValue89);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        indexScopedSettings11.validate("index.number_of_shards", settings13);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings13);
        java.util.Set<java.lang.String> strSet27 = settings13.names();
        java.lang.String str29 = settings13.get("primary_terms");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue32 = settings13.getAsMemory("index.blocks.write", "index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.blocks.write] with value [index.shadow_replicas] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        java.lang.Object obj36 = null;
        boolean boolean37 = settings12.equals(obj36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings0.dryRun(settings12);
        org.elasticsearch.common.settings.Settings settings40 = settings38.getByPrefix("index.creation_date_string");
        java.util.Set<java.lang.String> strSet41 = settings40.names();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strSet41);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings31 = settings6.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings6.getAsMap();
        org.elasticsearch.common.unit.SizeValue sizeValue34 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue35 = settings6.getAsSize("index.uuid", sizeValue34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = settings6.getAsMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(sizeValue35);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.Version version54 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = indexSettings57.scopedSettings;
        indexSettings57.setwarmerEnabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom33 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.putCustom("10.0", custom33);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("archived.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate(0L);
        long long4 = builder3.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        int int62 = indexSettings57.numberOfShards;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean64 = indexSettings57.isQueryStringAnalyzeWildcard();
        boolean boolean65 = indexSettings57.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder1.mapping("");
        int int11 = builder1.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder7.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder7.put("10.0", (long) (byte) 1);
        java.util.concurrent.TimeUnit timeUnit44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.put("index.blocks.write", (-1L), timeUnit44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("", 0L);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property29 = indexScopedSettings28.getScope();
        boolean boolean31 = indexScopedSettings28.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting33 = indexScopedSettings28.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray41 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray42 = settings34.getAsArray("active_allocations", strArray41);
        java.lang.String str44 = settings34.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings34.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean57 = indexScopedSettings28.updateSettings(settings34, builder48, builder55, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder48.put("index.number_of_shards", 10L);
        java.lang.String[] strArray69 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder60.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList70);
        org.elasticsearch.common.settings.Settings settings73 = builder60.build();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder60.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder60.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap79 = builder60.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder26.put(strMap79);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder80.putNull("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder80.loadFromSource("archived.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + property29 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property29.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(wildcardSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.logger;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings57.refreshInterval;
        boolean boolean64 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            mappingMetaData9.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexMetaData0.readFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(settings4);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.shared_filesystem", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("index.blocks.write", (double) ' ');
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property14 = indexScopedSettings13.getScope();
        boolean boolean16 = indexScopedSettings13.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = settings18.toXContent(xContentBuilder19, params20);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings18);
        indexScopedSettings13.validate("index.shared_filesystem.recover_on_any_node", settings18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray33 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray34 = settings26.getAsArray("active_allocations", strArray33);
        java.lang.String str36 = settings26.toDelimitedString('4');
        indexScopedSettings24.validate("index.number_of_shards", settings26);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings26);
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings26);
        boolean boolean40 = settings26.isEmpty();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray49 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray50 = settings42.getAsArray("active_allocations", strArray49);
        java.lang.String[] strArray51 = settings26.getAsArray("index.shared_filesystem", strArray50);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder11.extendArray("index.shadow_replicas", strArray50);
        java.lang.String str54 = builder52.get("index.blocks.read_only");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + property14 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property14.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(params20);
        org.junit.Assert.assertNull(xContentBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        org.elasticsearch.Version version13 = null;
        org.elasticsearch.Version version14 = settings10.getAsVersion("", version13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings10);
        java.lang.String str16 = indexSettings15.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings15.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean18 = indexSettings15.hasCustomDataPath();
        int int19 = indexSettings15.getMaxResultWindow();
        boolean boolean20 = indexSettings15.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = settings2.getAsMap();
        java.lang.Boolean boolean17 = settings2.getAsBoolean("", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings2.getGroups("100.0", false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(eSLogger63);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        boolean boolean60 = indexSettings57.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting61 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(intSetting61);
        org.junit.Assert.assertNotNull(timeValue62);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.putNull("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings settings12 = builder8.build();
        java.lang.String str15 = settings12.get("archived.", "index.version.minimum_compatible");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = settings12.toXContent(xContentBuilder16, params17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.version.minimum_compatible" + "'", str15, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(params17);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long7 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        java.lang.String str33 = builder27.remove("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put("index.shadow_replicas", "index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder40 = builder27.put("state-", (long) (byte) -1, byteSizeUnit39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting63 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(durabilitySetting63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings33 = settings8.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings33.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.putCustom("_na_", custom37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder38.putCustom("", custom40);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet14 = indexScopedSettings8.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean16 = indexScopedSettings8.get(booleanSetting15);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray24 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray25 = settings17.getAsArray("active_allocations", strArray24);
        java.lang.String str27 = settings17.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass35 = strPredicate34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder29.put("index.creation_date_string", (java.lang.Class) wildcardClass35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass44 = strPredicate43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.put("index.creation_date_string", (java.lang.Class) wildcardClass44);
        boolean boolean47 = indexScopedSettings8.updateDynamicSettings(settings17, builder36, builder38, "_na_");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int51 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(wildcardSettingSet14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder5.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray35 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder12.putArray("index.creation_date", (java.util.List<java.lang.String>) strList36);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder12.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.putNull("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder40.put("", true);
        org.elasticsearch.common.settings.Settings settings46 = builder40.build();
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings46);
        boolean boolean48 = settings46.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.put("hi!", "hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        int int97 = indexSettings96.getNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings98 = indexSettings96.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings98);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings37 = builder34.build();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.common.logging.ESLogger eSLogger61 = indexSettings57.logger;
        boolean boolean62 = indexSettings57.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(eSLogger61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        int int97 = indexMetaData61.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder98 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder99 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray40 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray41 = settings33.getAsArray("active_allocations", strArray40);
        java.lang.String str43 = settings33.toDelimitedString('4');
        indexScopedSettings31.validate("index.number_of_shards", settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings33.getAsGroups(false);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters48 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(discoveryNodeFilters48);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        long long60 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.syncInterval;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 60000L + "'", long60 == 60000L);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(timeValueSetting62);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getRefreshInterval();
        long long66 = indexSettings57.getGcDeletesInMillis();
        boolean boolean67 = indexSettings57.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 60000L + "'", long66 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = indexSettings57.getScopedSettings();
        int int66 = indexSettings57.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        indexScopedSettings11.validate("index.number_of_shards", settings13);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.common.unit.TimeValue timeValue28 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue29 = settings13.getAsTime("index.number_of_shards", timeValue28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.write");
        long long32 = builder31.version();
        boolean boolean33 = settings13.equals((java.lang.Object) builder31);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.putAlias(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("100.0", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder4.put("index.creation_date", 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder4.putNull("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        int int65 = indexSettings57.maxRefreshListeners;
        indexSettings57.maxRefreshListeners = '4';
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.getTranslogSyncInterval();
        boolean boolean69 = indexSettings57.warmerEnabled;
        indexSettings57.warmerEnabled = true;
        boolean boolean73 = indexSettings57.matchesIndexName("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings74 = indexSettings57.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1000 + "'", int65 == 1000);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray7 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray8 = settings0.getAsArray("active_allocations", strArray7);
        java.lang.String str10 = settings0.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue15 = settings12.getAsBytesSize("index.creation_date", byteSizeValue14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        org.elasticsearch.common.settings.Settings settings18 = settings16.getAsSettings("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNull(byteSizeValue15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings18);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.Version version63 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = indexSettings57.scopedSettings;
        boolean boolean65 = indexSettings57.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int33 = builder32.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.setRoutingNumShards((int) (short) 0);
        java.lang.String str9 = builder1.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        boolean boolean10 = indexMetaData0.isSameUUID("index.version.upgraded");
        int int11 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        int int65 = indexMetaData64.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params68 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = settings66.toXContent(xContentBuilder67, params68);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings66.getGroups("index.shared_filesystem", true);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings66);
        boolean boolean74 = indexSettings73.getwarmerEnabled();
        java.lang.String str75 = indexSettings73.getDefaultField();
        java.lang.String str76 = indexSettings73.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(params68);
        org.junit.Assert.assertNull(xContentBuilder69);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "_all" + "'", str75, "_all");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting64 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Settings settings65 = indexSettings57.nodeSettings;
        boolean boolean66 = indexSettings57.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(durabilitySetting64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings31 = settings6.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray33 = null;
        java.lang.String[] strArray35 = settings6.getAsArray("", strArray33, (java.lang.Boolean) false);
        java.lang.String str37 = settings6.toDelimitedString('#');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.created");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        java.lang.String str33 = builder27.remove("100.0");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put("index.version.upgraded_string", (double) 100);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("100.0", 10000);
        java.lang.String str41 = builder27.remove("index.creation_date_string");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.indexMetaData;
        org.elasticsearch.common.io.stream.StreamInput streamInput63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexMetaData62.readFrom(streamInput63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(indexMetaData62);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig61 = indexSettings57.mergeSchedulerConfig;
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        java.lang.String str63 = indexSettings57.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings8.toXContent(xContentBuilder9, params10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings8.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings8.getAsSize("index.blocks.read", sizeValue16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings18.getScope();
        boolean boolean21 = indexScopedSettings18.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting23 = indexScopedSettings18.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray31 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray32 = settings24.getAsArray("active_allocations", strArray31);
        java.lang.String str34 = settings24.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings24.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean47 = indexScopedSettings18.updateSettings(settings24, builder38, builder45, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.put("index.number_of_shards", 10L);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder50.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList60);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = builder50.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray76 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray77 = settings69.getAsArray("active_allocations", strArray76);
        java.lang.String str79 = settings69.toDelimitedString('4');
        indexScopedSettings67.validate("index.number_of_shards", settings69);
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings82 = settings69.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = settings66.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings84 = settings8.filter(strPredicate81);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings84);
        java.lang.String str86 = indexSettings85.defaultField;
        java.lang.String str87 = indexSettings85.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters89 = indexMetaData88.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters90 = indexMetaData88.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData88);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData93 = indexMetaData88.mapping("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData88);
        boolean boolean95 = indexSettings85.updateIndexMetaData(indexMetaData88);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "_all" + "'", str86, "_all");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "_all" + "'", str87, "_all");
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNull(discoveryNodeFilters89);
        org.junit.Assert.assertNull(discoveryNodeFilters90);
        org.junit.Assert.assertNull(mappingMetaData93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = builder9.build();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putMapping(mappingMetaData11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(indexMetaData10);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        boolean boolean63 = indexSettings57.warmerEnabled;
        java.lang.String str64 = indexSettings57.customDataPath();
        java.lang.String str65 = indexSettings57.nodeName;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting66 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteSizeValueSetting66);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher64 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig65 = indexSettings57.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting66 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher64);
        org.junit.Assert.assertNotNull(mergePolicyConfig65);
        org.junit.Assert.assertNotNull(timeValueSetting66);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray39 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray40 = settings32.getAsArray("active_allocations", strArray39);
        java.lang.String str42 = settings32.toDelimitedString('4');
        indexScopedSettings30.validate("index.number_of_shards", settings32);
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings45 = settings32.filter(strPredicate44);
        org.elasticsearch.common.unit.TimeValue timeValue47 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue48 = settings45.getAsTime("index.number_of_replicas", timeValue47);
        java.lang.String str50 = settings45.get("index.");
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        boolean boolean52 = indexSettings51.getqueryStringAnalyzeWildcard();
        boolean boolean53 = indexSettings51.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting54 = indexSettings51.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(booleanSetting54);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.putNull("index.creation_date_string");
        java.lang.String str22 = builder20.get("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder20.internalMap();
        org.elasticsearch.common.settings.Settings settings24 = builder20.build();
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        java.lang.String str27 = settings24.toDelimitedString('4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "index.=null4index.blocks.metadata=10.04index.creation_date_string=null4index.shared_filesystem.recover_on_any_node.0=index.shared_filesystem.recover_on_any_node4index.shared_filesystem.recover_on_any_node.1=index.version.upgraded_string4index.shared_filesystem.recover_on_any_node.2=active_allocations4index.shared_filesystem.recover_on_any_node.3=archived.4" + "'", str27, "index.=null4index.blocks.metadata=10.04index.creation_date_string=null4index.shared_filesystem.recover_on_any_node.0=index.shared_filesystem.recover_on_any_node4index.shared_filesystem.recover_on_any_node.1=index.version.upgraded_string4index.shared_filesystem.recover_on_any_node.2=active_allocations4index.shared_filesystem.recover_on_any_node.3=archived.4");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.loadFromSource("10.0");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("archived.", (float) (short) 100);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.put(objDictionary53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.=null4index.blocks.metadata=10.04index.creation_date_string=null4index.shared_filesystem.recover_on_any_node.0=index.shared_filesystem.recover_on_any_node4index.shared_filesystem.recover_on_any_node.1=index.version.upgraded_string4index.shared_filesystem.recover_on_any_node.2=active_allocations4index.shared_filesystem.recover_on_any_node.3=archived.4");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        long long59 = indexSettings57.gcDeletesInMillis;
        java.lang.String str60 = indexSettings57.getNodeName();
        java.lang.Class<?> wildcardClass61 = indexSettings57.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 60000L + "'", long59 == 60000L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str65 = indexSettings57.getNodeName();
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.getlogger();
        org.elasticsearch.common.settings.Settings settings67 = indexSettings57.settings;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.syncInterval;
        org.elasticsearch.Version version69 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig70 = indexSettings57.getMergeSchedulerConfig();
        org.elasticsearch.index.translog.Translog.Durability durability71 = indexSettings57.durability;
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings57.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(eSLogger66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig70);
        org.junit.Assert.assertTrue("'" + durability71 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability71.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue72);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.settings.Settings settings53 = null; // flaky: indexSettings52.getNodeSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting54 = null; // flaky: indexSettings52.getQUERY_STRING_ANALYZE_WILDCARD();
        boolean boolean55 = false; // flaky: indexSettings52.TTLPurgeDisabled;
        org.elasticsearch.Version version56 = null; // flaky: indexSettings52.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(settings53);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(version56);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("hi!", (int) '4');
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder47.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.data_path", "primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("index.shadow_replicas", (double) 32);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.shared_filesystem.recover_on_any_node", 10);
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder9.put("active_allocations", (long) 100, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        org.elasticsearch.Version version5 = null;
        org.elasticsearch.Version version6 = settings2.getAsVersion("", version5);
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings2.getAsGroups();
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(version6);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings52.refreshInterval;
// flaky:         indexSettings52.maxResultWindow = (short) -1;
        org.elasticsearch.common.unit.TimeValue timeValue56 = null; // flaky: indexSettings52.refreshInterval;
        boolean boolean57 = false; // flaky: indexSettings52.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = null; // flaky: indexSettings52.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertNotNull(timeValue56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertNotNull(intSetting58);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.primaryTerm(0, (long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfReplicas(1000);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting63 = indexSettings57.getDEFAULT_FIELD_SETTING();
        boolean boolean64 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean66 = indexSettings57.isOnSharedFilesystem();
        java.util.function.Predicate<java.lang.String> strPredicate67 = indexSettings57.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(timeValueSetting65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strPredicate67);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate(100L);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getALLOW_UNMAPPED();
        indexSettings57.maxRefreshListeners = (short) 10;
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.logger;
        org.elasticsearch.common.unit.TimeValue timeValue67 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig68 = indexSettings57.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNotNull(eSLogger66);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(mergePolicyConfig68);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet66 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        int int67 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters70 = indexMetaData69.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters71 = indexMetaData69.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = indexMetaData69.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData69);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData69.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap75 = indexMetaData69.getAliases();
        boolean boolean77 = indexMetaData69.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray87 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray88 = settings80.getAsArray("active_allocations", strArray87);
        java.lang.String str90 = settings80.toDelimitedString('4');
        indexScopedSettings78.validate("index.number_of_shards", settings80);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings80.getAsGroups(false);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings80);
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings80);
        indexSettings95.maxResultWindow = (short) 1;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNull(discoveryNodeFilters70);
        org.junit.Assert.assertNull(discoveryNodeFilters71);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(strImmutableOpenMap75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strMap93);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        int int3 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings62.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNotNull(timeValue63);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.put("index.priority", 100L);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("hi!", (float) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.priority", false);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder56 = builder54.put(objDictionary55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        org.elasticsearch.Version version5 = null;
        org.elasticsearch.Version version6 = settings2.getAsVersion("", version5);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue9 = settings2.getAsRatio("index.number_of_shards", "index.shared_filesystem");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.shared_filesystem]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(version6);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        boolean boolean61 = indexSettings57.isShadowReplicaIndex;
        boolean boolean62 = indexSettings57.isShadowReplicaIndex();
        indexSettings57.setMaxRescoreWindow((int) (byte) -1);
        org.elasticsearch.index.translog.Translog.Durability durability65 = indexSettings57.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + durability65 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability65.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("100.0");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#");
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.readDiffFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings8.toXContent(xContentBuilder9, params10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings8.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings8.getAsSize("index.blocks.read", sizeValue16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings18.getScope();
        boolean boolean21 = indexScopedSettings18.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting23 = indexScopedSettings18.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray31 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray32 = settings24.getAsArray("active_allocations", strArray31);
        java.lang.String str34 = settings24.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings24.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean47 = indexScopedSettings18.updateSettings(settings24, builder38, builder45, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.put("index.number_of_shards", 10L);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder50.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList60);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = builder50.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray76 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray77 = settings69.getAsArray("active_allocations", strArray76);
        java.lang.String str79 = settings69.toDelimitedString('4');
        indexScopedSettings67.validate("index.number_of_shards", settings69);
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings82 = settings69.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = settings66.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings84 = settings8.filter(strPredicate81);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings84);
        java.lang.String str86 = indexSettings85.defaultField;
        java.lang.String str87 = indexSettings85.getDefaultField();
        int int88 = indexSettings85.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "_all" + "'", str86, "_all");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "_all" + "'", str87, "_all");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.Version version11 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(version11);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.apache.lucene.util.Version version62 = indexMetaData60.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder64.setRoutingNumShards((int) (byte) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNull(version62);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.syncInterval;
        org.elasticsearch.index.translog.Translog.Durability durability60 = indexSettings57.getdurability();
        boolean boolean61 = indexSettings57.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertTrue("'" + durability60 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability60.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.index.Index index4 = indexMetaData0.getIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(index4);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder53.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray79 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder56.putArray("index.creation_date", (java.util.List<java.lang.String>) strList80);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder47.putArray("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#", (java.util.List<java.lang.String>) strList80);
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder47.normalizePrefix("index.number_of_shards");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData0.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.Version version31 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int34 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig61 = indexSettings57.mergeSchedulerConfig;
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(settings63);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards((int) '4');
        int int6 = builder5.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isIndexUsingShadowReplicas();
        indexSettings57.warmerEnabled = true;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.getFlushThresholdSize();
        indexSettings57.warmerEnabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(byteSizeValue66);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig61 = indexSettings57.mergeSchedulerConfig;
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean63 = indexSettings57.queryStringAnalyzeWildcard;
        long long64 = indexSettings57.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 60000L + "'", long64 == 60000L);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        indexSettings57.setMaxResultWindow(10);
        int int62 = indexSettings57.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.version.created_string", custom5);
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder7.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray17 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder8.extendArray("index.shared_filesystem.recover_on_any_node", strArray17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.settings(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.put(settings21);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder6.settings(builder24);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = builder27.primaryTerm(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder1.mapping("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.index("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        java.lang.String str13 = builder11.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.shared_filesystem" + "'", str13, "index.shared_filesystem");
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.Version version62 = indexMetaData61.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(version62);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getAsGroups(true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings45.getGroups("false", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings45.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap51);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        java.lang.String str63 = indexSettings57.getUUID();
        boolean boolean64 = indexSettings57.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_na_" + "'", str63, "_na_");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder5.loadFromSource("index.blocks.read_only");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder5.put("state-", (long) (short) 10, byteSizeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder40.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = builder40.build();
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings56.getAsSize("", sizeValue61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings56);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings63.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue65 = null;
        indexSettings63.flushThresholdSize = byteSizeValue65;
        org.elasticsearch.index.translog.Translog.Durability durability67 = indexSettings63.getTranslogDurability();
        long long68 = indexSettings63.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings69 = indexSettings63.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings69);
        org.elasticsearch.common.io.stream.StreamInput streamInput71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = indexMetaData0.readFrom(streamInput71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertNotNull(intSetting64);
        org.junit.Assert.assertTrue("'" + durability67 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability67.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 60000L + "'", long68 == 60000L);
        org.junit.Assert.assertNotNull(settings69);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        boolean boolean11 = settings5.isEmpty();
        org.elasticsearch.Version version13 = null;
        org.elasticsearch.Version version14 = settings5.getAsVersion("index.shadow_replicas", version13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = settings5.getAsStructuredMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Set<java.lang.String> strSet1 = settings0.names();
        boolean boolean2 = settings0.isEmpty();
        org.elasticsearch.common.settings.Settings settings4 = settings0.getAsSettings("index.version.created");
        org.elasticsearch.common.unit.SizeValue sizeValue6 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue7 = settings0.getAsSize("state-", sizeValue6);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(sizeValue7);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNull(strSet14);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder29.putNull("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(builder33);
        java.lang.String str36 = builder33.get("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put("index.version.minimum_compatible", false);
        java.util.concurrent.TimeUnit timeUnit42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder43 = builder39.put("index.blocks.read_only", (long) 1000, timeUnit42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        java.lang.String str63 = indexSettings57.getNodeName();
        java.lang.String str64 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting65 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean66 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertNotNull(byteSizeValueSetting65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        boolean boolean63 = indexSettings57.getwarmerEnabled();
        int int64 = indexSettings57.maxRescoreWindow;
        boolean boolean65 = indexSettings57.getwarmerEnabled();
        int int66 = indexSettings57.getMaxRescoreWindow();
        org.elasticsearch.index.translog.Translog.Durability durability67 = indexSettings57.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertTrue("'" + durability67 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability67.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet14 = indexScopedSettings8.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean16 = indexScopedSettings8.get(booleanSetting15);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray24 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray25 = settings17.getAsArray("active_allocations", strArray24);
        java.lang.String str27 = settings17.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass35 = strPredicate34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder29.put("index.creation_date_string", (java.lang.Class) wildcardClass35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass44 = strPredicate43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.put("index.creation_date_string", (java.lang.Class) wildcardClass44);
        boolean boolean47 = indexScopedSettings8.updateDynamicSettings(settings17, builder36, builder38, "_na_");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(wildcardSettingSet14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder47.replacePropertyPlaceholders();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder52 = builder47.put("index.number_of_replicas", (long) (byte) 100, byteSizeUnit51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        int int63 = indexSettings57.getNumberOfReplicas();
        boolean boolean64 = indexSettings57.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.putNull("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData7.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData7.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings11.getScope();
        boolean boolean14 = indexScopedSettings11.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting16 = indexScopedSettings11.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property18 = indexScopedSettings17.getScope();
        boolean boolean20 = indexScopedSettings17.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting22 = indexScopedSettings17.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray31 = settings23.getAsArray("active_allocations", strArray30);
        java.lang.String str33 = settings23.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings23.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean46 = indexScopedSettings17.updateSettings(settings23, builder37, builder44, "index.shared_filesystem");
        java.lang.Object obj47 = null;
        boolean boolean48 = settings23.equals(obj47);
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings11.dryRun(settings23);
        org.elasticsearch.common.settings.Settings settings51 = settings49.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate52 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property54 = indexScopedSettings53.getScope();
        boolean boolean56 = indexScopedSettings53.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting58 = indexScopedSettings53.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings59 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData7, settings51, strPredicate52, indexScopedSettings53);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray70 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray71 = settings63.getAsArray("active_allocations", strArray70);
        java.lang.String str73 = settings63.toDelimitedString('4');
        indexScopedSettings61.validate("index.number_of_shards", settings63);
        java.util.function.Predicate<java.lang.String> strPredicate75 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings76 = settings63.filter(strPredicate75);
        org.elasticsearch.common.unit.TimeValue timeValue78 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue79 = settings76.getAsTime("index.number_of_replicas", timeValue78);
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray88 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray89 = settings81.getAsArray("active_allocations", strArray88);
        java.lang.String[] strArray90 = settings76.getAsArray("index.blocks.metadata", strArray89);
        java.lang.String[] strArray91 = settings51.getAsArray("index.", strArray90);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder5.putArray("hi!", strArray91);
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder92.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardSetting16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + property18 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property18.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertTrue("'" + property54 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property54.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(wildcardSetting58);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strPredicate75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(timeValue78);
        org.junit.Assert.assertNotNull(timeValue79);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        int int97 = indexSettings96.getNumberOfShards();
        int int98 = indexSettings96.getMaxRefreshListeners();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1000 + "'", int98 == 1000);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        java.lang.String str11 = builder3.get("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property13 = indexScopedSettings12.getScope();
        boolean boolean15 = indexScopedSettings12.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params19 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = settings17.toXContent(xContentBuilder18, params19);
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        indexScopedSettings12.validate("index.shared_filesystem.recover_on_any_node", settings17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray32 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray33 = settings25.getAsArray("active_allocations", strArray32);
        java.lang.String str35 = settings25.toDelimitedString('4');
        indexScopedSettings23.validate("index.number_of_shards", settings25);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings25);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings25);
        java.util.Set<java.lang.String> strSet39 = settings25.names();
        java.lang.String str41 = settings25.toDelimitedString('a');
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder3.put(settings25);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100.0" + "'", str11, "100.0");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + property13 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property13.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(params19);
        org.junit.Assert.assertNull(xContentBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = indexSettings57.scopedSettings;
        int int66 = indexSettings57.getNumberOfShards();
        boolean boolean67 = indexSettings57.queryStringAnalyzeWildcard;
        org.elasticsearch.Version version68 = indexSettings57.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(version68);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.removeAllAliases();
        java.lang.String str21 = builder15.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder15.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass31 = strPredicate30.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder25.put("index.creation_date_string", (java.lang.Class) wildcardClass31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder15.settings(builder25);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte36 = state35.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder15.state(state35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder15.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte42 = state41.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder39.state(state41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder11.state(state41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.creationDate((long) (short) 0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 0 + "'", byte36 == (byte) 0);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 1 + "'", byte42 == (byte) 1);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean29 = indexSettings28.getqueryStringAllowLeadingWildcard();
        java.lang.String str30 = indexSettings28.getUUID();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting31 = indexSettings28.getQUERY_STRING_ANALYZE_WILDCARD();
        java.lang.String str32 = indexSettings28.nodeName;
        indexSettings28.setMaxResultWindow((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_na_" + "'", str30, "_na_");
        org.junit.Assert.assertNotNull(booleanSetting31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder53.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray79 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder56.putArray("index.creation_date", (java.util.List<java.lang.String>) strList80);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder47.putArray("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#", (java.util.List<java.lang.String>) strList80);
        java.io.InputStream inputStream85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder86 = builder83.loadFromStream("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#", inputStream85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        java.lang.String str58 = indexSettings57.nodeName;
        int int59 = indexSettings57.getNumberOfReplicas();
        boolean boolean60 = indexSettings57.queryStringAnalyzeWildcard;
        java.lang.String str61 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting62 = indexSettings57.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "_all" + "'", str61, "_all");
        org.junit.Assert.assertNotNull(strSetting62);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.=null4index.blocks.metadata=10.04index.creation_date_string=null4index.shared_filesystem.recover_on_any_node.0=index.shared_filesystem.recover_on_any_node4index.shared_filesystem.recover_on_any_node.1=index.version.upgraded_string4index.shared_filesystem.recover_on_any_node.2=active_allocations4index.shared_filesystem.recover_on_any_node.3=archived.4");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder28.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder49.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder51.putCustom("", custom53);
        java.lang.Class<?> wildcardClass55 = builder51.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder28.put("archived.", (java.lang.Class) wildcardClass55);
        java.lang.String str58 = builder56.get("index.shadow_replicas");
        java.lang.String str60 = builder56.get("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder66.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList93 = new java.util.ArrayList<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList93, strArray92);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder69.putArray("index.creation_date", (java.util.List<java.lang.String>) strList93);
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder56.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList93);
        org.elasticsearch.common.settings.Settings settings97 = builder56.build();
        org.elasticsearch.index.IndexSettings indexSettings98 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings97);
        long long99 = indexSettings98.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(settings97);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 60000L + "'", long99 == 60000L);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder37.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("", "index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder9.settings(builder41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder9.setRoutingNumShards(32);
        java.lang.String str48 = builder9.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings57.getNodeSettings();
        int int62 = indexSettings57.getMaxRefreshListeners();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = indexSettings57.indexMetaData;
        // The following exception was thrown during execution in test generation
        try {
            int int65 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData63, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1000 + "'", int62 == 1000);
        org.junit.Assert.assertNotNull(indexMetaData63);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData29.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property32 = indexScopedSettings31.getScope();
        boolean boolean34 = indexScopedSettings31.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting36 = indexScopedSettings31.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray44 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray45 = settings37.getAsArray("active_allocations", strArray44);
        java.lang.String str47 = settings37.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings37.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean60 = indexScopedSettings31.updateSettings(settings37, builder51, builder58, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder51.put("index.number_of_shards", 10L);
        java.lang.String[] strArray72 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder63.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList73);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder63.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings79 = builder63.build();
        java.lang.Boolean boolean82 = settings79.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue84 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue85 = settings79.getAsSize("", sizeValue84);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings79);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting87 = indexSettings86.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version88 = indexSettings86.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue89 = indexSettings86.flushThresholdSize;
        indexSettings28.flushThresholdSize = byteSizeValue89;
        indexSettings28.maxRefreshListeners = (byte) 0;
        boolean boolean94 = indexSettings28.matchesIndexName("_all");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + property32 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property32.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertEquals("'" + boolean82 + "' != '" + false + "'", boolean82, false);
        org.junit.Assert.assertNull(sizeValue85);
        org.junit.Assert.assertNotNull(intSetting87);
        org.junit.Assert.assertNotNull(version88);
        org.junit.Assert.assertNotNull(byteSizeValue89);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting59 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValueSetting59);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        java.lang.String str11 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder3.put("primary_terms", true);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100.0" + "'", str11, "100.0");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings57.refreshInterval;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings52.refreshInterval;
        boolean boolean54 = false; // flaky: indexSettings52.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = null; // flaky: indexSettings52.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        int int56 = 0; // flaky: indexSettings52.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10000 + "'", int56 == 10000);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        int int5 = indexMetaData0.getRoutingNumShards();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long8 = indexMetaData0.getVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        long long6 = indexMetaData0.getCreationDate();
        int int7 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.put("index.creation_date_string", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(builder11);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray30 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder21.extendArray("index.shared_filesystem.recover_on_any_node", strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.settings(settings34);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder31.put(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder19.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder19.numberOfReplicas(35);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putCustom("index.version.upgraded", custom7);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        org.elasticsearch.Version version13 = null;
        org.elasticsearch.Version version14 = settings10.getAsVersion("", version13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings10);
        org.elasticsearch.index.translog.Translog.Durability durability16 = indexSettings15.durability;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertTrue("'" + durability16 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability16.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.number_of_replicas", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.removeAllAliases();
        java.lang.String str12 = builder6.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder16.put("index.creation_date_string", (java.lang.Class) wildcardClass22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder6.settings(builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte27 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder6.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.state(state26);
        int int30 = builder29.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = builder29.primaryTerm(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder13.put("index.auto_expand_replicas", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder10.settings(builder19);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("100.0");
        int int7 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.put("index.version.minimum_compatible", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.normalizePrefix("index.");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.Version version65 = indexSettings57.version;
        java.util.function.Predicate<java.lang.String> strPredicate66 = indexSettings57.getindexNameMatcher();
        boolean boolean67 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig61 = indexSettings57.getmergePolicyConfig();
        boolean boolean62 = indexSettings57.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(mergePolicyConfig61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.readDiffFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putMapping("", "index.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder1.putCustom("hi!", custom22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.creationDate((long) (-1));
        int int26 = builder25.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings31 = settings6.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings6.getAsMap();
        org.elasticsearch.common.unit.SizeValue sizeValue34 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue35 = settings6.getAsSize("index.uuid", sizeValue34);
        boolean boolean36 = settings6.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue39 = settings6.getAsMemory("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#", "index.");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#] with value [index.] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(sizeValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder4.settings(settings7);
        long long21 = builder20.version();
        java.lang.Class<?> wildcardClass22 = builder20.getClass();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index10);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.auto_expand_replicas", (double) 0.0f);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        org.elasticsearch.index.translog.Translog.Durability durability62 = indexSettings57.getTranslogDurability();
        boolean boolean63 = indexSettings57.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNull(durability62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        int int7 = builder1.numberOfShards();
        java.lang.String str8 = builder1.index();
        int int9 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting60 = indexSettings57.getALLOW_UNMAPPED();
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        int int62 = indexSettings57.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(booleanSetting60);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        org.elasticsearch.Version version64 = indexSettings57.getIndexVersionCreated();
        indexSettings57.TTLPurgeDisabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(version64);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.number_of_replicas", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder37.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder37.put("10.0", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder37.normalizePrefix("10.0");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder37.put("index.version.created_string", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder48.normalizePrefix("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        java.lang.String str20 = indexSettings19.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings19.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting22 = indexSettings19.getDEFAULT_FIELD_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy23 = indexSettings19.getMergePolicy();
        indexSettings19.setMaxRefreshListeners((int) (byte) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(strSetting22);
        org.junit.Assert.assertNotNull(mergePolicy23);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap65 = indexMetaData64.getMappings();
        // The following exception was thrown during execution in test generation
        try {
            int int67 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData64, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(strImmutableOpenMap65);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.putNull("primary_terms");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.put(objDictionary50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        int int2 = builder1.numberOfShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig65 = indexSettings57.mergeSchedulerConfig;
        boolean boolean66 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability67 = indexSettings57.getdurability();
        boolean boolean68 = indexSettings57.isShadowReplicaIndex();
        indexSettings57.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + durability67 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability67.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version(0L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = builder7.mapping("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(mappingMetaData14);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        java.lang.String str63 = indexSettings57.getUUID();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting64 = indexSettings57.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        java.lang.String str67 = indexSettings57.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_na_" + "'", str63, "_na_");
        org.junit.Assert.assertNotNull(strSetting64);
        org.junit.Assert.assertNotNull(eSLogger65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "_all" + "'", str67, "_all");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.version.minimum_compatible", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.loadFromSource("archived.");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.put(objDictionary18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder1.put("index.creation_date_string", (java.lang.Class) wildcardClass7);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.put("index.auto_expand_replicas", "index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder1.put("index.", (double) (byte) 100);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder1.put(objDictionary15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int8 = indexMetaData0.getRoutingNumShards();
        boolean boolean10 = indexMetaData0.isSameUUID("index.creation_date");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting58 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = indexSettings57.flushThresholdSize;
        boolean boolean60 = indexSettings57.getqueryStringAllowLeadingWildcard();
        boolean boolean61 = indexSettings57.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(durabilitySetting58);
        org.junit.Assert.assertNotNull(byteSizeValue59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property37 = indexScopedSettings36.getScope();
        boolean boolean39 = indexScopedSettings36.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting41 = indexScopedSettings36.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray49 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray50 = settings42.getAsArray("active_allocations", strArray49);
        java.lang.String str52 = settings42.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings42.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean65 = indexScopedSettings36.updateSettings(settings42, builder56, builder63, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder56.put("index.number_of_shards", 10L);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder68.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder20.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList78);
        java.lang.String str83 = builder81.remove("");
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder81.put("100.0", (int) (short) 100);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + property37 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property37.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardSetting41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.number_of_replicas", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.shadow_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("100.0", (long) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.put("_na_", (float) (-1));
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("", (int) (short) 1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder41.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder41.loadFromSource("index.number_of_replicas");
        java.lang.String str57 = builder55.get("index.version.upgraded_string");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet59 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass60 = wildcardSettingSet59.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder55.put("index.shadow_replicas", (java.lang.Class) wildcardClass60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder16.put("", (java.lang.Class) wildcardClass60);
        java.nio.file.Path path63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder64 = builder62.loadFromPath(path63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(wildcardSettingSet59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        indexScopedSettings2.validate("index.number_of_shards", settings4);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings16.getAsTime("hi!", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder22.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder1.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder1.index("index.blocks.write");
        // The following exception was thrown during execution in test generation
        try {
            long long30 = builder28.primaryTerm((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        indexSettings57.TTLPurgeDisabled = true;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(timeValueSetting67);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.normalizePrefix("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.getScopedSettings();
        boolean boolean64 = indexSettings57.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings5.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray18 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray19 = settings11.getAsArray("active_allocations", strArray18);
        java.lang.String str21 = settings11.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings11.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean34 = indexScopedSettings5.updateSettings(settings11, builder25, builder32, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder25.put("index.number_of_shards", 10L);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder37.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray59 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray60 = settings52.getAsArray("active_allocations", strArray59);
        java.lang.String str62 = settings52.toDelimitedString('4');
        indexScopedSettings50.validate("index.number_of_shards", settings52);
        java.util.function.Predicate<java.lang.String> strPredicate64 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings65 = settings52.filter(strPredicate64);
        org.elasticsearch.common.unit.TimeValue timeValue67 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue68 = settings65.getAsTime("index.number_of_replicas", timeValue67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray77 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray78 = settings70.getAsArray("active_allocations", strArray77);
        java.lang.String[] strArray79 = settings65.getAsArray("index.blocks.metadata", strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder49.put(settings65);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings65.getAsGroups(false);
        java.lang.String str84 = settings65.toDelimitedString('4');
        java.lang.String str87 = settings65.get("index.version.created", "primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings65);
        org.elasticsearch.common.settings.Settings settings89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardSetting10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "primary_terms" + "'", str87, "primary_terms");
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.put("index.creation_date_string", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(builder11);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder11.normalizePrefix("active_allocations");
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.loadFromStream("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#", inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.scopedSettings;
        boolean boolean64 = indexSettings57.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        java.lang.String str63 = indexSettings57.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings57.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.getlogger();
        boolean boolean66 = indexSettings57.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(booleanSetting64);
        org.junit.Assert.assertNotNull(eSLogger65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet6 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean8 = indexScopedSettings0.get(booleanSetting7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass27 = strPredicate26.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder21.put("index.creation_date_string", (java.lang.Class) wildcardClass27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder29.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass36 = strPredicate35.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder30.put("index.creation_date_string", (java.lang.Class) wildcardClass36);
        boolean boolean39 = indexScopedSettings0.updateDynamicSettings(settings9, builder28, builder30, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.creation_date", true);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet44 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass45 = wildcardSettingSet44.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder42.put("index.version.upgraded_string", (java.lang.Class) wildcardClass45);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder42.put("index.version.minimum_compatible", (double) ' ');
        java.nio.file.Path path50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.loadFromPath(path50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(wildcardSettingSet6);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(wildcardSettingSet44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder7.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder7.put("10.0", (long) (byte) 1);
        java.util.concurrent.TimeUnit timeUnit44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder45 = builder41.put("index.version.created", (long) (short) 1, timeUnit44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        boolean boolean60 = indexSettings57.warmerEnabled;
        boolean boolean61 = indexSettings57.queryStringAllowLeadingWildcard;
        indexSettings57.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(intSetting64);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(booleanSetting63);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state0 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte1 = state0.id();
        byte byte2 = state0.id();
        byte byte3 = state0.id();
        org.junit.Assert.assertTrue("'" + state0 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state0.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 1 + "'", byte1 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getALLOW_UNMAPPED();
        indexSettings57.maxRefreshListeners = (short) 10;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting66 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNotNull(intSetting66);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getALLOW_UNMAPPED();
        long long67 = indexSettings57.gcDeletesInMillis;
        java.lang.String str68 = indexSettings57.customDataPath();
        java.lang.String str69 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting70 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "_all" + "'", str69, "_all");
        org.junit.Assert.assertNotNull(intSetting70);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        int int62 = indexSettings57.getMaxResultWindow();
        boolean boolean63 = indexSettings57.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("", custom9);
        long long11 = builder10.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.version((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.numberOfReplicas((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.index.translog.Translog.Durability durability62 = indexSettings57.durability;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + durability62 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability62.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValueSetting63);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        boolean boolean21 = indexMetaData0.isSameUUID("index.blocks.write");
        int int22 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str65 = indexSettings57.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet66 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap67 = indexMetaData0.getCustoms();
        long long68 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(strImmutableOpenMap67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet66 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        int int67 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters70 = indexMetaData69.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters71 = indexMetaData69.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = indexMetaData69.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData69);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData69.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap75 = indexMetaData69.getAliases();
        boolean boolean77 = indexMetaData69.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray87 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray88 = settings80.getAsArray("active_allocations", strArray87);
        java.lang.String str90 = settings80.toDelimitedString('4');
        indexScopedSettings78.validate("index.number_of_shards", settings80);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings80.getAsGroups(false);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings80);
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings80);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput96 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNull(discoveryNodeFilters70);
        org.junit.Assert.assertNull(discoveryNodeFilters71);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(strImmutableOpenMap75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strMap93);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        int int66 = indexSettings57.getMaxRescoreWindow();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig67 = indexSettings57.mergePolicyConfig;
        int int68 = indexSettings57.getMaxRefreshListeners();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertNotNull(mergePolicyConfig67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1000 + "'", int68 == 1000);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getGroups("index.shared_filesystem");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings9.getAsGroups();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings9, streamOutput24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getTranslogSyncInterval();
        int int62 = indexSettings57.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of source shards [1] must be a must be a multiple of [1]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData64 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNull(mappingMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData66 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int68 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNull(mappingMetaData66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet66 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        int int67 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings68 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap69 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strImmutableOpenMap69);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        indexSettings57.gcDeletesInMillis = (short) -1;
        org.elasticsearch.common.unit.TimeValue timeValue62 = null;
        indexSettings57.refreshInterval = timeValue62;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.putNull("index.creation_date_string");
        java.lang.String str22 = builder20.get("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder20.normalizePrefix("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("", "");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap63 = indexMetaData61.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap63);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        int int66 = indexSettings57.getMaxRescoreWindow();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig67 = indexSettings57.mergePolicyConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData68.getInitialRecoveryFilters();
        boolean boolean71 = indexMetaData68.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap72 = indexMetaData68.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state73 = indexMetaData68.getState();
        indexSettings57.indexMetaData = indexMetaData68;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData68.includeFilters();
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData68.getSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings76.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertNotNull(mergePolicyConfig67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertTrue("'" + state73 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state73.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.creation_date_string");
        java.lang.String str38 = builder36.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder40.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder44.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass56 = strPredicate55.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder50.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder44.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder36.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property61 = indexScopedSettings60.getScope();
        boolean boolean63 = indexScopedSettings60.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting65 = indexScopedSettings60.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray73 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray74 = settings66.getAsArray("active_allocations", strArray73);
        java.lang.String str76 = settings66.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings66);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings66.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder80 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder80.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder84 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean89 = indexScopedSettings60.updateSettings(settings66, builder80, builder87, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings91 = settings66.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap92 = settings91.getAsGroups();
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder59.put(settings91);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder59.put("index.version.upgraded", "_na_");
        java.nio.file.Path path98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder99 = builder97.loadFromPath(path98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + property61 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property61.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardSetting65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strMap92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) (short) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.setRoutingNumShards(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder20.putCustom("100.0", custom24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder20.putCustom("", custom27);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.numberOfShards((int) (byte) 100);
        int int12 = builder8.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.upgraded", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version(100L);
        java.lang.String str7 = builder1.index();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        int int3 = indexMetaData1.getNumberOfReplicas();
        org.elasticsearch.index.Index index4 = indexMetaData1.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet8 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) 1, indexMetaData1, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(index4);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getdefaultAllowUnmappedFields();
        java.lang.String str63 = indexSettings57.getDefaultField();
        boolean boolean64 = indexSettings57.warmerEnabled;
        boolean boolean65 = indexSettings57.isDefaultAllowUnmappedFields();
        int int66 = indexSettings57.maxResultWindow;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting67);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.requireFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = indexMetaData0.readFrom(streamInput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings8.toXContent(xContentBuilder9, params10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings8.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings8.getAsSize("index.blocks.read", sizeValue16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings18.getScope();
        boolean boolean21 = indexScopedSettings18.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting23 = indexScopedSettings18.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray31 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray32 = settings24.getAsArray("active_allocations", strArray31);
        java.lang.String str34 = settings24.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings24.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean47 = indexScopedSettings18.updateSettings(settings24, builder38, builder45, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.put("index.number_of_shards", 10L);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder50.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList60);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = builder50.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray76 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray77 = settings69.getAsArray("active_allocations", strArray76);
        java.lang.String str79 = settings69.toDelimitedString('4');
        indexScopedSettings67.validate("index.number_of_shards", settings69);
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings82 = settings69.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = settings66.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings84 = settings8.filter(strPredicate81);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings84);
        java.lang.String str86 = indexSettings85.defaultField;
        indexSettings85.setEnableWarmer(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "_all" + "'", str86, "_all");
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters63 = indexMetaData62.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters64 = indexMetaData62.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData62.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData68 = indexMetaData62.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData72 = indexMetaData62.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData62.getMappings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff75 = indexMetaData61.diff(indexMetaData62);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state76 = indexMetaData61.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNull(discoveryNodeFilters63);
        org.junit.Assert.assertNull(discoveryNodeFilters64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData68);
        org.junit.Assert.assertNull(mappingMetaData72);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertNotNull(indexMetaDataDiff75);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state76.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData0.getCustoms();
        int int54 = indexMetaData0.getNumberOfShards();
        long long55 = indexMetaData0.getCreationDate();
        int int56 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property58 = indexScopedSettings57.getScope();
        boolean boolean60 = indexScopedSettings57.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params64 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings62.toXContent(xContentBuilder63, params64);
        boolean boolean66 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings62);
        indexScopedSettings57.validate("index.shared_filesystem.recover_on_any_node", settings62);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings62);
        org.elasticsearch.common.logging.ESLogger eSLogger69 = indexSettings68.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + property58 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property58.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(params64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(eSLogger69);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putCustom("state-", custom4);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.primaryTerm(10000, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.creation_date" + "'", str2, "index.creation_date");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData30.getInitialRecoveryFilters();
        boolean boolean33 = indexMetaData30.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray44 = settings36.getAsArray("active_allocations", strArray43);
        java.lang.String str46 = settings36.toDelimitedString('4');
        indexScopedSettings34.validate("index.number_of_shards", settings36);
        java.util.function.Predicate<java.lang.String> strPredicate48 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings49 = settings36.filter(strPredicate48);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings36.toXContent(xContentBuilder50, params51);
        org.elasticsearch.Version version54 = null;
        org.elasticsearch.Version version55 = settings36.getAsVersion("index.blocks.metadata", version54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings57 = settings36.filter(strPredicate56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData0.diff(indexMetaData30);
        int int60 = indexMetaData30.getNumberOfShards();
        int int61 = indexMetaData30.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters64 = indexMetaData63.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData63.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap67 = indexMetaData63.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData63.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder72.settings(settings73);
        org.elasticsearch.Version version76 = null;
        org.elasticsearch.Version version77 = settings73.getAsVersion("", version76);
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData63, settings73);
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings73);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNull(xContentBuilder52);
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(discoveryNodeFilters64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap67);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(version77);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        java.lang.Object obj36 = null;
        boolean boolean37 = settings12.equals(obj36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings0.dryRun(settings12);
        org.elasticsearch.common.settings.Settings settings40 = settings38.getByPrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        boolean boolean42 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("index.blocks.read_only");
        java.lang.String str10 = builder6.get("index.shared_filesystem");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.creation_date", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValue64);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.primaryTerm((int) ' ', 0L);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.creation_date_string");
        java.lang.String str38 = builder36.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder40.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder44.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass56 = strPredicate55.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder50.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder44.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder36.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.creation_date_string", true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("100.0", custom5);
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder7.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray37 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder14.putArray("index.creation_date", (java.util.List<java.lang.String>) strList38);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder14.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder14.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder14.put("10.0", (long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder1.settings(builder14);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder14.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.loadFromSource("index.data_path");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.number_of_replicas", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.removeAllAliases();
        java.lang.String str12 = builder6.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder16.put("index.creation_date_string", (java.lang.Class) wildcardClass22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder6.settings(builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte27 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder6.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder1.putCustom("index.creation_date", custom31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom36 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder1.putCustom("state-", custom36);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("_na_");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.putAlias(builder6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.durability;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = indexSettings57.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexScopedSettings64);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap2 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings52.refreshInterval;
// flaky:         indexSettings52.maxResultWindow = (short) -1;
        org.elasticsearch.common.unit.TimeValue timeValue56 = null; // flaky: indexSettings52.refreshInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting57 = null; // flaky: indexSettings52.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue58 = null; // flaky: indexSettings52.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertNotNull(timeValue56);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting57);
// flaky:         org.junit.Assert.assertNotNull(timeValue58);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        int int65 = indexSettings57.maxRefreshListeners;
        indexSettings57.maxRefreshListeners = '4';
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.getTranslogSyncInterval();
        boolean boolean69 = indexSettings57.warmerEnabled;
        indexSettings57.warmerEnabled = true;
        boolean boolean73 = indexSettings57.matchesIndexName("index.auto_expand_replicas");
        boolean boolean74 = indexSettings57.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1000 + "'", int65 == 1000);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards(100);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput61 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) (short) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings7);
        int int21 = builder1.numberOfReplicas();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.creation_date", custom5);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putMapping("index.", "10.0");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = indexMetaData0.getTotalNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = indexMetaData0.primaryTerm(1000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping(mappingMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder40.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = builder40.build();
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings56.getAsSize("", sizeValue61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder65.numberOfReplicas((int) (byte) 10);
        boolean boolean68 = indexMetaData0.equals((java.lang.Object) builder67);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.getIndexMetaData();
        org.elasticsearch.Version version63 = indexMetaData62.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData62.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNull(mappingMetaData65);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray37 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray38 = settings30.getAsArray("active_allocations", strArray37);
        java.lang.String str40 = settings30.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue44 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = settings30.getAsBytesSize("", byteSizeValue44);
        boolean boolean46 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings30.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder27.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder48.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.put("index.blocks.metadata", "index.blocks.read");
        java.lang.String str54 = builder52.remove("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNull(byteSizeValue45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("archived.", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.state(state4);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putMapping("index.shared_filesystem", "index.version.created_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        indexSettings57.setMaxResultWindow(32);
        indexSettings57.maxRescoreWindow = 1000;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.shadow_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder46.put("index.uuid", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder46.loadFromSource("");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder46.loadFromSource("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        int int59 = indexSettings57.getMaxResultWindow();
        boolean boolean60 = indexSettings57.isTTLPurgeDisabled();
        indexSettings57.maxRescoreWindow = (short) 10;
        int int63 = indexSettings57.maxRefreshListeners;
        indexSettings57.maxRescoreWindow = 52;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1000 + "'", int63 == 1000);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        java.lang.String str13 = settings5.get("index.version.upgraded_string", "index.creation_date");
        java.lang.String[] strArray15 = settings5.getAsArray("_all");
        java.lang.String str17 = settings5.toDelimitedString('a');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.creation_date" + "'", str13, "index.creation_date");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        boolean boolean15 = indexScopedSettings0.hasDynamicSetting("hi!");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting17 = indexScopedSettings0.get("index.creation_date");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardSetting17);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int8 = builder7.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.removeAlias("archived.");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        java.lang.String str54 = null; // flaky: indexSettings52.getNodeName();
        int int55 = 0; // flaky: indexSettings52.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder3.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder3.putCustom("active_allocations", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("", custom14);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        int int7 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.upgraded", custom3);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putMapping("index.version.created", "index.number_of_shards");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards(52);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings10.toXContent(xContentBuilder11, params12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        indexScopedSettings5.validate("index.shared_filesystem.recover_on_any_node", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        indexScopedSettings16.validate("index.number_of_shards", settings18);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.common.settings.Settings settings33 = settings18.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = indexMetaData0.getState();
        long long36 = indexMetaData0.getVersion();
        org.elasticsearch.Version version37 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertNull(xContentBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(version37);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData0.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.Version version31 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap32 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.shared_filesystem", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.data_path", true);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.loadFromSource("index.shadow_replicas");
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.loadFromStream("index.version.minimum_compatible", inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("100.0", (double) (short) 1);
        boolean boolean69 = indexMetaData0.equals((java.lang.Object) (short) 1);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput70 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.number_of_replicas", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder37.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder37.put("10.0", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder37.normalizePrefix("10.0");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder37.put("index.version.created_string", "index.version.created_string");
        org.elasticsearch.common.settings.Settings.Builder builder50 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder50.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder54.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray80 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder57.putArray("index.creation_date", (java.util.List<java.lang.String>) strList81);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder48.putArray("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#", (java.util.List<java.lang.String>) strList81);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        long long3 = indexMetaData0.getCreationDate();
        long long4 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        indexScopedSettings2.validate("index.number_of_shards", settings4);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings17 = settings4.filter(strPredicate16);
        org.elasticsearch.common.unit.TimeValue timeValue19 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue20 = settings17.getAsTime("index.number_of_replicas", timeValue19);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray29 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray30 = settings22.getAsArray("active_allocations", strArray29);
        java.lang.String[] strArray31 = settings17.getAsArray("index.blocks.metadata", strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder1.settings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strMap33 = org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap33;
        boolean boolean35 = settings17.equals((java.lang.Object) strMap33);
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap33;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap33;
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
// flaky:         org.junit.Assert.assertNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.creation_date_string");
        java.lang.String str24 = builder17.remove("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder17.put("index.creation_date", false);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder17.put("archived.", (double) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher64 = indexSettings57.parseFieldMatcher;
        indexSettings57.maxRescoreWindow = 0;
        indexSettings57.setTTLPurgeDisabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(parseFieldMatcher64);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.settings(builder15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder7.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder7.put("10.0", (long) (byte) 1);
        java.lang.String str43 = builder41.remove("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder41.put("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#", (float) 10L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "10.0" + "'", str43, "10.0");
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.numberOfShards((int) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray20 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder11.extendArray("index.shared_filesystem.recover_on_any_node", strArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.settings(settings24);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder21.put(settings24);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder21.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder27.normalizePrefix("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder9.settings(builder27);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.putMapping(mappingMetaData34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.Settings settings65 = indexSettings57.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(intSetting64);
        org.junit.Assert.assertNotNull(settings65);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getALLOW_UNMAPPED();
        indexSettings57.setTTLPurgeDisabled(false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.getFlushThresholdSize();
        org.elasticsearch.common.unit.TimeValue timeValue67 = indexSettings57.getTranslogSyncInterval();
        indexSettings57.maxResultWindow = ' ';
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNull(byteSizeValue66);
        org.junit.Assert.assertNotNull(timeValue67);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.getIndexMetaData();
        boolean boolean63 = indexSettings57.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.normalizePrefix("index.data_path");
        java.util.concurrent.TimeUnit timeUnit38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder39 = builder7.put("archived.", 10000L, timeUnit38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        java.lang.String str11 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder3.put("primary_terms", true);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.put("index.shared_filesystem.recover_on_any_node", (long) 1, byteSizeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100.0" + "'", str11, "100.0");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        long long30 = indexMetaData0.getVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData32.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData32.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = indexMetaData32.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property37 = indexScopedSettings36.getScope();
        boolean boolean39 = indexScopedSettings36.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting41 = indexScopedSettings36.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property43 = indexScopedSettings42.getScope();
        boolean boolean45 = indexScopedSettings42.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting47 = indexScopedSettings42.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray55 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray56 = settings48.getAsArray("active_allocations", strArray55);
        java.lang.String str58 = settings48.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings48);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap61 = settings48.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean71 = indexScopedSettings42.updateSettings(settings48, builder62, builder69, "index.shared_filesystem");
        java.lang.Object obj72 = null;
        boolean boolean73 = settings48.equals(obj72);
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings36.dryRun(settings48);
        org.elasticsearch.common.settings.Settings settings76 = settings74.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property79 = indexScopedSettings78.getScope();
        boolean boolean81 = indexScopedSettings78.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting83 = indexScopedSettings78.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings84 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData32, settings76, strPredicate77, indexScopedSettings78);
        org.elasticsearch.common.unit.TimeValue timeValue85 = null; // flaky: indexSettings84.syncInterval;
        int int86 = 0; // flaky: indexSettings84.getNumberOfShards();
        java.lang.String str87 = null; // flaky: indexSettings84.defaultField;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting88 = null; // flaky: indexSettings84.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str89 = null; // flaky: indexSettings84.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher90 = null; // flaky: indexSettings84.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData91 = indexMetaData0.fromXContent(xContentParser31, parseFieldMatcher90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + property37 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property37.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardSetting41);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + property43 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property43.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(wildcardSetting47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertTrue("'" + property79 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property79.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(wildcardSetting83);
// flaky:         org.junit.Assert.assertNotNull(timeValue85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "_all" + "'", str87, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting88);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher90);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        java.lang.String str11 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder3.put("primary_terms", true);
        org.elasticsearch.common.settings.Settings settings15 = builder3.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100.0" + "'", str11, "100.0");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder29.putNull("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(builder33);
        java.lang.String str36 = builder33.get("index.blocks.metadata");
        java.util.concurrent.TimeUnit timeUnit39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder40 = builder33.put("index.shadow_replicas", 0L, timeUnit39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder41.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder41.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder55.normalizePrefix("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder20.settings(builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder20.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder59.putMapping(mappingMetaData60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting60 = indexSettings57.getDEFAULT_FIELD_SETTING();
        boolean boolean61 = indexSettings57.queryStringAllowLeadingWildcard;
        indexSettings57.setEnableWarmer(true);
        indexSettings57.maxRefreshListeners = (byte) 1;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(strSetting60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting63 = indexSettings57.getDEFAULT_FIELD_SETTING();
        int int64 = indexSettings57.maxResultWindow;
        java.lang.String str65 = indexSettings57.getUUID();
        java.lang.String str66 = indexSettings57.defaultField;
        indexSettings57.setEnableWarmer(false);
        org.elasticsearch.common.unit.TimeValue timeValue69 = indexSettings57.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSetting63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_na_" + "'", str65, "_na_");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
        org.junit.Assert.assertNotNull(timeValue69);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.putAlias(builder18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff7 = indexMetaData0.readDiffFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.lang.String str65 = indexSettings57.defaultField;
        java.lang.String str66 = indexSettings57.getDefaultField();
        long long67 = indexSettings57.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        indexScopedSettings7.validate("index.number_of_shards", settings9);
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings22 = settings9.filter(strPredicate21);
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue25 = settings22.getAsTime("index.number_of_replicas", timeValue24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String[] strArray36 = settings22.getAsArray("index.blocks.metadata", strArray35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder4.extendArray("archived.", strArray36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property39 = indexScopedSettings38.getScope();
        boolean boolean41 = indexScopedSettings38.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting43 = indexScopedSettings38.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray51 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray52 = settings44.getAsArray("active_allocations", strArray51);
        java.lang.String str54 = settings44.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings44.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean67 = indexScopedSettings38.updateSettings(settings44, builder58, builder65, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder58.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder58.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings73 = builder72.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap74 = settings73.getAsGroups();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder37.put(settings73);
        org.elasticsearch.common.settings.Settings settings76 = builder37.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + property39 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property39.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardSetting43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(settings76);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData58);
        boolean boolean66 = indexMetaData58.isSameUUID("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData58);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("index.version.created");
        long long9 = builder8.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting65 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = indexSettings57.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = indexSettings57.getIndexMetaData();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData68.includeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = null;
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray82 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray83 = settings75.getAsArray("active_allocations", strArray82);
        java.lang.String str85 = settings75.toDelimitedString('4');
        indexScopedSettings73.validate("index.number_of_shards", settings75);
        java.util.function.Predicate<java.lang.String> strPredicate87 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings88 = settings75.filter(strPredicate87);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder89 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params90 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder91 = settings75.toXContent(xContentBuilder89, params90);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder92 = settings71.toXContent(xContentBuilder72, params90);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder93 = indexMetaData68.toXContent(xContentBuilder70, params90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intSetting65);
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
        org.junit.Assert.assertNotNull(timeValueSetting67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(strPredicate87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(params90);
        org.junit.Assert.assertNull(xContentBuilder91);
        org.junit.Assert.assertNull(xContentBuilder92);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("state-", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder35.put("index.shadow_replicas", (float) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.creation_date");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.putAlias(aliasMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards(10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [_na_]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder11.version((long) 100);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        boolean boolean10 = indexMetaData0.isSameUUID("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        int int62 = indexSettings57.numberOfShards;
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Settings settings65 = indexSettings57.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(settings65);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap63 = indexMetaData0.getMappings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput64 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap63);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        int int63 = indexSettings57.getNumberOfReplicas();
        boolean boolean64 = indexSettings57.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        boolean boolean63 = indexSettings57.warmerEnabled;
        boolean boolean64 = indexSettings57.getqueryStringAnalyzeWildcard();
        indexSettings57.maxRescoreWindow = (byte) -1;
        java.lang.String str67 = indexSettings57.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "_na_" + "'", str67, "_na_");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        indexSettings57.gcDeletesInMillis = (byte) 10;
        boolean boolean62 = indexSettings57.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder1.put("index.creation_date_string", (java.lang.Class) wildcardClass7);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#", (double) 35);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder8.loadFromSource("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.blocks.metadata", (double) (-1));
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
        // The following exception was thrown during execution in test generation
        try {
            long long7 = indexMetaData0.primaryTerm(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        boolean boolean55 = false; // flaky: indexSettings52.getisShadowReplicaIndex();
        boolean boolean56 = false; // flaky: indexSettings52.TTLPurgeDisabled;
        int int57 = 0; // flaky: indexSettings52.maxRefreshListeners;
        org.elasticsearch.Version version58 = null; // flaky: indexSettings52.getIndexVersionCreated();
// flaky:         indexSettings52.maxRescoreWindow = (byte) 0;
        org.apache.lucene.index.MergePolicy mergePolicy61 = null; // flaky: indexSettings52.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1000 + "'", int57 == 1000);
// flaky:         org.junit.Assert.assertNotNull(version58);
// flaky:         org.junit.Assert.assertNotNull(mergePolicy61);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        indexSettings57.warmerEnabled = true;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig63 = indexSettings57.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings57.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(mergePolicyConfig63);
        org.junit.Assert.assertNotNull(booleanSetting64);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        java.lang.String str58 = indexSettings57.nodeName;
        int int59 = indexSettings57.getNumberOfReplicas();
        boolean boolean60 = indexSettings57.queryStringAnalyzeWildcard;
        java.lang.String str61 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings57.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "_all" + "'", str61, "_all");
        org.junit.Assert.assertNotNull(settings62);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData11.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings15.getScope();
        boolean boolean18 = indexScopedSettings15.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting20 = indexScopedSettings15.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        java.lang.Object obj51 = null;
        boolean boolean52 = settings27.equals(obj51);
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings15.dryRun(settings27);
        org.elasticsearch.common.settings.Settings settings55 = settings53.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate56 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property58 = indexScopedSettings57.getScope();
        boolean boolean60 = indexScopedSettings57.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting62 = indexScopedSettings57.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings55, strPredicate56, indexScopedSettings57);
        org.elasticsearch.common.unit.TimeValue timeValue64 = null; // flaky: indexSettings63.syncInterval;
        int int65 = 0; // flaky: indexSettings63.getNumberOfShards();
        java.lang.String str66 = null; // flaky: indexSettings63.defaultField;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = null; // flaky: indexSettings63.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str68 = null; // flaky: indexSettings63.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher69 = null; // flaky: indexSettings63.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardSetting20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + property58 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property58.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(wildcardSetting62);
// flaky:         org.junit.Assert.assertNotNull(timeValue64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher69);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        indexSettings57.gcDeletesInMillis = (short) 10;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting63 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        boolean boolean64 = indexSettings57.hasCustomDataPath();
        java.util.function.Predicate<java.lang.String> strPredicate65 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig66 = indexSettings57.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(intSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strPredicate65);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig66);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getdefaultAllowUnmappedFields();
        java.lang.String str63 = indexSettings57.getDefaultField();
        boolean boolean64 = indexSettings57.warmerEnabled;
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(eSLogger65);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int8 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData0.readDiffFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings8.toXContent(xContentBuilder9, params10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings8.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings8.getAsSize("index.blocks.read", sizeValue16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings18.getScope();
        boolean boolean21 = indexScopedSettings18.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting23 = indexScopedSettings18.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray31 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray32 = settings24.getAsArray("active_allocations", strArray31);
        java.lang.String str34 = settings24.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings24.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean47 = indexScopedSettings18.updateSettings(settings24, builder38, builder45, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.put("index.number_of_shards", 10L);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder50.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList60);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = builder50.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray76 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray77 = settings69.getAsArray("active_allocations", strArray76);
        java.lang.String str79 = settings69.toDelimitedString('4');
        indexScopedSettings67.validate("index.number_of_shards", settings69);
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings82 = settings69.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = settings66.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings84 = settings8.filter(strPredicate81);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings84);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig86 = indexSettings85.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings87 = indexSettings85.scopedSettings;
        boolean boolean88 = indexSettings85.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting89 = indexSettings85.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig86);
        org.junit.Assert.assertNotNull(indexScopedSettings87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(booleanSetting89);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.number_of_replicas", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder37.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder37.put("10.0", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.priority", (double) 10000L);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.indexMetaData;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNotNull(booleanSetting64);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isIndexUsingShadowReplicas();
        indexSettings57.warmerEnabled = true;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.getFlushThresholdSize();
        boolean boolean67 = indexSettings57.warmerEnabled;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.syncInterval;
        indexSettings57.setMaxResultWindow(1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(byteSizeValue66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(timeValue68);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        int int65 = indexMetaData64.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters67 = indexMetaData64.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertNull(discoveryNodeFilters67);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        indexScopedSettings14.validate("index.number_of_shards", settings16);
        java.util.function.Predicate<java.lang.String> strPredicate28 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings29 = settings16.filter(strPredicate28);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = settings16.toXContent(xContentBuilder30, params31);
        org.elasticsearch.Version version34 = null;
        org.elasticsearch.Version version35 = settings16.getAsVersion("index.blocks.metadata", version34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings0.dryRun(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData37.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData37.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap41 = indexMetaData37.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData37.mapping("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property46 = indexScopedSettings45.getScope();
        boolean boolean48 = indexScopedSettings45.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting50 = indexScopedSettings45.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet51 = indexScopedSettings45.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean53 = indexScopedSettings45.get(booleanSetting52);
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray61 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray62 = settings54.getAsArray("active_allocations", strArray61);
        java.lang.String str64 = settings54.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder65 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder65.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate71 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass72 = strPredicate71.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder66.put("index.creation_date_string", (java.lang.Class) wildcardClass72);
        org.elasticsearch.common.settings.Settings.Builder builder74 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder74.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder75.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate80 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass81 = strPredicate80.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder75.put("index.creation_date_string", (java.lang.Class) wildcardClass81);
        boolean boolean84 = indexScopedSettings45.updateDynamicSettings(settings54, builder73, builder75, "_na_");
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData37, settings54);
        org.elasticsearch.common.settings.Settings settings86 = indexScopedSettings0.applySettings(settings54);
        boolean boolean87 = settings86.isEmpty();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(params31);
        org.junit.Assert.assertNull(xContentBuilder32);
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + property46 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property46.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(wildcardSetting50);
        org.junit.Assert.assertNotNull(wildcardSettingSet51);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strPredicate71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strPredicate80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Set<java.lang.String> strSet7 = settings6.names();
        boolean boolean8 = settings6.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        int int62 = indexSettings57.getMaxRescoreWindow();
        java.lang.String str63 = indexSettings57.defaultField;
        int int64 = indexSettings57.getMaxResultWindow();
        boolean boolean65 = indexSettings57.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.version.minimum_compatible", (int) (short) 1);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", 10L, byteSizeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings57.nodeSettings;
        int int63 = indexSettings57.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting64 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10000 + "'", int63 == 10000);
        org.junit.Assert.assertNotNull(byteSizeValueSetting64);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        boolean boolean4 = indexMetaData1.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData1.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData1.getState();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet8 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) 10, indexMetaData1, 10000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(index6);
    }
}
