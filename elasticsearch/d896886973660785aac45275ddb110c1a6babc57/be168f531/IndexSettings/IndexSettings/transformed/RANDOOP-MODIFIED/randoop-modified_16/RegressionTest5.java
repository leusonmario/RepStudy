import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings52.syncInterval;
        int int54 = 0; // flaky: indexSettings52.getNumberOfShards();
        java.lang.String str55 = null; // flaky: indexSettings52.defaultField;
        org.elasticsearch.common.unit.TimeValue timeValue56 = null; // flaky: indexSettings52.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "_all" + "'", str55, "_all");
// flaky:         org.junit.Assert.assertNotNull(timeValue56);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        boolean boolean10 = indexMetaData0.isSameUUID("index.version.upgraded");
        int int11 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str13 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        java.lang.Boolean boolean22 = settings17.getAsBoolean("index.priority", (java.lang.Boolean) true);
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        java.util.Set<java.lang.String> strSet24 = settings17.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings17.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + true + "'", boolean22, true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("100.0");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder22.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom47 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.putCustom("", custom47);
        java.lang.Class<?> wildcardClass49 = builder45.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder22.put("archived.", (java.lang.Class) wildcardClass49);
        java.lang.String[] strArray64 = new java.lang.String[] { "active_allocations", "index.shared_filesystem", "index.uuid", "", "index.uuid", "index.version.created", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index.shared_filesystem", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder50.putArray("index.priority", (java.util.List<java.lang.String>) strList65);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder50.put("index.blocks.read", 1000);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder70.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder1.settings(builder71);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("index.version.created_string", "index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.version.upgraded_string", (long) '4');
        java.nio.file.Path path54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder55 = builder50.loadFromPath(path54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int29 = indexSettings28.getMaxRescoreWindow();
        boolean boolean30 = indexSettings28.queryStringAllowLeadingWildcard;
        long long31 = indexSettings28.gcDeletesInMillis;
        java.lang.String str32 = indexSettings28.customDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = indexSettings28.scopedSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting34 = indexSettings28.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 60000L + "'", long31 == 60000L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertNotNull(byteSizeValueSetting34);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.putAlias(aliasMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray22 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray23 = settings15.getAsArray("active_allocations", strArray22);
        java.lang.String str25 = settings15.toDelimitedString('4');
        indexScopedSettings13.validate("index.number_of_shards", settings15);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder12.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder12.index("active_allocations");
        int int31 = builder30.numberOfShards();
        java.lang.Class<?> wildcardClass32 = builder30.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder6.put("index.shadow_replicas", (java.lang.Class) wildcardClass32);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder6.put("index.blocks.write", "index.blocks.write");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.putNull("archived.");
        org.elasticsearch.common.settings.Settings settings9 = builder8.build();
        boolean boolean10 = settings9.isEmpty();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings31 = settings6.getByPrefix("index.version.upgraded_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = settings33.toXContent(xContentBuilder34, params35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = settings31.toXContent(xContentBuilder32, params35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings31.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings31.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(params35);
        org.junit.Assert.assertNull(xContentBuilder36);
        org.junit.Assert.assertNull(xContentBuilder37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(booleanSetting63);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.numberOfShards((int) (byte) 100);
        java.lang.String str12 = builder11.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        java.lang.String str11 = builder3.get("");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder3.put("primary_terms", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        indexScopedSettings16.validate("index.number_of_shards", settings18);
        java.util.function.Predicate<java.lang.String> strPredicate30 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings31 = settings18.filter(strPredicate30);
        org.elasticsearch.common.unit.TimeValue timeValue33 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue34 = settings31.getAsTime("index.number_of_replicas", timeValue33);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray44 = settings36.getAsArray("active_allocations", strArray43);
        java.lang.String[] strArray45 = settings31.getAsArray("index.blocks.metadata", strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder14.putArray("index.number_of_replicas", strArray44);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder50 = builder46.put("index.shared_filesystem.recover_on_any_node", (long) 10000, byteSizeUnit49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100.0" + "'", str11, "100.0");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("100.0");
        int int13 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.Version version65 = indexSettings57.version;
        java.util.function.Predicate<java.lang.String> strPredicate66 = indexSettings57.getindexNameMatcher();
        indexSettings57.setMaxRefreshListeners((int) 'a');
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting69 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertNotNull(durabilitySetting69);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder40.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = builder40.build();
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings56.getAsSize("", sizeValue61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings56);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings63.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue65 = null;
        indexSettings63.flushThresholdSize = byteSizeValue65;
        org.elasticsearch.index.translog.Translog.Durability durability67 = indexSettings63.getTranslogDurability();
        long long68 = indexSettings63.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings69 = indexSettings63.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings69);
        boolean boolean71 = indexSettings70.queryStringLenient;
        org.elasticsearch.common.logging.ESLogger eSLogger72 = indexSettings70.logger;
        org.elasticsearch.common.logging.ESLogger eSLogger73 = indexSettings70.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertNotNull(intSetting64);
        org.junit.Assert.assertTrue("'" + durability67 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability67.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 60000L + "'", long68 == 60000L);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(eSLogger72);
        org.junit.Assert.assertNotNull(eSLogger73);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting58 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting59 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting60 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher61 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.index.translog.Translog.Durability durability62 = indexSettings57.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(durabilitySetting58);
        org.junit.Assert.assertNotNull(timeValueSetting59);
        org.junit.Assert.assertNotNull(timeValueSetting60);
        org.junit.Assert.assertNotNull(parseFieldMatcher61);
        org.junit.Assert.assertTrue("'" + durability62 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability62.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        boolean boolean64 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue65 = indexSettings57.flushThresholdSize;
        org.elasticsearch.common.settings.Settings settings66 = indexSettings57.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(byteSizeValue65);
        org.junit.Assert.assertNotNull(settings66);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.lang.String str65 = indexSettings57.defaultField;
        boolean boolean66 = indexSettings57.defaultAllowUnmappedFields;
        org.elasticsearch.common.logging.ESLogger eSLogger67 = indexSettings57.getlogger();
        boolean boolean68 = indexSettings57.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(eSLogger67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.setRoutingNumShards((int) (short) 0);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings57.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = settings60.getAsStructuredMap();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap63 = settings60.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getAsGroups();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strMap64);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        int int62 = indexSettings57.getMaxRescoreWindow();
        org.apache.lucene.index.MergePolicy mergePolicy63 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting64 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean65 = indexSettings57.TTLPurgeDisabled;
        indexSettings57.setMaxResultWindow(52);
        boolean boolean68 = indexSettings57.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertNotNull(mergePolicy63);
        org.junit.Assert.assertNotNull(byteSizeValueSetting64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        java.lang.Object obj36 = null;
        boolean boolean37 = settings12.equals(obj36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings0.dryRun(settings12);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = settings38.getAsMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        java.lang.Boolean boolean37 = settings34.getAsBoolean("_all", (java.lang.Boolean) true);
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings34);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings34, streamOutput39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + true + "'", boolean37, true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray7 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray8 = settings0.getAsArray("active_allocations", strArray7);
        java.lang.String str10 = settings0.toDelimitedString('4');
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property15 = indexScopedSettings14.getScope();
        boolean boolean17 = indexScopedSettings14.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting19 = indexScopedSettings14.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray27 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray28 = settings20.getAsArray("active_allocations", strArray27);
        java.lang.String str30 = settings20.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings20.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean43 = indexScopedSettings14.updateSettings(settings20, builder34, builder41, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.put("index.number_of_shards", 10L);
        java.lang.String[] strArray55 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder46.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList56);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder46.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = builder46.build();
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue67 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue68 = settings62.getAsSize("", sizeValue67);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings62);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting70 = indexSettings69.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability71 = null;
        indexSettings69.durability = durability71;
        java.util.function.Predicate<java.lang.String> strPredicate73 = indexSettings69.indexNameMatcher;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = indexSettings69.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters76 = indexMetaData75.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters77 = indexMetaData75.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state78 = indexMetaData75.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData75);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData81 = indexMetaData75.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData75);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state83 = indexMetaData75.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData75);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData75);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings86 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings74, indexMetaData75);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + property15 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property15.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardSetting19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + false + "'", boolean65, false);
        org.junit.Assert.assertNull(sizeValue68);
        org.junit.Assert.assertNotNull(intSetting70);
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNull(discoveryNodeFilters76);
        org.junit.Assert.assertNull(discoveryNodeFilters77);
        org.junit.Assert.assertTrue("'" + state78 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state78.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData81);
        org.junit.Assert.assertTrue("'" + state83 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state83.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting16 = indexSettings15.getINDEX_TTL_DISABLE_PURGE_SETTING();
        indexSettings15.setMaxRescoreWindow(1);
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings15.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(booleanSetting16);
        org.junit.Assert.assertNotNull(timeValue19);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap61 = indexMetaData60.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters62 = indexMetaData60.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters63 = indexMetaData60.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap61);
        org.junit.Assert.assertNull(discoveryNodeFilters62);
        org.junit.Assert.assertNull(discoveryNodeFilters63);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.syncInterval;
        org.elasticsearch.Version version60 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setMaxRescoreWindow(1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = indexSettings57.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getGroups("index.shared_filesystem", true);
        java.lang.Object obj7 = null;
        boolean boolean8 = settings0.equals(obj7);
        org.elasticsearch.common.settings.Settings settings10 = settings0.getByPrefix("primary_terms");
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = settings0.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings13 = settings0.getByPrefix("index.version.created");
        java.lang.Boolean boolean16 = settings13.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings13.getAsTime("index.shared_filesystem.recover_on_any_node", timeValue18);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNull(timeValue19);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.common.unit.TimeValue timeValue54 = null; // flaky: indexSettings52.syncInterval;
        boolean boolean55 = false; // flaky: indexSettings52.queryStringAnalyzeWildcard;
// flaky:         indexSettings52.gcDeletesInMillis = 35L;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig58 = null; // flaky: indexSettings52.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig58);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("10");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [10]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings57.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(booleanSetting63);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(strMap1);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        boolean boolean22 = settings21.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = indexMetaData0.primaryTerm((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting63 = indexSettings57.getDEFAULT_FIELD_SETTING();
        int int64 = indexSettings57.maxResultWindow;
        org.elasticsearch.Version version65 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.flushThresholdSize;
        int int67 = indexSettings57.getNumberOfReplicas();
        int int68 = indexSettings57.getMaxRescoreWindow();
        int int69 = indexSettings57.getNumberOfShards();
        org.elasticsearch.common.unit.TimeValue timeValue70 = indexSettings57.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSetting63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNull(byteSizeValue66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10000 + "'", int68 == 10000);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(timeValue70);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings8.toXContent(xContentBuilder9, params10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings8.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings8.getAsSize("index.blocks.read", sizeValue16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings18.getScope();
        boolean boolean21 = indexScopedSettings18.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting23 = indexScopedSettings18.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray31 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray32 = settings24.getAsArray("active_allocations", strArray31);
        java.lang.String str34 = settings24.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings24.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean47 = indexScopedSettings18.updateSettings(settings24, builder38, builder45, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.put("index.number_of_shards", 10L);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder50.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList60);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = builder50.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray76 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray77 = settings69.getAsArray("active_allocations", strArray76);
        java.lang.String str79 = settings69.toDelimitedString('4');
        indexScopedSettings67.validate("index.number_of_shards", settings69);
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings82 = settings69.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = settings66.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings84 = settings8.filter(strPredicate81);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting58 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig59 = indexSettings57.getmergePolicyConfig();
        org.elasticsearch.Version version60 = indexSettings57.getversion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters62 = indexMetaData61.getInitialRecoveryFilters();
        boolean boolean64 = indexMetaData61.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params82 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = settings67.toXContent(xContentBuilder81, params82);
        org.elasticsearch.Version version85 = null;
        org.elasticsearch.Version version86 = settings67.getAsVersion("index.blocks.metadata", version85);
        java.util.function.Predicate<java.lang.String> strPredicate87 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings88 = settings67.filter(strPredicate87);
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings67);
        boolean boolean90 = indexSettings89.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue91 = indexSettings89.getFlushThresholdSize();
        indexSettings57.flushThresholdSize = byteSizeValue91;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(durabilitySetting58);
        org.junit.Assert.assertNotNull(mergePolicyConfig59);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNull(discoveryNodeFilters62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(params82);
        org.junit.Assert.assertNull(xContentBuilder83);
        org.junit.Assert.assertNull(version86);
        org.junit.Assert.assertNotNull(strPredicate87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteSizeValue91);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.auto_expand_replicas");
        int int14 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.index("index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        boolean boolean66 = indexSettings57.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting67 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteSizeValueSetting67);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.shared_filesystem.recover_on_any_node", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        indexSettings57.gcDeletesInMillis = (short) 10;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting63 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        indexSettings57.warmerEnabled = false;
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings57.getTranslogSyncInterval();
        boolean boolean67 = indexSettings57.isQueryStringAnalyzeWildcard();
        indexSettings57.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(byteSizeValueSetting63);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.Version version54 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray64 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray65 = settings57.getAsArray("active_allocations", strArray64);
        java.lang.String str67 = settings57.toDelimitedString('4');
        indexScopedSettings55.validate("index.number_of_shards", settings57);
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings57);
        org.elasticsearch.common.settings.Settings settings71 = settings57.getAsSettings("active_allocations");
        boolean boolean72 = settings71.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings71);
        boolean boolean74 = indexSettings73.isIndexUsingShadowReplicas();
        boolean boolean75 = indexSettings73.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.util.function.Predicate<java.lang.String> strPredicate65 = indexSettings57.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertNotNull(strPredicate65);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings5.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray18 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray19 = settings11.getAsArray("active_allocations", strArray18);
        java.lang.String str21 = settings11.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings11.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean34 = indexScopedSettings5.updateSettings(settings11, builder25, builder32, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder25.put("index.number_of_shards", 10L);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder37.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray59 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray60 = settings52.getAsArray("active_allocations", strArray59);
        java.lang.String str62 = settings52.toDelimitedString('4');
        indexScopedSettings50.validate("index.number_of_shards", settings52);
        java.util.function.Predicate<java.lang.String> strPredicate64 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings65 = settings52.filter(strPredicate64);
        org.elasticsearch.common.unit.TimeValue timeValue67 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue68 = settings65.getAsTime("index.number_of_replicas", timeValue67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray77 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray78 = settings70.getAsArray("active_allocations", strArray77);
        java.lang.String[] strArray79 = settings65.getAsArray("index.blocks.metadata", strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder49.put(settings65);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings65.getAsGroups(false);
        java.lang.String str84 = settings65.toDelimitedString('4');
        java.lang.String str87 = settings65.get("index.version.created", "primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings65);
        boolean boolean89 = indexSettings88.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue90 = indexSettings88.getsyncInterval();
        int int91 = indexSettings88.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardSetting10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "primary_terms" + "'", str87, "primary_terms");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(timeValue90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        boolean boolean97 = indexSettings96.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((-1L));
        java.lang.String str6 = builder5.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.created_string" + "'", str6, "index.version.created_string");
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings10.toXContent(xContentBuilder11, params12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        indexScopedSettings5.validate("index.shared_filesystem.recover_on_any_node", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        indexScopedSettings16.validate("index.number_of_shards", settings18);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.common.settings.Settings settings33 = settings18.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = indexMetaData0.getState();
        long long36 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertNull(xContentBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        boolean boolean66 = indexSettings57.isQueryStringLenient();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = indexSettings57.flushThresholdSize;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(byteSizeValue67);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting65 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.getParseFieldMatcher();
        indexSettings57.setTTLPurgeDisabled(false);
        indexSettings57.TTLPurgeDisabled = true;
        int int71 = indexSettings57.getNumberOfShards();
        boolean boolean72 = indexSettings57.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intSetting65);
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property4 = indexScopedSettings3.getScope();
        boolean boolean6 = indexScopedSettings3.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting8 = indexScopedSettings3.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean32 = indexScopedSettings3.updateSettings(settings9, builder23, builder30, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder23.put("index.number_of_shards", 10L);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder35.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder35.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings51 = builder35.build();
        java.lang.Boolean boolean54 = settings51.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue56 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue57 = settings51.getAsSize("", sizeValue56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings51);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting59 = indexSettings58.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        indexSettings58.flushThresholdSize = byteSizeValue60;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings58.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings58.getlogger();
        boolean boolean64 = indexSettings58.warmerEnabled;
        boolean boolean65 = indexSettings58.getqueryStringAnalyzeWildcard();
        indexSettings58.maxRescoreWindow = (byte) -1;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = indexSettings58.scopedSettings;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings68, indexMetaData71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + property4 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property4.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + false + "'", boolean54, false);
        org.junit.Assert.assertNull(sizeValue57);
        org.junit.Assert.assertNotNull(intSetting59);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        int int61 = indexMetaData60.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom66 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder64.putCustom("index.number_of_replicas", custom66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder69.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder69.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder69.removeAllAliases();
        java.lang.String str75 = builder69.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder69.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder78 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder78.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate84 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass85 = strPredicate84.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder79.put("index.creation_date_string", (java.lang.Class) wildcardClass85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder69.settings(builder79);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state89 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte90 = state89.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder69.state(state89);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder64.state(state89);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder62.state(state89);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder93.version((long) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strPredicate84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + state89 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state89.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte90 + "' != '" + (byte) 0 + "'", byte90 == (byte) 0);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int29 = indexSettings28.getMaxRescoreWindow();
        boolean boolean30 = indexSettings28.queryStringAllowLeadingWildcard;
        java.lang.String str31 = indexSettings28.getUUID();
        indexSettings28.setMaxRefreshListeners(100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "_na_" + "'", str31, "_na_");
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.number_of_replicas", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.removeAllAliases();
        java.lang.String str12 = builder6.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder16.put("index.creation_date_string", (java.lang.Class) wildcardClass22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder6.settings(builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte27 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder6.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder1.putCustom("index.creation_date", custom31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.putCustom("state-", custom34);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.putMapping(mappingMetaData36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '4');
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.put("index.shared_filesystem", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.data_path", true);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.priority", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("", false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.settings(builder18);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = builder22.mapping("index.version.upgraded");
        long long25 = builder22.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.loadFromSource("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings6.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        java.lang.String str20 = indexScopedSettings19.nodeName();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings19.getINDEX_SETTINGS_KEY_PREDICATE();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction22 = null;
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder3.putProperties(strMap18, strPredicate21, strFunction22);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder3.put("index.number_of_shards", false);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder3.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder3.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        org.elasticsearch.common.unit.TimeValue timeValue55 = null; // flaky: indexSettings52.getTranslogSyncInterval();
        boolean boolean56 = false; // flaky: indexSettings52.getqueryStringLenient();
        long long57 = 0L; // flaky: indexSettings52.getGcDeletesInMillis();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = null; // flaky: indexSettings52.getFlushThresholdSize();
        long long59 = 0L; // flaky: indexSettings52.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
// flaky:         org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 60000L + "'", long59 == 60000L);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("10");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder20.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder31.normalizePrefix("index.creation_date_string");
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.loadFromStream("primary_terms", inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        boolean boolean63 = indexSettings57.getwarmerEnabled();
        int int64 = indexSettings57.maxRescoreWindow;
        indexSettings57.setMaxRefreshListeners((int) '4');
        boolean boolean67 = indexSettings57.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting68 = indexSettings57.getALLOW_UNMAPPED();
        java.lang.String str69 = indexSettings57.getDefaultField();
        java.lang.String str70 = indexSettings57.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(booleanSetting68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "_all" + "'", str69, "_all");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_all");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putAlias(builder3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.put("index.creation_date_string", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(builder11);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        indexSettings57.gcDeletesInMillis = (short) 10;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting63 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger64 = indexSettings57.logger;
        boolean boolean65 = indexSettings57.queryStringAllowLeadingWildcard;
        int int66 = indexSettings57.getMaxRefreshListeners();
        org.elasticsearch.index.translog.Translog.Durability durability67 = indexSettings57.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings68 = indexSettings57.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(byteSizeValueSetting63);
        org.junit.Assert.assertNotNull(eSLogger64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1000 + "'", int66 == 1000);
        org.junit.Assert.assertTrue("'" + durability67 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability67.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings68);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.Version version65 = indexSettings57.version;
        java.util.function.Predicate<java.lang.String> strPredicate66 = indexSettings57.getindexNameMatcher();
        indexSettings57.setMaxRefreshListeners((int) 'a');
        java.lang.String str69 = indexSettings57.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.Version version65 = indexSettings57.version;
        java.util.function.Predicate<java.lang.String> strPredicate66 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting67 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability68 = indexSettings57.durability;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertNotNull(intSetting67);
        org.junit.Assert.assertTrue("'" + durability68 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability68.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = indexScopedSettings60.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Setting.Property property62 = indexScopedSettings60.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder64.numberOfReplicas((int) 'a');
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings67);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder66.settings(settings67);
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings60.dryRun(settings67);
        boolean boolean82 = indexScopedSettings60.hasDynamicSetting("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + property62 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property62.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        java.lang.String str60 = indexSettings57.getDefaultField();
        boolean boolean61 = indexSettings57.isTTLPurgeDisabled();
        boolean boolean62 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "_all" + "'", str60, "_all");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder1.put("index.creation_date_string", (java.lang.Class) wildcardClass7);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.put("index.auto_expand_replicas", "index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder1.put("index.", (double) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("false");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder20 = builder16.put("index.creation_date", (long) (byte) 10, byteSizeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Set<java.lang.String> strSet7 = settings6.names();
        boolean boolean8 = settings6.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexSettings9.indexMetaData;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mapping("index.blocks.metadata");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder29.putNull("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(builder33);
        java.lang.String str36 = builder33.get("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put("index.version.minimum_compatible", false);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.version.created", (float) 0L);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.elasticsearch.Version version30 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom33 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.putCustom("index.blocks.read_only", custom33);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.shadow_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("", false);
        java.lang.String str54 = builder52.get("index.blocks.read_only");
        java.lang.String str56 = builder52.get("index.creation_date");
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder52.put("index.number_of_shards", 100);
        java.nio.file.Path path60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder61 = builder52.loadFromPath(path60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        int int8 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.loadFromSource("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters48 = indexMetaData47.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData47.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap51 = indexMetaData47.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData54 = indexMetaData47.mapping("index.blocks.read_only");
        int int55 = indexMetaData47.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        java.lang.String str57 = indexMetaData47.getIndexUUID();
        java.util.Set<java.lang.String> strSet59 = null; // flaky: indexMetaData47.activeAllocationIds(10000);
        long long60 = indexMetaData47.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters61 = indexMetaData47.requireFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property63 = indexScopedSettings62.getScope();
        boolean boolean65 = indexScopedSettings62.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params69 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = settings67.toXContent(xContentBuilder68, params69);
        boolean boolean71 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings67);
        indexScopedSettings62.validate("index.shared_filesystem.recover_on_any_node", settings67);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray82 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray83 = settings75.getAsArray("active_allocations", strArray82);
        java.lang.String str85 = settings75.toDelimitedString('4');
        indexScopedSettings73.validate("index.number_of_shards", settings75);
        org.elasticsearch.common.settings.Settings settings87 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings75);
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings62.archiveUnknownOrBrokenSettings(settings75);
        java.util.Set<java.lang.String> strSet89 = settings75.names();
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings75);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder32.put(settings75);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder32.put("index.version.created_string", "primary_terms");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNull(discoveryNodeFilters48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNull(mappingMetaData54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "_na_" + "'", str57, "_na_");
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertTrue("'" + property63 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property63.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(params69);
        org.junit.Assert.assertNull(xContentBuilder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.state(state12);
        java.lang.String str14 = builder10.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder10.creationDate((long) (short) 100);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shadow_replicas" + "'", str14, "index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        org.elasticsearch.common.unit.TimeValue timeValue17 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue18 = settings15.getAsTime("index.number_of_replicas", timeValue17);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        java.lang.String str22 = settings19.get("state-", "active_allocations");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "active_allocations" + "'", str22, "active_allocations");
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder2 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params3 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = settings1.toXContent(xContentBuilder2, params3);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings1.getGroups("index.shared_filesystem", true);
        java.lang.Object obj8 = null;
        boolean boolean9 = settings1.equals(obj8);
        org.elasticsearch.common.settings.Settings settings11 = settings1.getByPrefix("primary_terms");
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = settings1.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings14 = settings1.getByPrefix("index.version.created");
        java.lang.Boolean boolean17 = settings14.getAsBoolean("index.uuid", (java.lang.Boolean) true);
        boolean boolean18 = settings14.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(params3);
        org.junit.Assert.assertNull(xContentBuilder4);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings57.getsyncInterval();
        int int67 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
        org.junit.Assert.assertNotNull(timeValue68);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property37 = indexScopedSettings36.getScope();
        boolean boolean39 = indexScopedSettings36.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting41 = indexScopedSettings36.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray49 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray50 = settings42.getAsArray("active_allocations", strArray49);
        java.lang.String str52 = settings42.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings42.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean65 = indexScopedSettings36.updateSettings(settings42, builder56, builder63, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder56.put("index.number_of_shards", 10L);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder68.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder20.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList78);
        java.lang.String str83 = builder20.get("index.");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + property37 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property37.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardSetting41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        int int66 = builder65.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.removeAllAliases();
        java.lang.String str12 = builder6.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder16.put("index.creation_date_string", (java.lang.Class) wildcardClass22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder6.settings(builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte27 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder6.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder4.state(state26);
        byte byte30 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder1.state(state26);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 0 + "'", byte30 == (byte) 0);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setTTLPurgeDisabled(false);
        indexSettings57.setMaxResultWindow((int) (short) 10);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting67 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(intSetting67);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.version(0L);
        int int11 = builder10.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.creationDate((long) (short) 0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.getlogger();
        indexSettings57.setMaxRescoreWindow(10000);
        int int68 = indexSettings57.maxRefreshListeners;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(eSLogger65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1000 + "'", int68 == 1000);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        int int10 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long12 = builder11.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putCustom("index.creation_date", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.putCustom("index.blocks.write", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.removeAllAliases();
        int int16 = builder15.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getGroups("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData24.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData24.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap28 = indexMetaData24.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings9, indexScopedSettings23, indexMetaData24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putAlias(aliasMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        int int59 = indexSettings57.getMaxResultWindow();
        boolean boolean60 = indexSettings57.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.durability;
        indexSettings57.setTTLPurgeDisabled(true);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(intSetting64);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue8 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue9 = settings0.getAsSize("index.blocks.read", sizeValue8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap11 = settings0.getGroups("_all");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(sizeValue9);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.getlogger();
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertNotNull(eSLogger65);
        org.junit.Assert.assertNotNull(eSLogger66);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder3.mapping("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.numberOfReplicas(1000);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.putAlias(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet6 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean8 = indexScopedSettings0.get(booleanSetting7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass27 = strPredicate26.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder21.put("index.creation_date_string", (java.lang.Class) wildcardClass27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder29.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass36 = strPredicate35.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder30.put("index.creation_date_string", (java.lang.Class) wildcardClass36);
        boolean boolean39 = indexScopedSettings0.updateDynamicSettings(settings9, builder28, builder30, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.creation_date", true);
        java.lang.String str44 = builder30.get("10");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(wildcardSettingSet6);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.Version version63 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean65 = indexSettings57.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = indexSettings57.scopedSettings;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.number_of_shards");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData64 = indexMetaData0.mappingOrDefault("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNull(mappingMetaData64);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        long long5 = builder1.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder9.mapping("index.creation_date");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("active_allocations", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str65 = indexSettings57.getNodeName();
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.getlogger();
        org.elasticsearch.common.settings.Settings settings67 = indexSettings57.settings;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.syncInterval;
        org.elasticsearch.Version version69 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig70 = indexSettings57.getMergeSchedulerConfig();
        org.elasticsearch.index.translog.Translog.Durability durability71 = indexSettings57.durability;
        org.elasticsearch.common.settings.Settings settings72 = indexSettings57.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(eSLogger66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig70);
        org.junit.Assert.assertTrue("'" + durability71 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability71.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings72);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property4 = indexScopedSettings3.getScope();
        boolean boolean6 = indexScopedSettings3.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting8 = indexScopedSettings3.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean32 = indexScopedSettings3.updateSettings(settings9, builder23, builder30, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings34 = settings9.getByPrefix("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.numberOfReplicas((int) 'a');
        boolean boolean39 = settings9.equals((java.lang.Object) 'a');
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int43 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings45 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData0.mapping("index.blocks.metadata");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + property4 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property4.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNull(mappingMetaData47);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig60 = indexSettings57.getMergeSchedulerConfig();
        boolean boolean61 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings57.getDEFAULT_GC_DELETES();
        indexSettings57.TTLPurgeDisabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(byteSizeValue59);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(timeValue62);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        java.lang.String str65 = indexSettings57.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int12 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("", 0L);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property29 = indexScopedSettings28.getScope();
        boolean boolean31 = indexScopedSettings28.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting33 = indexScopedSettings28.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray41 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray42 = settings34.getAsArray("active_allocations", strArray41);
        java.lang.String str44 = settings34.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings34.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean57 = indexScopedSettings28.updateSettings(settings34, builder48, builder55, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder48.put("index.number_of_shards", 10L);
        java.lang.String[] strArray69 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder60.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList70);
        org.elasticsearch.common.settings.Settings settings73 = builder60.build();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder60.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder60.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap79 = builder60.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder26.put(strMap79);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder80.put("active_allocations", false);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder83.put("index.number_of_shards", (double) 10L);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder83.put("index.shadow_replicas", (double) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder89.putNull("index.number_of_shards=10 index.shared_filesystem.recover_on_any_node=index.data_path index.version.minimum_compatible=60000.0 ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + property29 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property29.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(wildcardSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        java.util.function.Predicate<java.lang.String> strPredicate64 = indexSettings57.indexNameMatcher;
        boolean boolean65 = indexSettings57.getqueryStringLenient();
        boolean boolean66 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(timeValueSetting67);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(100L);
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder7.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray37 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder14.putArray("index.creation_date", (java.util.List<java.lang.String>) strList38);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder14.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("state-", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#", "index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder4.settings(builder48);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.Version version14 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(version14);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("state-");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig61 = indexSettings57.mergeSchedulerConfig;
        boolean boolean62 = indexSettings57.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version63 = indexSettings57.getversion();
        boolean boolean64 = indexSettings57.queryStringAllowLeadingWildcard;
        java.lang.String str65 = indexSettings57.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings60.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings60.indexMetaData;
        boolean boolean63 = indexSettings60.isOnSharedFilesystem();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher64 = indexSettings60.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher64);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap61 = indexMetaData60.getActiveAllocationIds();
        int int62 = indexMetaData60.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        boolean boolean63 = indexSettings57.getwarmerEnabled();
        int int64 = indexSettings57.maxRescoreWindow;
        indexSettings57.setMaxRefreshListeners((int) '4');
        boolean boolean67 = indexSettings57.queryStringAllowLeadingWildcard;
        java.lang.String str68 = indexSettings57.nodeName;
        boolean boolean69 = indexSettings57.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings57.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(booleanSetting70);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.put("index.shared_filesystem.recover_on_any_node", "");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = builder48.internalMap();
        java.lang.Class class51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.put("index.blocks.read", class51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.auto_expand_replicas");
        int int14 = builder13.numberOfShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings15.getScope();
        boolean boolean18 = indexScopedSettings15.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting20 = indexScopedSettings15.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray28 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray29 = settings21.getAsArray("active_allocations", strArray28);
        java.lang.String str31 = settings21.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings21.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean44 = indexScopedSettings15.updateSettings(settings21, builder35, builder42, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder35.put("index.number_of_shards", 10L);
        java.lang.String[] strArray56 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder47.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder47.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("state-", (double) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("index.creation_date_string", 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder13.settings(builder65);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardSetting20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder38.build();
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("index.priority");
        java.lang.String str58 = settings56.toDelimitedString(' ');
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings59.syncInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings59.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(booleanSetting61);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int29 = indexSettings28.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings28.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting30);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.put("index.priority", 100L);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property50 = indexScopedSettings49.getScope();
        boolean boolean52 = indexScopedSettings49.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        indexScopedSettings49.validate("index.shared_filesystem.recover_on_any_node", settings54);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray69 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray70 = settings62.getAsArray("active_allocations", strArray69);
        java.lang.String str72 = settings62.toDelimitedString('4');
        indexScopedSettings60.validate("index.number_of_shards", settings62);
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings62);
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings62);
        boolean boolean76 = settings62.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings62.getGroups("index.number_of_replicas", true);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder48.put(settings62);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder48.put("index.", (long) 1000);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + property50 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property50.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.number_of_shards");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray17 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray18 = settings10.getAsArray("active_allocations", strArray17);
        java.lang.String str20 = settings10.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings10.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean33 = indexScopedSettings4.updateSettings(settings10, builder24, builder31, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder24.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder24.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder38.normalizePrefix("index.creation_date_string");
        java.lang.String str42 = builder40.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder40.put("index.blocks.write", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder40.normalizePrefix("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder1.settings(builder47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom50 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder1.putCustom("_all", custom50);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        java.lang.String str48 = builder32.remove("active_allocations");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.=null4index.blocks.metadata=10.04index.creation_date_string=null4index.shared_filesystem.recover_on_any_node.0=index.shared_filesystem.recover_on_any_node4index.shared_filesystem.recover_on_any_node.1=index.version.upgraded_string4index.shared_filesystem.recover_on_any_node.2=active_allocations4index.shared_filesystem.recover_on_any_node.3=archived.4", custom3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.uuid", "index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder51.putNull("index.number_of_shards=10 index.shared_filesystem.recover_on_any_node=index.data_path index.version.minimum_compatible=60000.0 ");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        boolean boolean60 = indexSettings57.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher64 = indexSettings57.parseFieldMatcher;
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue67 = null;
        indexSettings57.setTranslogFlushThresholdSize(byteSizeValue67);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(parseFieldMatcher64);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property53 = indexScopedSettings52.getScope();
        boolean boolean55 = indexScopedSettings52.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting57 = indexScopedSettings52.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray65 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray66 = settings58.getAsArray("active_allocations", strArray65);
        java.lang.String str68 = settings58.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings58);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings58.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder76 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean81 = indexScopedSettings52.updateSettings(settings58, builder72, builder79, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder72.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = builder84.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder32.put(strMap85);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder32.put("_all", 1000);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + property53 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property53.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        java.lang.String[] strArray62 = new java.lang.String[] { "active_allocations", "index.shared_filesystem", "index.uuid", "", "index.uuid", "index.version.created", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index.shared_filesystem", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder48.putArray("index.priority", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder48.put("index.blocks.read", 1000);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder68.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder69.put("index.version.upgraded", false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.maxResultWindow;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig66 = indexSettings57.getMergeSchedulerConfig();
        indexSettings57.gcDeletesInMillis = 0L;
        boolean boolean69 = indexSettings57.isShadowReplicaIndex;
        org.elasticsearch.index.translog.Translog.Durability durability70 = indexSettings57.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + durability70 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability70.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("100.0", (double) (short) 1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property14 = indexScopedSettings13.getScope();
        boolean boolean16 = indexScopedSettings13.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting18 = indexScopedSettings13.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray26 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray27 = settings19.getAsArray("active_allocations", strArray26);
        java.lang.String str29 = settings19.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings19.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean42 = indexScopedSettings13.updateSettings(settings19, builder33, builder40, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder33.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder33.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder52.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder54.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom58 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder56.putCustom("", custom58);
        java.lang.Class<?> wildcardClass60 = builder56.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder33.put("archived.", (java.lang.Class) wildcardClass60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder8.put("index.creation_date", (java.lang.Class) wildcardClass60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder3.settings(builder62);
        int int64 = builder63.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + property14 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property14.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings2.getAsGroups(false);
        java.util.Set<java.lang.String> strSet16 = settings2.names();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings2, streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder20.removeAllAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.upgraded", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) 1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings57.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertNotNull(timeValue60);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getdefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters64 = indexMetaData63.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData63.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state66 = indexMetaData63.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData69 = indexMetaData63.mapping("index.creation_date");
        org.apache.lucene.util.Version version70 = indexMetaData63.getMinimumCompatibleVersion();
        org.elasticsearch.Version version71 = indexMetaData63.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        boolean boolean73 = indexSettings57.updateIndexMetaData(indexMetaData63);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(discoveryNodeFilters64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertTrue("'" + state66 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state66.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData69);
        org.junit.Assert.assertNull(version70);
        org.junit.Assert.assertNotNull(version71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        boolean boolean10 = indexMetaData0.isSameUUID("index.version.upgraded");
        int int11 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property14 = indexScopedSettings13.getScope();
        boolean boolean16 = indexScopedSettings13.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting18 = indexScopedSettings13.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray26 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray27 = settings19.getAsArray("active_allocations", strArray26);
        java.lang.String str29 = settings19.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings19.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean42 = indexScopedSettings13.updateSettings(settings19, builder33, builder40, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder33.put("index.number_of_shards", 10L);
        java.lang.String[] strArray54 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder45.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList55);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder45.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = builder45.build();
        org.elasticsearch.common.settings.Settings settings63 = settings61.getAsSettings("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings63);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + property14 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property14.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder47.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder47.put("active_allocations", false);
        java.io.InputStream inputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.loadFromStream("", inputStream53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("archived.", (double) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.normalizePrefix("100.0");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder20.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.version.created_string", (long) (-1));
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.Version version66 = indexSettings57.version;
        indexSettings57.setwarmerEnabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertNotNull(timeValueSetting65);
        org.junit.Assert.assertNotNull(version66);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.creation_date_string");
        java.lang.String str38 = builder36.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder40.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder44.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass56 = strPredicate55.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder50.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder44.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder36.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property61 = indexScopedSettings60.getScope();
        boolean boolean63 = indexScopedSettings60.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting65 = indexScopedSettings60.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray73 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray74 = settings66.getAsArray("active_allocations", strArray73);
        java.lang.String str76 = settings66.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings66);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings66.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder80 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder80.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder84 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean89 = indexScopedSettings60.updateSettings(settings66, builder80, builder87, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings91 = settings66.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap92 = settings91.getAsGroups();
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder59.put(settings91);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder59.put("index.version.upgraded", "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder97.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + property61 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property61.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardSetting65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strMap92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = settings14.getAsMemory("index.blocks.write", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.blocks.write] with value [] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray72 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray73 = settings65.getAsArray("active_allocations", strArray72);
        java.lang.String str75 = settings65.toDelimitedString('4');
        indexScopedSettings63.validate("index.number_of_shards", settings65);
        java.util.function.Predicate<java.lang.String> strPredicate77 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings78 = settings65.filter(strPredicate77);
        org.elasticsearch.common.unit.TimeValue timeValue80 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue81 = settings78.getAsTime("index.number_of_replicas", timeValue80);
        java.lang.Boolean boolean84 = settings78.getAsBoolean("_all", (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings78);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting86 = indexSettings85.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue87 = indexSettings85.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue88 = indexSettings85.getFlushThresholdSize();
        long long89 = indexSettings85.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strPredicate77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(timeValue81);
        org.junit.Assert.assertEquals("'" + boolean84 + "' != '" + true + "'", boolean84, true);
        org.junit.Assert.assertNotNull(booleanSetting86);
        org.junit.Assert.assertNotNull(timeValue87);
        org.junit.Assert.assertNotNull(byteSizeValue88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 60000L + "'", long89 == 60000L);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray39 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray40 = settings32.getAsArray("active_allocations", strArray39);
        java.lang.String str42 = settings32.toDelimitedString('4');
        indexScopedSettings30.validate("index.number_of_shards", settings32);
        java.util.function.Predicate<java.lang.String> strPredicate44 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings45 = settings32.filter(strPredicate44);
        org.elasticsearch.common.unit.TimeValue timeValue47 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue48 = settings45.getAsTime("index.number_of_replicas", timeValue47);
        java.lang.String str50 = settings45.get("index.");
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings51.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        java.util.function.Predicate<java.lang.String> strPredicate53 = indexSettings51.indexNameMatcher;
        boolean boolean54 = indexSettings51.getqueryStringLenient();
        indexSettings51.setEnableWarmer(true);
        org.elasticsearch.Version version57 = indexSettings51.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(strPredicate53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(version57);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        boolean boolean64 = indexSettings57.isQueryStringAnalyzeWildcard();
        indexSettings57.warmerEnabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        java.lang.String str11 = builder3.get("");
        org.elasticsearch.common.settings.Settings settings12 = builder3.build();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder3.put("active_allocations", 60000L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100.0" + "'", str11, "100.0");
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        java.lang.String str11 = builder3.get("");
        org.elasticsearch.common.settings.Settings settings12 = builder3.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getAsGroups(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100.0" + "'", str11, "100.0");
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        boolean boolean63 = indexSettings57.warmerEnabled;
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        int int65 = indexSettings57.numberOfShards;
        indexSettings57.setMaxRescoreWindow((int) (byte) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        java.lang.String[] strArray17 = settings2.getAsArray("index.version.created_string");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue20 = settings2.getAsRatio("index.version.upgraded_string", "index.blocks.metadata");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.blocks.metadata]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property37 = indexScopedSettings36.getScope();
        boolean boolean39 = indexScopedSettings36.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting41 = indexScopedSettings36.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray49 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray50 = settings42.getAsArray("active_allocations", strArray49);
        java.lang.String str52 = settings42.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings42.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean65 = indexScopedSettings36.updateSettings(settings42, builder56, builder63, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder56.put("index.number_of_shards", 10L);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder68.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder20.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList78);
        java.lang.String str83 = builder81.remove("");
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder81.put("index.blocks.read_only", "index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + property37 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property37.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardSetting41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap58 = indexMetaData0.getAliases();
        org.elasticsearch.Version version59 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(version59);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue64 = indexSettings57.getFlushThresholdSize();
        org.apache.lucene.index.MergePolicy mergePolicy65 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting66 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNull(byteSizeValue64);
        org.junit.Assert.assertNotNull(mergePolicy65);
        org.junit.Assert.assertNotNull(intSetting66);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.Version version54 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int56 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getALLOW_UNMAPPED();
        indexSettings57.setTTLPurgeDisabled(false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.getFlushThresholdSize();
        indexSettings57.TTLPurgeDisabled = false;
        indexSettings57.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNull(byteSizeValue66);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        int int9 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        boolean boolean63 = indexSettings57.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.getIndexMetaData();
        boolean boolean65 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability66 = indexSettings57.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + durability66 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability66.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings57.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap61 = settings60.getAsMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap61);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.removeAlias("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = builder12.mapping("index.auto_expand_replicas");
        int int15 = builder12.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder2.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.removeAlias("hi!");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder38.build();
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("index.priority");
        java.lang.String str58 = settings56.toDelimitedString(' ');
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings59.getIndexMetaData();
        int int61 = indexMetaData60.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = builder32.build();
        java.lang.Boolean boolean51 = settings48.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue53 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue54 = settings48.getAsBytesSize("index.blocks.read", byteSizeValue53);
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("active_allocations", (double) 0.0f);
        java.lang.String str63 = builder61.remove("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder61.put("index.version.created_string", "index.shared_filesystem.recover_on_any_node");
        boolean boolean67 = settings48.equals((java.lang.Object) "index.shared_filesystem.recover_on_any_node");
        java.lang.String str69 = settings48.toDelimitedString(' ');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + boolean51 + "' != '" + false + "'", boolean51, false);
        org.junit.Assert.assertNull(byteSizeValue54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "index.number_of_replicas.0=index.uuid index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node index.number_of_replicas.3=index.number_of_shards index.number_of_replicas.4=index.version.upgraded_string index.number_of_replicas.5=index.version.minimum_compatible index.number_of_replicas.6=index.data_path index.number_of_shards=10 index.shared_filesystem.recover_on_any_node=index.data_path index.version.created=index.uuid " + "'", str69, "index.number_of_replicas.0=index.uuid index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node index.number_of_replicas.3=index.number_of_shards index.number_of_replicas.4=index.version.upgraded_string index.number_of_replicas.5=index.version.minimum_compatible index.number_of_replicas.6=index.data_path index.number_of_shards=10 index.shared_filesystem.recover_on_any_node=index.data_path index.version.created=index.uuid ");
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        int int4 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getALLOW_UNMAPPED();
        indexSettings57.maxRefreshListeners = (short) 10;
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger68 = indexSettings57.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNotNull(eSLogger66);
        org.junit.Assert.assertNotNull(booleanSetting67);
        org.junit.Assert.assertNotNull(eSLogger68);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        java.lang.String str36 = builder34.get("index.version.upgraded_string");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet38 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass39 = wildcardSettingSet38.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.shadow_replicas", (java.lang.Class) wildcardClass39);
        java.nio.file.Path path41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder42 = builder34.loadFromPath(path41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(wildcardSettingSet38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getGroups("index.shared_filesystem", true);
        java.lang.Object obj7 = null;
        boolean boolean8 = settings0.equals(obj7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = settings0.getAsMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray40 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray41 = settings33.getAsArray("active_allocations", strArray40);
        java.lang.String str43 = settings33.toDelimitedString('4');
        indexScopedSettings31.validate("index.number_of_shards", settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings33.getAsGroups(false);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap46);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        boolean boolean59 = indexSettings57.getqueryStringAllowLeadingWildcard();
        indexSettings57.setTTLPurgeDisabled(true);
        int int62 = indexSettings57.maxResultWindow;
        indexSettings57.TTLPurgeDisabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.primaryTerm(10, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) 'a');
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.creationDate((long) (byte) 0);
        int int19 = builder18.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings4.getAsGroups(true);
        boolean boolean18 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings4);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue20 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = settings4.getAsBytesSize("100.0", byteSizeValue20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings4.getGroups("_na_");
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData25.getInitialRecoveryFilters();
        boolean boolean28 = indexMetaData25.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray38 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray39 = settings31.getAsArray("active_allocations", strArray38);
        java.lang.String str41 = settings31.toDelimitedString('4');
        indexScopedSettings29.validate("index.number_of_shards", settings31);
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings44 = settings31.filter(strPredicate43);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params46 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = settings31.toXContent(xContentBuilder45, params46);
        org.elasticsearch.Version version49 = null;
        org.elasticsearch.Version version50 = settings31.getAsVersion("index.blocks.metadata", version49);
        java.util.function.Predicate<java.lang.String> strPredicate51 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings52 = settings31.filter(strPredicate51);
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings31);
        boolean boolean54 = indexSettings53.getqueryStringAllowLeadingWildcard();
        java.lang.String str55 = indexSettings53.getUUID();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue56 = indexSettings53.flushThresholdSize;
        indexSettings24.flushThresholdSize = byteSizeValue56;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = indexSettings24.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(params46);
        org.junit.Assert.assertNull(xContentBuilder47);
        org.junit.Assert.assertNull(version50);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "_na_" + "'", str55, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValue56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.data_path", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder46.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder51.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.normalizePrefix("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder54.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        boolean boolean63 = indexSettings57.getdefaultAllowUnmappedFields();
        int int64 = indexSettings57.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.removeAllAliases();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate(0L);
        int int7 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = settings9.toXContent(xContentBuilder10, params11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings9.getGroups("index.shared_filesystem", true);
        java.lang.Object obj16 = null;
        boolean boolean17 = settings9.equals(obj16);
        org.elasticsearch.common.settings.Settings settings19 = settings9.getByPrefix("primary_terms");
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = settings9.getAsStructuredMap();
        java.lang.String str23 = settings9.get("index.shared_filesystem", "");
        java.util.Set<java.lang.String> strSet24 = settings9.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.putActiveAllocationIds(1000, strSet24);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNull(xContentBuilder12);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("100.0", (double) (short) 1);
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.loadFromStream("state-", inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder3.put("", false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property15 = indexScopedSettings14.getScope();
        boolean boolean17 = indexScopedSettings14.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting19 = indexScopedSettings14.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray27 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray28 = settings20.getAsArray("active_allocations", strArray27);
        java.lang.String str30 = settings20.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings20.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean43 = indexScopedSettings14.updateSettings(settings20, builder34, builder41, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.put("index.number_of_shards", 10L);
        java.lang.String[] strArray55 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder46.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList56);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder46.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings62 = builder46.build();
        java.lang.Boolean boolean65 = settings62.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue67 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue68 = settings62.getAsSize("", sizeValue67);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings62);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting70 = indexSettings69.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version71 = indexSettings69.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = indexSettings69.getScopedSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = indexScopedSettings72.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Setting.Property property74 = indexScopedSettings72.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder76.numberOfReplicas((int) 'a');
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray86 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray87 = settings79.getAsArray("active_allocations", strArray86);
        java.lang.String str89 = settings79.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings90 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder78.settings(settings79);
        org.elasticsearch.common.settings.Settings settings92 = indexScopedSettings72.dryRun(settings79);
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder3.put(settings79);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + property15 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property15.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardSetting19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + false + "'", boolean65, false);
        org.junit.Assert.assertNull(sizeValue68);
        org.junit.Assert.assertNotNull(intSetting70);
        org.junit.Assert.assertNotNull(version71);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + property74 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property74.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings57.nodeSettings;
        boolean boolean63 = indexSettings57.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder35.put("", true);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder35.put("false", "_all");
        java.lang.String str45 = builder43.get("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "true" + "'", str45, "true");
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        java.lang.String str55 = null; // flaky: indexSettings52.customDataPath();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = null; // flaky: indexSettings52.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNull(str55);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings56);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        java.lang.String[] strArray62 = new java.lang.String[] { "active_allocations", "index.shared_filesystem", "index.uuid", "", "index.uuid", "index.version.created", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index.shared_filesystem", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder48.putArray("index.priority", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder48.put("index.blocks.read", 1000);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder68.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.putNull("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder68.put("index.blocks.metadata", (double) (short) 0);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap32 = indexMetaData0.getAliases();
        org.elasticsearch.Version version33 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(version33);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet14 = indexScopedSettings8.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean16 = indexScopedSettings8.get(booleanSetting15);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray24 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray25 = settings17.getAsArray("active_allocations", strArray24);
        java.lang.String str27 = settings17.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass35 = strPredicate34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder29.put("index.creation_date_string", (java.lang.Class) wildcardClass35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass44 = strPredicate43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.put("index.creation_date_string", (java.lang.Class) wildcardClass44);
        boolean boolean47 = indexScopedSettings8.updateDynamicSettings(settings17, builder36, builder38, "_na_");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        java.lang.String str49 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(wildcardSettingSet14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "_na_" + "'", str49, "_na_");
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.blocks.read", "");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("state-", (long) (-1));
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.number_of_shards", (int) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder58.loadFromSource("index.version.created_string");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings31 = settings6.getByPrefix("index.version.upgraded_string");
        java.lang.Object obj32 = null;
        boolean boolean33 = settings6.equals(obj32);
        java.util.Set<java.lang.String> strSet34 = settings6.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = null;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = settings36.toXContent(xContentBuilder37, params38);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = settings6.toXContent(xContentBuilder35, params38);
        java.lang.String str42 = settings6.get("index.blocks.write");
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = settings6.getAsStructuredMap();
        boolean boolean44 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings6);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(params38);
        org.junit.Assert.assertNull(xContentBuilder39);
        org.junit.Assert.assertNull(xContentBuilder40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder26.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.normalizePrefix("index.creation_date_string");
        java.lang.String str44 = builder42.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder42.put("index.blocks.write", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder42.normalizePrefix("index.shared_filesystem");
        boolean boolean50 = indexMetaData0.equals((java.lang.Object) builder49);
        int int51 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '4');
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder5.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.put("index.shared_filesystem", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.data_path", true);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.priority", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("", false);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.settings(builder18);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = builder22.mapping("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder22.putMapping("index.creation_date", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(mappingMetaData24);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.loadFromSource("index.number_of_shards");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder46.put("index.number_of_replicas", false);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder46.put("archived.", (long) (byte) 100);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap61 = indexMetaData60.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters62 = indexMetaData60.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap61);
        org.junit.Assert.assertNull(discoveryNodeFilters62);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        boolean boolean4 = indexMetaData1.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings20 = settings7.filter(strPredicate19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings7.toXContent(xContentBuilder21, params22);
        org.elasticsearch.Version version25 = null;
        org.elasticsearch.Version version26 = settings7.getAsVersion("index.blocks.metadata", version25);
        java.util.function.Predicate<java.lang.String> strPredicate27 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings28 = settings7.filter(strPredicate27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings7);
        long long30 = indexMetaData1.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData31.getInitialRecoveryFilters();
        boolean boolean34 = indexMetaData31.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray44 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray45 = settings37.getAsArray("active_allocations", strArray44);
        java.lang.String str47 = settings37.toDelimitedString('4');
        indexScopedSettings35.validate("index.number_of_shards", settings37);
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings50 = settings37.filter(strPredicate49);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params52 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = settings37.toXContent(xContentBuilder51, params52);
        org.elasticsearch.Version version55 = null;
        org.elasticsearch.Version version56 = settings37.getAsVersion("index.blocks.metadata", version55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings58 = settings37.filter(strPredicate57);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings37);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff60 = indexMetaData1.diff(indexMetaData31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet62 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) '#', indexMetaData31, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNotNull(strPredicate27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(params52);
        org.junit.Assert.assertNull(xContentBuilder53);
        org.junit.Assert.assertNull(version56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexMetaDataDiff60);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        java.lang.String str63 = indexSettings57.getNodeName();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = indexSettings57.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(indexScopedSettings64);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long8 = indexMetaData0.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getALLOW_UNMAPPED();
        long long67 = indexSettings57.gcDeletesInMillis;
        org.apache.lucene.index.MergePolicy mergePolicy68 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = indexSettings57.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertNotNull(mergePolicy68);
        org.junit.Assert.assertNull(byteSizeValue69);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) 1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.putNull("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.blocks.metadata", 1);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put("index.=null4index.blocks.metadata=10.04index.creation_date_string=null4index.shared_filesystem.recover_on_any_node.0=index.shared_filesystem.recover_on_any_node4index.shared_filesystem.recover_on_any_node.1=index.version.upgraded_string4index.shared_filesystem.recover_on_any_node.2=active_allocations4index.shared_filesystem.recover_on_any_node.3=archived.4", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.put("index.shared_filesystem.recover_on_any_node", "");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray59 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray60 = settings52.getAsArray("active_allocations", strArray59);
        java.lang.String str62 = settings52.toDelimitedString('4');
        indexScopedSettings50.validate("index.number_of_shards", settings52);
        java.util.function.Predicate<java.lang.String> strPredicate64 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings65 = settings52.filter(strPredicate64);
        org.elasticsearch.common.unit.TimeValue timeValue67 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue68 = settings65.getAsTime("index.number_of_replicas", timeValue67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray77 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray78 = settings70.getAsArray("active_allocations", strArray77);
        java.lang.String[] strArray79 = settings65.getAsArray("index.blocks.metadata", strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder32.extendArray("", strArray78);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray90 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray91 = settings83.getAsArray("active_allocations", strArray90);
        java.lang.String str93 = settings83.toDelimitedString('4');
        indexScopedSettings81.validate("index.number_of_shards", settings83);
        java.util.Map<java.lang.String, java.lang.String> strMap95 = settings83.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder80.put(strMap95);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(indexScopedSettings81);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(strMap95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder38.build();
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("index.priority");
        java.lang.String str58 = settings56.toDelimitedString(' ');
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting60 = indexSettings59.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig61 = indexSettings59.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(booleanSetting60);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig61);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        java.lang.String str2 = builder1.index();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfReplicas(0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.creation_date" + "'", str2, "index.creation_date");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings64 = indexSettings57.settings;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting65 = indexSettings57.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strSetting65);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        java.lang.String str60 = indexSettings57.getDefaultField();
        indexSettings57.maxRefreshListeners = (short) 10;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig63 = indexSettings57.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "_all" + "'", str60, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig63);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.Version version54 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap55 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters56 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap57 = indexMetaData0.getAliases();
        org.apache.lucene.util.Version version58 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser59 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexMetaData0.fromXContent(xContentParser59, parseFieldMatcher60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNull(discoveryNodeFilters56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNull(version58);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings57.getSettings();
        indexSettings57.setMaxResultWindow((int) (byte) 100);
        boolean boolean65 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.parseFieldMatcher;
        boolean boolean67 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig65 = indexSettings57.mergeSchedulerConfig;
        boolean boolean66 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.index.translog.Translog.Durability durability67 = indexSettings57.getdurability();
        boolean boolean68 = indexSettings57.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting69 = indexSettings57.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + durability67 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability67.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(booleanSetting69);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long5 = builder4.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("true");
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings15.getScope();
        boolean boolean18 = indexScopedSettings15.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings20.toXContent(xContentBuilder21, params22);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings20);
        indexScopedSettings15.validate("index.shared_filesystem.recover_on_any_node", settings20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray35 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray36 = settings28.getAsArray("active_allocations", strArray35);
        java.lang.String str38 = settings28.toDelimitedString('4');
        indexScopedSettings26.validate("index.number_of_shards", settings28);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings28);
        java.util.Set<java.lang.String> strSet42 = settings28.names();
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray56 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray57 = settings49.getAsArray("active_allocations", strArray56);
        java.lang.String str59 = settings49.toDelimitedString('4');
        indexScopedSettings47.validate("index.number_of_shards", settings49);
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        org.elasticsearch.common.unit.TimeValue timeValue63 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue64 = settings61.getAsTime("hi!", timeValue63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder46.settings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings61);
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings61);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings67);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        int int65 = indexSettings57.maxRefreshListeners;
        org.apache.lucene.index.MergePolicy mergePolicy66 = indexSettings57.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1000 + "'", int65 == 1000);
        org.junit.Assert.assertNotNull(mergePolicy66);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.syncInterval;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig60 = indexSettings57.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(mergePolicyConfig60);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue8 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue9 = settings0.getAsSize("index.blocks.read", sizeValue8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.number_of_shards", 10L);
        java.lang.String[] strArray51 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder42.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList52);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder42.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = builder42.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray68 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray69 = settings61.getAsArray("active_allocations", strArray68);
        java.lang.String str71 = settings61.toDelimitedString('4');
        indexScopedSettings59.validate("index.number_of_shards", settings61);
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings74 = settings61.filter(strPredicate73);
        org.elasticsearch.common.settings.Settings settings75 = settings58.filter(strPredicate73);
        org.elasticsearch.common.settings.Settings settings76 = settings0.filter(strPredicate73);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings0.getAsGroups();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(sizeValue9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings5.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray18 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray19 = settings11.getAsArray("active_allocations", strArray18);
        java.lang.String str21 = settings11.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings11.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean34 = indexScopedSettings5.updateSettings(settings11, builder25, builder32, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder25.put("index.number_of_shards", 10L);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder37.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray59 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray60 = settings52.getAsArray("active_allocations", strArray59);
        java.lang.String str62 = settings52.toDelimitedString('4');
        indexScopedSettings50.validate("index.number_of_shards", settings52);
        java.util.function.Predicate<java.lang.String> strPredicate64 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings65 = settings52.filter(strPredicate64);
        org.elasticsearch.common.unit.TimeValue timeValue67 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue68 = settings65.getAsTime("index.number_of_replicas", timeValue67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray77 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray78 = settings70.getAsArray("active_allocations", strArray77);
        java.lang.String[] strArray79 = settings65.getAsArray("index.blocks.metadata", strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder49.put(settings65);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings65.getAsGroups(false);
        java.lang.String str84 = settings65.toDelimitedString('4');
        java.lang.String str87 = settings65.get("index.version.created", "primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings65);
        boolean boolean89 = indexSettings88.isQueryStringLenient();
        boolean boolean90 = indexSettings88.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardSetting10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "primary_terms" + "'", str87, "primary_terms");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting66 = indexSettings57.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(strSetting66);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings35 = builder34.build();
        java.util.Set<java.lang.String> strSet36 = settings35.names();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings35.getGroups("state-", false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings35.getAsGroups(false);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.common.settings.SettingsException; message: Failed to get setting group for [] setting prefix and setting [] because of a missing '.'");
        } catch (org.elasticsearch.common.settings.SettingsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getGroups("index.shared_filesystem", true);
        java.lang.Object obj7 = null;
        boolean boolean8 = settings0.equals(obj7);
        org.elasticsearch.common.settings.Settings settings10 = settings0.getByPrefix("primary_terms");
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = settings0.getAsStructuredMap();
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.common.unit.SizeValue sizeValue14 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue15 = settings0.getAsSize("primary_terms", sizeValue14);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(sizeValue15);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        java.lang.Boolean boolean7 = settings4.getAsBoolean("10.0", (java.lang.Boolean) false);
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings4);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder38.build();
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("index.priority");
        java.lang.String str58 = settings56.toDelimitedString(' ');
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings59.getIndexMetaData();
        org.elasticsearch.index.Index index61 = indexMetaData60.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNull(index61);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.shared_filesystem.recover_on_any_node", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putCustom("index.blocks.read", custom10);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = builder8.primaryTerm((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.number_of_replicas", "index.number_of_replicas");
        java.lang.String str39 = builder37.remove("index.number_of_replicas");
        java.nio.file.Path path40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder41 = builder37.loadFromPath(path40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "index.number_of_replicas" + "'", str39, "index.number_of_replicas");
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData62.mappingOrDefault("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap66 = indexMetaData62.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap66);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        long long3 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.normalizePrefix("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        org.elasticsearch.common.unit.TimeValue timeValue55 = null; // flaky: indexSettings52.getTranslogSyncInterval();
        boolean boolean56 = false; // flaky: indexSettings52.getqueryStringLenient();
        java.lang.String str57 = null; // flaky: indexSettings52.getNodeName();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = null; // flaky: indexSettings52.flushThresholdSize;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
// flaky:         org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue58);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Set<java.lang.String> strSet1 = settings0.names();
        boolean boolean2 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("state-", (double) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder47.put("index.version.created_string", "index.number_of_shards");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder47.internalMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        java.lang.Object obj36 = null;
        boolean boolean37 = settings12.equals(obj36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings0.dryRun(settings12);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet39 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(wildcardSettingSet39);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = settings2.toXContent(xContentBuilder16, params17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings2.getGroups("index.shared_filesystem.recover_on_any_node");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = settings2.getAsMemory("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#] with value [] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(params17);
        org.junit.Assert.assertNull(xContentBuilder18);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings47 = builder32.build();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings47.getGroups("index.version.created_string", true);
        java.lang.String[] strArray52 = settings47.getAsArray("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strArray52);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str65 = indexSettings57.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.getParseFieldMatcher();
        boolean boolean67 = indexSettings57.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        int int2 = builder1.numberOfShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str65 = indexSettings57.getNodeName();
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.getlogger();
        org.elasticsearch.common.settings.Settings settings67 = indexSettings57.settings;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.syncInterval;
        org.elasticsearch.Version version69 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig70 = indexSettings57.getMergeSchedulerConfig();
        org.elasticsearch.index.translog.Translog.Durability durability71 = indexSettings57.durability;
        org.elasticsearch.common.unit.TimeValue timeValue72 = indexSettings57.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(eSLogger66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig70);
        org.junit.Assert.assertTrue("'" + durability71 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability71.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue72);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property4 = indexScopedSettings3.getScope();
        boolean boolean6 = indexScopedSettings3.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting8 = indexScopedSettings3.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean32 = indexScopedSettings3.updateSettings(settings9, builder23, builder30, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder23.put("index.number_of_shards", 10L);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder35.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder35.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings51 = builder35.build();
        java.lang.Boolean boolean54 = settings51.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue56 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue57 = settings51.getAsSize("", sizeValue56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters60 = indexMetaData59.getInitialRecoveryFilters();
        int int61 = indexMetaData59.getNumberOfReplicas();
        org.elasticsearch.index.Index index62 = indexMetaData59.getMergeSourceIndex();
        int int63 = indexMetaData59.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff64 = indexMetaData1.diff(indexMetaData59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet67 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(1, indexMetaData1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (0) must be greater than the shard id: 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + property4 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property4.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + false + "'", boolean54, false);
        org.junit.Assert.assertNull(sizeValue57);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNull(discoveryNodeFilters60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(index62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff64);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        boolean boolean63 = indexSettings57.getwarmerEnabled();
        int int64 = indexSettings57.maxRescoreWindow;
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = org.elasticsearch.index.IndexSettings.QUERY_STRING_ANALYZE_WILDCARD;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean68 = indexSettings57.getValue(booleanSetting67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[NodeScope]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting67);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(version10);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder19.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put(settings21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.shared_filesystem", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.removeAlias("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.state(state13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder8.state(state13);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = builder15.mapping("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(mappingMetaData17);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int29 = indexSettings28.getMaxRescoreWindow();
        boolean boolean30 = indexSettings28.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings28.getsyncInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = indexSettings28.scopedSettings;
        org.elasticsearch.index.translog.Translog.Durability durability33 = indexSettings28.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting34 = indexSettings28.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + durability33 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability33.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(intSetting34);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        int int3 = indexMetaData1.getNumberOfReplicas();
        org.elasticsearch.index.Index index4 = indexMetaData1.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet8 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(0, indexMetaData1, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(index4);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.metadata");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.metadata]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isIndexUsingShadowReplicas();
        indexSettings57.warmerEnabled = true;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.getFlushThresholdSize();
        int int67 = indexSettings57.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(byteSizeValue66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder35.put("index.auto_expand_replicas", false);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.version.upgraded", (long) 35);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.putMapping(mappingMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting58 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting59 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting60 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig61 = indexSettings57.mergePolicyConfig;
        indexSettings57.setMaxResultWindow((int) (byte) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(durabilitySetting58);
        org.junit.Assert.assertNotNull(timeValueSetting59);
        org.junit.Assert.assertNotNull(timeValueSetting60);
        org.junit.Assert.assertNotNull(mergePolicyConfig61);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.setRoutingNumShards(10);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        java.lang.String[] strArray62 = new java.lang.String[] { "active_allocations", "index.shared_filesystem", "index.uuid", "", "index.uuid", "index.version.created", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index.shared_filesystem", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder48.putArray("index.priority", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder48.put("index.blocks.read", 1000);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder68.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.putNull("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("true", (long) (short) 10);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getTranslogSyncInterval();
        org.elasticsearch.Version version62 = indexSettings57.getversion();
        boolean boolean63 = indexSettings57.isWarmerEnabled();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig64 = indexSettings57.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig64);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.putNull("index.shared_filesystem.recover_on_any_node");
        java.lang.String str50 = builder48.remove("_all");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.putNull("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder52.putNull("");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings2.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings2.getGroups("10.0", true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getGroups("index.shared_filesystem", true);
        java.lang.Object obj7 = null;
        boolean boolean8 = settings0.equals(obj7);
        org.elasticsearch.common.settings.Settings settings10 = settings0.getByPrefix("primary_terms");
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = settings0.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings13 = settings0.getAsSettings("archived.");
        org.elasticsearch.common.unit.SizeValue sizeValue15 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue16 = settings0.getAsSize("", sizeValue15);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNull(sizeValue16);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.creationDate(0L);
        int int8 = builder3.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (-1));
        java.lang.String str4 = builder1.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("10.0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.version((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.primaryTerm(10000, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap64 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap65 = indexMetaData0.getCustoms();
        long long66 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap64);
        org.junit.Assert.assertNotNull(strImmutableOpenMap65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting63 = indexSettings57.getDEFAULT_FIELD_SETTING();
        int int64 = indexSettings57.maxResultWindow;
        java.lang.String str65 = indexSettings57.getUUID();
        java.lang.String str66 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSetting63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_na_" + "'", str65, "_na_");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
        org.junit.Assert.assertNotNull(booleanSetting67);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        java.lang.String str63 = indexSettings57.getNodeName();
        boolean boolean64 = indexSettings57.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.index("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.version((long) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.putMapping(mappingMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        int int65 = indexSettings57.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap16 = settings2.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings2.getGroups("index.shared_filesystem", true);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = indexScopedSettings46.getDEFAULT_SCOPED_SETTINGS();
        java.util.function.Predicate<java.lang.String> strPredicate54 = indexScopedSettings53.getINDEX_SETTINGS_KEY_PREDICATE();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(indexScopedSettings53);
        org.junit.Assert.assertNotNull(strPredicate54);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("archived.", (double) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.normalizePrefix("100.0");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte2 = state1.id();
        byte byte3 = state1.id();
        byte byte4 = state1.id();
        byte byte5 = state1.id();
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 1 + "'", byte4 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 1 + "'", byte5 == (byte) 1);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        indexSettings57.gcDeletesInMillis = (short) 10;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting63 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(intSetting63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.lang.String str65 = indexSettings57.defaultField;
        java.lang.String str66 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int68 = indexSettings57.getNumberOfShards();
        java.lang.String str69 = indexSettings57.nodeName;
        java.lang.String str70 = indexSettings57.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
        org.junit.Assert.assertNotNull(booleanSetting67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "_all" + "'", str70, "_all");
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.indexMetaData;
        int int63 = indexMetaData62.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap64 = indexMetaData62.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap64);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        boolean boolean29 = indexSettings28.getqueryStringAllowLeadingWildcard();
        java.lang.String str30 = indexSettings28.getUUID();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue31 = indexSettings28.flushThresholdSize;
        org.elasticsearch.common.settings.Settings settings32 = indexSettings28.nodeSettings;
        org.apache.lucene.index.MergePolicy mergePolicy33 = indexSettings28.getMergePolicy();
        boolean boolean34 = indexSettings28.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "_na_" + "'", str30, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValue31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(mergePolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings57.getSettings();
        indexSettings57.setMaxResultWindow((int) (byte) 100);
        java.lang.String str65 = indexSettings57.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(booleanSetting66);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        int int7 = builder1.numberOfShards();
        java.lang.String str8 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.setRoutingNumShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.setRoutingNumShards(0);
        java.lang.String str13 = builder12.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        long long60 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.syncInterval;
        indexSettings57.setMaxRefreshListeners((int) (short) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 60000L + "'", long60 == 60000L);
        org.junit.Assert.assertNotNull(timeValue61);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings35 = builder34.build();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder34.put("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#", (long) (-1));
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.version((long) '#');
        java.lang.Class<?> wildcardClass12 = builder11.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder47.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder47.put("", 32);
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder53.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder57.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray83 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder60.putArray("index.creation_date", (java.util.List<java.lang.String>) strList84);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder51.putArray("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#", (java.util.List<java.lang.String>) strList84);
        org.elasticsearch.common.settings.Settings settings88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder89 = builder87.put(settings88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("", 0L);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property29 = indexScopedSettings28.getScope();
        boolean boolean31 = indexScopedSettings28.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting33 = indexScopedSettings28.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray41 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray42 = settings34.getAsArray("active_allocations", strArray41);
        java.lang.String str44 = settings34.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings34.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean57 = indexScopedSettings28.updateSettings(settings34, builder48, builder55, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder48.put("index.number_of_shards", 10L);
        java.lang.String[] strArray69 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder60.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList70);
        org.elasticsearch.common.settings.Settings settings73 = builder60.build();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder60.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder60.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap79 = builder60.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder26.put(strMap79);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder80.put("active_allocations", false);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder83.put("index.number_of_shards", (double) 10L);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder83.put("index.shadow_replicas", (double) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder83.put("index.blocks.read_only", (long) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + property29 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property29.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(wildcardSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.lang.String str65 = indexSettings57.defaultField;
        java.lang.String str66 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int68 = indexSettings57.getNumberOfShards();
        boolean boolean69 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
        org.junit.Assert.assertNotNull(booleanSetting67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.common.logging.ESLogger eSLogger60 = indexSettings57.logger;
        boolean boolean61 = indexSettings57.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertNotNull(eSLogger60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property4 = indexScopedSettings3.getScope();
        boolean boolean6 = indexScopedSettings3.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting8 = indexScopedSettings3.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean32 = indexScopedSettings3.updateSettings(settings9, builder23, builder30, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings34 = settings9.getByPrefix("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.numberOfReplicas((int) 'a');
        boolean boolean39 = settings9.equals((java.lang.Object) 'a');
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int43 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.index("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + property4 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property4.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        indexScopedSettings2.validate("index.number_of_shards", settings4);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings16.getAsTime("hi!", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.creationDate((long) (short) 1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("index.shadow_replicas");
        java.lang.String str11 = builder10.index();
        int int12 = builder10.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.shadow_replicas" + "'", str11, "index.shadow_replicas");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.index.translog.Translog.Durability durability58 = indexSettings57.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + durability58 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability58.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.loadFromSource("index.version.created");
        java.lang.String str22 = builder20.get("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("state-", (double) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.loadFromSource("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder50.loadFromSource("index.shared_filesystem");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData0.getAliases();
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("10");
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getDEFAULT_GC_DELETES();
        indexSettings57.setTTLPurgeDisabled(false);
        boolean boolean64 = indexSettings57.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property14 = indexScopedSettings13.getScope();
        boolean boolean16 = indexScopedSettings13.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting18 = indexScopedSettings13.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray26 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray27 = settings19.getAsArray("active_allocations", strArray26);
        java.lang.String str29 = settings19.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings19.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean42 = indexScopedSettings13.updateSettings(settings19, builder33, builder40, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder33.put("index.number_of_shards", 10L);
        java.lang.String[] strArray54 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder45.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList55);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder45.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = builder45.build();
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue66 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue67 = settings61.getAsSize("", sizeValue66);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings61);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting69 = indexSettings68.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue70 = null;
        indexSettings68.flushThresholdSize = byteSizeValue70;
        org.elasticsearch.index.translog.Translog.Durability durability72 = indexSettings68.getTranslogDurability();
        boolean boolean73 = indexSettings68.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting74 = indexSettings68.getDEFAULT_FIELD_SETTING();
        int int75 = indexSettings68.maxResultWindow;
        org.elasticsearch.Version version76 = indexSettings68.getversion();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder3.put("archived.", version76);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder77.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + property14 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property14.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + false + "'", boolean64, false);
        org.junit.Assert.assertNull(sizeValue67);
        org.junit.Assert.assertNotNull(intSetting69);
        org.junit.Assert.assertTrue("'" + durability72 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability72.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSetting74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getGroups("index.shared_filesystem", true);
        java.lang.Object obj7 = null;
        boolean boolean8 = settings0.equals(obj7);
        org.elasticsearch.common.settings.Settings settings10 = settings0.getByPrefix("primary_terms");
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = settings0.getAsStructuredMap();
        org.elasticsearch.common.settings.Settings settings13 = settings0.getAsSettings("archived.");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = settings0.getAsMemory("index.auto_expand_replicas", "index.=null4index.blocks.metadata=10.04index.creation_date_string=null4index.shared_filesystem.recover_on_any_node.0=index.shared_filesystem.recover_on_any_node4index.shared_filesystem.recover_on_any_node.1=index.version.upgraded_string4index.shared_filesystem.recover_on_any_node.2=active_allocations4index.shared_filesystem.recover_on_any_node.3=archived.4");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.auto_expand_replicas] with value [index.=null4index.blocks.metadata=10.04index.creation_date_string=null4index.shared_filesystem.recover_on_any_node.0=index.shared_filesystem.recover_on_any_node4index.shared_filesystem.recover_on_any_node.1=index.version.upgraded_string4index.shared_filesystem.recover_on_any_node.2=active_allocations4index.shared_filesystem.recover_on_any_node.3=archived.4] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(settings13);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings8.toXContent(xContentBuilder9, params10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings8.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings8.getAsSize("index.blocks.read", sizeValue16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings18.getScope();
        boolean boolean21 = indexScopedSettings18.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting23 = indexScopedSettings18.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray31 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray32 = settings24.getAsArray("active_allocations", strArray31);
        java.lang.String str34 = settings24.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings24.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean47 = indexScopedSettings18.updateSettings(settings24, builder38, builder45, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.put("index.number_of_shards", 10L);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder50.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList60);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = builder50.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray76 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray77 = settings69.getAsArray("active_allocations", strArray76);
        java.lang.String str79 = settings69.toDelimitedString('4');
        indexScopedSettings67.validate("index.number_of_shards", settings69);
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings82 = settings69.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = settings66.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings84 = settings8.filter(strPredicate81);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings84);
        java.lang.String str86 = indexSettings85.defaultField;
        int int87 = indexSettings85.numberOfShards;
        boolean boolean88 = indexSettings85.isIndexUsingShadowReplicas();
        indexSettings85.setEnableWarmer(false);
        org.elasticsearch.common.logging.ESLogger eSLogger91 = indexSettings85.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "_all" + "'", str86, "_all");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(eSLogger91);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putCustom("_all", custom7);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder1.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings57.getSettings();
        indexSettings57.setMaxResultWindow((int) (byte) 100);
        java.lang.String str65 = indexSettings57.getNodeName();
        int int66 = indexSettings57.numberOfShards;
        boolean boolean67 = indexSettings57.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig63 = indexSettings57.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting64 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(mergePolicyConfig63);
        org.junit.Assert.assertNotNull(byteSizeValueSetting64);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData64.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData64.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        int int72 = indexMetaData64.getRoutingNumShards();
        boolean boolean73 = indexSettings57.updateIndexMetaData(indexMetaData64);
        long long74 = indexSettings57.gcDeletesInMillis;
        boolean boolean75 = indexSettings57.getdefaultAllowUnmappedFields();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig76 = indexSettings57.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 60000L + "'", long74 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig76);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.version.minimum_compatible", (int) (short) 1);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder14.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        java.lang.String str33 = builder27.remove("100.0");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder27.put("index.version.upgraded_string", (double) 100);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("100.0", 10000);
        java.lang.String str41 = builder39.get("index.blocks.metadata");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property44 = indexScopedSettings43.getScope();
        boolean boolean46 = indexScopedSettings43.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting48 = indexScopedSettings43.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray56 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray57 = settings49.getAsArray("active_allocations", strArray56);
        java.lang.String str59 = settings49.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap62 = settings49.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder63 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder67 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder67.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean72 = indexScopedSettings43.updateSettings(settings49, builder63, builder70, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder63.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder63.loadFromSource("index.number_of_replicas");
        java.lang.String str79 = builder77.get("index.version.upgraded_string");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet81 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass82 = wildcardSettingSet81.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder77.put("index.shadow_replicas", (java.lang.Class) wildcardClass82);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder39.put("", (java.lang.Class) wildcardClass82);
        java.util.concurrent.TimeUnit timeUnit87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder88 = builder84.put("", 10000L, timeUnit87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + property44 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property44.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(wildcardSetting48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(wildcardSettingSet81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig61 = indexSettings57.mergeSchedulerConfig;
        boolean boolean62 = indexSettings57.isDefaultAllowUnmappedFields();
        int int63 = indexSettings57.getMaxResultWindow();
        java.lang.String str64 = indexSettings57.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10000 + "'", int63 == 10000);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        int int65 = indexSettings57.maxRefreshListeners;
        boolean boolean66 = indexSettings57.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1000 + "'", int65 == 1000);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property32 = indexScopedSettings31.getScope();
        boolean boolean34 = indexScopedSettings31.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = settings36.toXContent(xContentBuilder37, params38);
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings36);
        indexScopedSettings31.validate("index.shared_filesystem.recover_on_any_node", settings36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray51 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray52 = settings44.getAsArray("active_allocations", strArray51);
        java.lang.String str54 = settings44.toDelimitedString('4');
        indexScopedSettings42.validate("index.number_of_shards", settings44);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings44);
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings44);
        boolean boolean58 = settings44.isEmpty();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray67 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray68 = settings60.getAsArray("active_allocations", strArray67);
        java.lang.String[] strArray69 = settings44.getAsArray("index.shared_filesystem", strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder20.extendArray("hi!", strArray69);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder20.put("index.creation_date_string", 10);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("index.number_of_shards", (float) (byte) 1);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + property32 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property32.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(params38);
        org.junit.Assert.assertNull(xContentBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet14 = indexScopedSettings8.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean16 = indexScopedSettings8.get(booleanSetting15);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray24 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray25 = settings17.getAsArray("active_allocations", strArray24);
        java.lang.String str27 = settings17.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass35 = strPredicate34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder29.put("index.creation_date_string", (java.lang.Class) wildcardClass35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass44 = strPredicate43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.put("index.creation_date_string", (java.lang.Class) wildcardClass44);
        boolean boolean47 = indexScopedSettings8.updateDynamicSettings(settings17, builder36, builder38, "_na_");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property52 = indexScopedSettings51.getScope();
        boolean boolean54 = indexScopedSettings51.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting56 = indexScopedSettings51.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray64 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray65 = settings57.getAsArray("active_allocations", strArray64);
        java.lang.String str67 = settings57.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings57);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap70 = settings57.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder75 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder75.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean80 = indexScopedSettings51.updateSettings(settings57, builder71, builder78, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder71.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap84 = builder83.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder83.put("index.version.minimum_compatible", (double) 60000L);
        org.elasticsearch.common.settings.Settings settings88 = builder87.build();
        java.lang.String str90 = settings88.toDelimitedString(' ');
        org.elasticsearch.index.IndexSettings indexSettings91 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings88);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(wildcardSettingSet14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + property52 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property52.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(wildcardSetting56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "index.number_of_shards=10 index.shared_filesystem.recover_on_any_node=index.data_path index.version.minimum_compatible=60000.0 " + "'", str90, "index.number_of_shards=10 index.shared_filesystem.recover_on_any_node=index.data_path index.version.minimum_compatible=60000.0 ");
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards(32);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        java.lang.String str65 = indexSettings57.customDataPath();
        boolean boolean66 = indexSettings57.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder7.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder7.put("10.0", (long) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder7.putNull("index.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Set<java.lang.String> strSet7 = settings6.names();
        boolean boolean8 = settings6.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData10.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray22 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray23 = settings15.getAsArray("active_allocations", strArray22);
        java.lang.String str25 = settings15.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        boolean boolean28 = settings27.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings27);
        org.apache.lucene.util.Version version30 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property32 = indexScopedSettings31.getScope();
        boolean boolean34 = indexScopedSettings31.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting36 = indexScopedSettings31.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray44 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray45 = settings37.getAsArray("active_allocations", strArray44);
        java.lang.String str47 = settings37.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings37.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder51 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean60 = indexScopedSettings31.updateSettings(settings37, builder51, builder58, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings62 = settings37.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray64 = null;
        java.lang.String[] strArray66 = settings37.getAsArray("", strArray64, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings37);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting68 = indexSettings67.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting69 = indexSettings67.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting70 = indexSettings67.getINDEX_GC_DELETES_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher71 = indexSettings67.parseFieldMatcher;
        org.elasticsearch.index.translog.Translog.Durability durability72 = indexSettings67.getTranslogDurability();
        indexSettings9.setdurability(durability72);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + property32 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property32.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardSetting36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNull(strArray66);
        org.junit.Assert.assertNotNull(durabilitySetting68);
        org.junit.Assert.assertNotNull(timeValueSetting69);
        org.junit.Assert.assertNotNull(timeValueSetting70);
        org.junit.Assert.assertNotNull(parseFieldMatcher71);
        org.junit.Assert.assertTrue("'" + durability72 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability72.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("archived.", (double) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters35 = indexMetaData34.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData34.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = indexMetaData34.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property39 = indexScopedSettings38.getScope();
        boolean boolean41 = indexScopedSettings38.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting43 = indexScopedSettings38.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property45 = indexScopedSettings44.getScope();
        boolean boolean47 = indexScopedSettings44.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting49 = indexScopedSettings44.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray57 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray58 = settings50.getAsArray("active_allocations", strArray57);
        java.lang.String str60 = settings50.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap63 = settings50.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder64 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder64.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder68 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean73 = indexScopedSettings44.updateSettings(settings50, builder64, builder71, "index.shared_filesystem");
        java.lang.Object obj74 = null;
        boolean boolean75 = settings50.equals(obj74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings38.dryRun(settings50);
        org.elasticsearch.common.settings.Settings settings78 = settings76.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate79 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property81 = indexScopedSettings80.getScope();
        boolean boolean83 = indexScopedSettings80.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting85 = indexScopedSettings80.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings86 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData34, settings78, strPredicate79, indexScopedSettings80);
        boolean boolean87 = false; // flaky: indexSettings86.defaultAllowUnmappedFields;
        org.elasticsearch.Version version88 = null; // flaky: indexSettings86.version;
        org.elasticsearch.common.settings.Settings.Builder builder89 = null; // flaky: builder32.put("index.blocks.read_only", version88);
        java.lang.String str91 = builder32.get("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNull(discoveryNodeFilters35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + property39 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property39.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardSetting43);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + property45 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property45.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardSetting49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertTrue("'" + property81 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property81.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(wildcardSetting85);
// flaky:         org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
// flaky:         org.junit.Assert.assertNotNull(version88);
// flaky:         org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        int int5 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting60 = indexSettings57.getDEFAULT_FIELD_SETTING();
        indexSettings57.setEnableWarmer(false);
        indexSettings57.maxResultWindow = ' ';
        long long65 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings57.getRefreshInterval();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting67 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(strSetting60);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 60000L + "'", long65 == 60000L);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertNotNull(durabilitySetting67);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting60 = indexSettings57.getDEFAULT_FIELD_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy61 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(strSetting60);
        org.junit.Assert.assertNotNull(mergePolicy61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        org.elasticsearch.Version version5 = null;
        org.elasticsearch.Version version6 = settings2.getAsVersion("", version5);
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings2);
        java.lang.String[] strArray9 = null;
        java.lang.String[] strArray10 = settings2.getAsArray("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", strArray9);
        java.lang.String str13 = settings2.get("index.", "index.blocks.metadata");
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.blocks.metadata" + "'", str13, "index.blocks.metadata");
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        boolean boolean9 = indexMetaData6.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray17 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray18 = settings10.getAsArray("active_allocations", strArray17);
        java.lang.String str20 = settings10.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings10.getAsGroups(true);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue27 = settings10.getAsBytesSize("100.0", byteSizeValue26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings10.getGroups("_na_");
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData31.getInitialRecoveryFilters();
        boolean boolean34 = indexMetaData31.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray44 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray45 = settings37.getAsArray("active_allocations", strArray44);
        java.lang.String str47 = settings37.toDelimitedString('4');
        indexScopedSettings35.validate("index.number_of_shards", settings37);
        java.util.function.Predicate<java.lang.String> strPredicate49 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings50 = settings37.filter(strPredicate49);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params52 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = settings37.toXContent(xContentBuilder51, params52);
        org.elasticsearch.Version version55 = null;
        org.elasticsearch.Version version56 = settings37.getAsVersion("index.blocks.metadata", version55);
        java.util.function.Predicate<java.lang.String> strPredicate57 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings58 = settings37.filter(strPredicate57);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings37);
        boolean boolean60 = indexSettings59.getqueryStringAllowLeadingWildcard();
        java.lang.String str61 = indexSettings59.getUUID();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue62 = indexSettings59.flushThresholdSize;
        indexSettings30.flushThresholdSize = byteSizeValue62;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue64 = settings4.getAsBytesSize("index.number_of_replicas", byteSizeValue62);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(byteSizeValue27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(params52);
        org.junit.Assert.assertNull(xContentBuilder53);
        org.junit.Assert.assertNull(version56);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "_na_" + "'", str61, "_na_");
        org.junit.Assert.assertNotNull(byteSizeValue62);
        org.junit.Assert.assertNotNull(byteSizeValue64);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings10.toXContent(xContentBuilder11, params12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        indexScopedSettings5.validate("index.shared_filesystem.recover_on_any_node", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        indexScopedSettings16.validate("index.number_of_shards", settings18);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.common.settings.Settings settings33 = settings18.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings18);
        java.lang.String str35 = indexSettings34.getUUID();
        indexSettings34.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property39 = indexScopedSettings38.getScope();
        boolean boolean41 = indexScopedSettings38.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params45 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = settings43.toXContent(xContentBuilder44, params45);
        boolean boolean47 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings43);
        indexScopedSettings38.validate("index.shared_filesystem.recover_on_any_node", settings43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray58 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray59 = settings51.getAsArray("active_allocations", strArray58);
        java.lang.String str61 = settings51.toDelimitedString('4');
        indexScopedSettings49.validate("index.number_of_shards", settings51);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings51);
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings51);
        indexSettings34.settings = settings51;
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings51.getGroups("hi!");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertNull(xContentBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "_na_" + "'", str35, "_na_");
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + property39 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property39.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(params45);
        org.junit.Assert.assertNull(xContentBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap67);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        java.lang.String str63 = indexSettings57.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(timeValue64);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.auto_expand_replicas", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings settings51 = builder32.build();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        boolean boolean63 = indexSettings57.warmerEnabled;
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        boolean boolean65 = indexSettings57.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = indexSettings57.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(indexMetaData66);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.putMapping("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings33 = settings8.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings33.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.settings(settings33);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.primaryTerm((int) (byte) -1, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int15 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData0.mapping("index.blocks.metadata");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(mappingMetaData17);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData31.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property34 = indexScopedSettings33.getScope();
        boolean boolean36 = indexScopedSettings33.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting38 = indexScopedSettings33.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray46 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray47 = settings39.getAsArray("active_allocations", strArray46);
        java.lang.String str49 = settings39.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings39.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder57 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean62 = indexScopedSettings33.updateSettings(settings39, builder53, builder60, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder53.put("index.number_of_shards", 10L);
        java.lang.String[] strArray74 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder65.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList75);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder65.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings81 = builder65.build();
        java.lang.Boolean boolean84 = settings81.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue86 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue87 = settings81.getAsSize("", sizeValue86);
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings81);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting89 = indexSettings88.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue90 = null;
        indexSettings88.flushThresholdSize = byteSizeValue90;
        org.elasticsearch.index.translog.Translog.Durability durability92 = indexSettings88.getTranslogDurability();
        java.lang.String str93 = indexSettings88.defaultField;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings94 = indexSettings88.scopedSettings;
        org.elasticsearch.common.settings.Setting.Property property95 = indexScopedSettings94.getScope();
        boolean boolean96 = indexMetaData0.equals((java.lang.Object) indexScopedSettings94);
        java.util.Set<java.lang.String> strSet98 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + property34 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property34.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(wildcardSetting38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertEquals("'" + boolean84 + "' != '" + false + "'", boolean84, false);
        org.junit.Assert.assertNull(sizeValue87);
        org.junit.Assert.assertNotNull(intSetting89);
        org.junit.Assert.assertTrue("'" + durability92 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability92.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "_all" + "'", str93, "_all");
        org.junit.Assert.assertNotNull(indexScopedSettings94);
        org.junit.Assert.assertTrue("'" + property95 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property95.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(strSet98);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        int int59 = indexSettings57.getMaxResultWindow();
        boolean boolean60 = indexSettings57.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting62 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        long long63 = indexSettings57.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(durabilitySetting62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 60000L + "'", long63 == 60000L);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        boolean boolean10 = indexMetaData0.isSameUUID("index.version.upgraded");
        int int11 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.created_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.settings(builder34);
        java.lang.String str36 = builder35.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.removeAlias("");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "index.version.created_string" + "'", str36, "index.version.created_string");
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.put("index.version.minimum_compatible", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.number_of_shards", "index.blocks.read");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long9 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData21.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData21.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap25 = indexMetaData21.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData21.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.settings(settings31);
        org.elasticsearch.Version version34 = null;
        org.elasticsearch.Version version35 = settings31.getAsVersion("", version34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings31);
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings31);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(version35);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.number_of_replicas", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder37.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder37.put("10.0", "index.shadow_replicas");
        java.lang.String str44 = builder42.get("_all");
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder42.putNull("index.blocks.metadata");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        boolean boolean55 = false; // flaky: indexSettings52.getisShadowReplicaIndex();
        boolean boolean56 = false; // flaky: indexSettings52.TTLPurgeDisabled;
        int int57 = 0; // flaky: indexSettings52.maxRefreshListeners;
        org.elasticsearch.Version version58 = null; // flaky: indexSettings52.getIndexVersionCreated();
// flaky:         indexSettings52.maxRescoreWindow = (byte) 0;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = null; // flaky: indexSettings52.indexMetaData;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1000 + "'", int57 == 1000);
// flaky:         org.junit.Assert.assertNotNull(version58);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData61);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray31 = settings23.getAsArray("active_allocations", strArray30);
        java.lang.String str33 = settings23.toDelimitedString('4');
        indexScopedSettings21.validate("index.number_of_shards", settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings23.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray45 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray46 = settings38.getAsArray("active_allocations", strArray45);
        java.lang.String str48 = settings38.toDelimitedString('4');
        indexScopedSettings36.validate("index.number_of_shards", settings38);
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings51 = settings38.filter(strPredicate50);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction52 = null;
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder20.putProperties(strMap35, strPredicate50, strFunction52);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder53.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder53.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte4 = state3.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.state(state3);
        long long6 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.putCustom("index.version.upgraded", custom8);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder1.mapping("index.creation_date_string");
        java.lang.String str12 = builder1.index();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.shadow_replicas" + "'", str12, "index.shadow_replicas");
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        indexScopedSettings11.validate("index.number_of_shards", settings13);
        java.util.function.Predicate<java.lang.String> strPredicate25 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings26 = settings13.filter(strPredicate25);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params28 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = settings13.toXContent(xContentBuilder27, params28);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = settings9.toXContent(xContentBuilder10, params28);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder8, params28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strPredicate25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(params28);
        org.junit.Assert.assertNull(xContentBuilder29);
        org.junit.Assert.assertNull(xContentBuilder30);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        java.lang.String str63 = indexSettings57.getUUID();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting64 = indexSettings57.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        boolean boolean67 = indexSettings57.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_na_" + "'", str63, "_na_");
        org.junit.Assert.assertNotNull(strSetting64);
        org.junit.Assert.assertNotNull(eSLogger65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property53 = indexScopedSettings52.getScope();
        boolean boolean55 = indexScopedSettings52.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting57 = indexScopedSettings52.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray65 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray66 = settings58.getAsArray("active_allocations", strArray65);
        java.lang.String str68 = settings58.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings58);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings58.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder76 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean81 = indexScopedSettings52.updateSettings(settings58, builder72, builder79, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder72.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = builder84.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder32.put(strMap85);
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder32.normalizePrefix("index.number_of_shards");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder90 = builder32.put(objDictionary89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + property53 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property53.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int29 = indexSettings28.getMaxRescoreWindow();
        indexSettings28.TTLPurgeDisabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int8 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getAsGroups(true);
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings9);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue25 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = settings9.getAsBytesSize("100.0", byteSizeValue25);
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(byteSizeValue26);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("10", (int) (short) -1);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        long long61 = indexMetaData60.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters62 = indexMetaData60.excludeFilters();
        int int63 = indexMetaData60.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap64 = indexMetaData60.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamInput streamInput65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData60.readDiffFrom(streamInput65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap64);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        boolean boolean60 = indexSettings57.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting61 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        indexSettings57.setTTLPurgeDisabled(false);
        boolean boolean64 = indexSettings57.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(intSetting61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.upgraded", custom3);
        org.elasticsearch.common.settings.Settings.Builder builder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.settings(builder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate6 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass7 = strPredicate6.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder1.put("index.creation_date_string", (java.lang.Class) wildcardClass7);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.put("index.auto_expand_replicas", "index.blocks.read");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property14 = indexScopedSettings13.getScope();
        boolean boolean16 = indexScopedSettings13.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting18 = indexScopedSettings13.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray26 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray27 = settings19.getAsArray("active_allocations", strArray26);
        java.lang.String str29 = settings19.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings19.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean42 = indexScopedSettings13.updateSettings(settings19, builder33, builder40, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder33.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder33.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder52.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder54.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom58 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder56.putCustom("", custom58);
        java.lang.Class<?> wildcardClass60 = builder56.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder33.put("archived.", (java.lang.Class) wildcardClass60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder1.put("index.number_of_replicas", (java.lang.Class) wildcardClass60);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + property14 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property14.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting60 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig62 = indexSettings57.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(intSetting60);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(mergePolicyConfig62);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("100.0", (int) (short) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray61 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray62 = settings54.getAsArray("active_allocations", strArray61);
        java.lang.String str64 = settings54.toDelimitedString('4');
        indexScopedSettings52.validate("index.number_of_shards", settings54);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = settings54.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder48.put(strMap66);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder48.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder48.putNull("index.number_of_replicas=0aindex.number_of_shards=1aindex.version.created=5000099a");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        int int5 = builder3.numberOfShards();
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.creation_date_string");
        java.lang.String str38 = builder36.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder40.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder44.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass56 = strPredicate55.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder50.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder44.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder36.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property61 = indexScopedSettings60.getScope();
        boolean boolean63 = indexScopedSettings60.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting65 = indexScopedSettings60.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray73 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray74 = settings66.getAsArray("active_allocations", strArray73);
        java.lang.String str76 = settings66.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings66);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings66.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder80 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder80.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder84 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean89 = indexScopedSettings60.updateSettings(settings66, builder80, builder87, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings91 = settings66.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap92 = settings91.getAsGroups();
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder59.put(settings91);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder94.put("index.version.upgraded_string", true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + property61 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property61.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardSetting65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strMap92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray7 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray8 = settings0.getAsArray("active_allocations", strArray7);
        java.lang.String str10 = settings0.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings0.getAsGroups(true);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue17 = settings0.getAsBytesSize("100.0", byteSizeValue16);
        org.elasticsearch.common.settings.Settings settings19 = settings0.getByPrefix("archived.");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(byteSizeValue17);
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting64 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getRefreshInterval();
        indexSettings57.setMaxRescoreWindow(0);
        org.elasticsearch.common.settings.Settings settings68 = indexSettings57.getNodeSettings();
        int int69 = indexSettings57.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings57.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(durabilitySetting64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(booleanSetting70);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setTTLPurgeDisabled(false);
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(eSLogger65);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("100.0", (double) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder8.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder12.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder12.put("index.shared_filesystem", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.data_path", true);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder19.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder7.put(strMap20);
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder24 = builder7.loadFromStream("index.auto_expand_replicas", inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.version.upgraded");
        java.lang.String str38 = builder36.remove("index.");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder40.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = builder40.build();
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings56.getAsSize("", sizeValue61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings63.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting65 = indexSettings63.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings63.syncInterval;
        int int67 = indexSettings63.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(booleanSetting65);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.common.settings.Settings settings63 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNotNull(settings63);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        java.lang.String str20 = indexSettings19.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings19.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean22 = indexSettings19.getqueryStringLenient();
        boolean boolean23 = indexSettings19.getdefaultAllowUnmappedFields();
        long long24 = indexSettings19.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = indexSettings57.scopedSettings;
        boolean boolean66 = indexSettings57.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.hasCustomDataPath();
        long long54 = 0L; // flaky: indexSettings52.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 60000L + "'", long54 == 60000L);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder40.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = builder40.build();
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings56.getAsSize("", sizeValue61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings56);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings63.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue65 = null;
        indexSettings63.flushThresholdSize = byteSizeValue65;
        org.elasticsearch.index.translog.Translog.Durability durability67 = indexSettings63.getTranslogDurability();
        long long68 = indexSettings63.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings69 = indexSettings63.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings69);
        boolean boolean71 = indexSettings70.queryStringLenient;
        org.elasticsearch.common.logging.ESLogger eSLogger72 = indexSettings70.logger;
        boolean boolean73 = indexSettings70.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertNotNull(intSetting64);
        org.junit.Assert.assertTrue("'" + durability67 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability67.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 60000L + "'", long68 == 60000L);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(eSLogger72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        java.lang.Boolean boolean37 = settings34.getAsBoolean("_all", (java.lang.Boolean) true);
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings34);
        java.lang.String str40 = settings34.toDelimitedString('#');
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + true + "'", boolean37, true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#" + "'", str40, "index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#");
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap65 = indexMetaData61.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap65);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int4 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder40.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = builder40.build();
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings56.getAsSize("", sizeValue61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings56);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings63.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version65 = indexSettings63.getversion();
        boolean boolean66 = indexSettings63.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting67 = indexSettings63.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.elasticsearch.common.settings.Settings settings68 = indexSettings63.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings68);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertNotNull(intSetting64);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(intSetting67);
        org.junit.Assert.assertNotNull(settings68);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        int int3 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        java.lang.String str5 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        indexSettings57.setMaxResultWindow(52);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.put("index.shared_filesystem.recover_on_any_node", "");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder32.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        java.lang.String str60 = indexSettings57.getDefaultField();
        boolean boolean61 = indexSettings57.isTTLPurgeDisabled();
        indexSettings57.warmerEnabled = true;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "_all" + "'", str60, "_all");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(indexMetaData64);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params14 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = settings12.toXContent(xContentBuilder13, params14);
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings12);
        indexScopedSettings7.validate("index.shared_filesystem.recover_on_any_node", settings12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray27 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray28 = settings20.getAsArray("active_allocations", strArray27);
        java.lang.String str30 = settings20.toDelimitedString('4');
        indexScopedSettings18.validate("index.number_of_shards", settings20);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.common.settings.Settings settings35 = settings20.getByPrefix("index.priority");
        java.lang.String[] strArray37 = null;
        java.lang.String[] strArray39 = settings35.getAsArray("archived.", strArray37, (java.lang.Boolean) false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings35.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings35.getGroups("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", true);
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings35);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(params14);
        org.junit.Assert.assertNull(xContentBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        org.elasticsearch.Version version12 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder17.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.put("index.data_path", (int) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder3.mapping("index.uuid");
        int int8 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("10.0");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property4 = indexScopedSettings3.getScope();
        boolean boolean6 = indexScopedSettings3.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting8 = indexScopedSettings3.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean32 = indexScopedSettings3.updateSettings(settings9, builder23, builder30, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder23.put("index.number_of_shards", 10L);
        java.lang.String[] strArray44 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder35.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList45);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder35.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings51 = builder35.build();
        java.lang.Boolean boolean54 = settings51.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue56 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue57 = settings51.getAsSize("", sizeValue56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings51);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings58.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings58.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings58.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.apache.lucene.util.Version version63 = indexMetaData61.getMinimumCompatibleVersion();
        int int64 = indexMetaData61.getRoutingFactor();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet66 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) -1, indexMetaData61, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + property4 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property4.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + false + "'", boolean54, false);
        org.junit.Assert.assertNull(sizeValue57);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNull(version63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.loadFromSource("");
        org.elasticsearch.common.settings.Settings settings12 = builder9.build();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.put("index.", (double) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray72 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray73 = settings65.getAsArray("active_allocations", strArray72);
        java.lang.String str75 = settings65.toDelimitedString('4');
        indexScopedSettings63.validate("index.number_of_shards", settings65);
        java.util.function.Predicate<java.lang.String> strPredicate77 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings78 = settings65.filter(strPredicate77);
        org.elasticsearch.common.unit.TimeValue timeValue80 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue81 = settings78.getAsTime("index.number_of_replicas", timeValue80);
        java.lang.Boolean boolean84 = settings78.getAsBoolean("_all", (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings78);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting86 = indexSettings85.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue87 = indexSettings85.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig88 = indexSettings85.mergePolicyConfig;
        int int89 = indexSettings85.getMaxResultWindow();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting90 = indexSettings85.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strPredicate77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(timeValue81);
        org.junit.Assert.assertEquals("'" + boolean84 + "' != '" + true + "'", boolean84, true);
        org.junit.Assert.assertNotNull(booleanSetting86);
        org.junit.Assert.assertNotNull(timeValue87);
        org.junit.Assert.assertNotNull(mergePolicyConfig88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10000 + "'", int89 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting90);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        indexSettings57.setwarmerEnabled(false);
        java.lang.String str63 = indexSettings57.getDefaultField();
        boolean boolean64 = indexSettings57.isWarmerEnabled();
        org.elasticsearch.Version version65 = indexSettings57.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(version65);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData66 = indexMetaData64.mapping("primary_terms");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData68 = indexMetaData64.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params71 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = settings69.toXContent(xContentBuilder70, params71);
        boolean boolean73 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings69);
        boolean boolean74 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings69);
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings69);
        indexSettings75.maxRefreshListeners = 52;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(mappingMetaData66);
        org.junit.Assert.assertNull(mappingMetaData68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(params71);
        org.junit.Assert.assertNull(xContentBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        indexSettings57.TTLPurgeDisabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder3.put("_na_", "index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder3.normalizePrefix("index.");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.version.minimum_compatible", 0.0f);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        int int59 = indexSettings57.getMaxResultWindow();
        boolean boolean60 = indexSettings57.isTTLPurgeDisabled();
        java.lang.String str61 = indexSettings57.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        long long59 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings57.syncInterval;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig61 = indexSettings57.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 60000L + "'", long59 == 60000L);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(mergePolicyConfig61);
        org.junit.Assert.assertNotNull(booleanSetting62);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        boolean boolean61 = indexSettings57.isDefaultAllowUnmappedFields();
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings57.getDEFAULT_GC_DELETES();
        indexSettings57.setEnableWarmer(false);
        int int65 = indexSettings57.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.upgraded", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [_na_]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int55 = builder54.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder54.creationDate((long) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder57.numberOfReplicas((int) ' ');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        org.elasticsearch.Version version64 = indexSettings57.getversion();
        int int65 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting66 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(version64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertNotNull(intSetting66);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        boolean boolean8 = indexMetaData0.isSameUUID("index.version.created");
        long long10 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting65 = indexSettings57.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings57.refreshInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(booleanSetting65);
        org.junit.Assert.assertNotNull(timeValue66);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        java.lang.String str54 = null; // flaky: indexSettings52.getNodeName();
        boolean boolean55 = false; // flaky: indexSettings52.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting56 = null; // flaky: indexSettings52.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(durabilitySetting56);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        boolean boolean61 = indexSettings57.isShadowReplicaIndex;
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        boolean boolean63 = indexSettings57.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher64 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig65 = indexSettings57.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(parseFieldMatcher64);
        org.junit.Assert.assertNotNull(mergePolicyConfig65);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putCustom("index.creation_date", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.numberOfReplicas(32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder11.index("primary_terms");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.put("index.shared_filesystem.recover_on_any_node", "");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = builder48.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.put("index.number_of_replicas", (long) 10);
        java.util.concurrent.TimeUnit timeUnit55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder56 = builder52.put("10.0", (long) '#', timeUnit55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings57.getNodeSettings();
        java.util.Set<java.lang.String> strSet62 = settings61.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings settings34 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.number_of_replicas", "index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder37.normalizePrefix("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder37.put("10.0", "index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder37.normalizePrefix("10.0");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder47 = builder45.put(strMap46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting63 = indexSettings57.getDEFAULT_FIELD_SETTING();
        int int64 = indexSettings57.maxResultWindow;
        org.elasticsearch.Version version65 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.flushThresholdSize;
        int int67 = indexSettings57.getNumberOfReplicas();
        int int68 = indexSettings57.getMaxRescoreWindow();
        java.util.function.Predicate<java.lang.String> strPredicate69 = indexSettings57.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSetting63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNull(byteSizeValue66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10000 + "'", int68 == 10000);
        org.junit.Assert.assertNotNull(strPredicate69);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        long long6 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.index("active_allocations");
        long long9 = builder3.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings60.getTranslogDurability();
        indexSettings60.setEnableWarmer(true);
        org.elasticsearch.common.logging.ESLogger eSLogger64 = indexSettings60.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(eSLogger64);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long33 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.Version version61 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters63 = indexMetaData62.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters64 = indexMetaData62.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData62.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property68 = indexScopedSettings67.getScope();
        boolean boolean70 = indexScopedSettings67.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params74 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = settings72.toXContent(xContentBuilder73, params74);
        boolean boolean76 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings72);
        indexScopedSettings67.validate("index.shared_filesystem.recover_on_any_node", settings72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray87 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray88 = settings80.getAsArray("active_allocations", strArray87);
        java.lang.String str90 = settings80.toDelimitedString('4');
        indexScopedSettings78.validate("index.number_of_shards", settings80);
        org.elasticsearch.common.settings.Settings settings92 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings80);
        org.elasticsearch.common.settings.Settings settings93 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.common.settings.Settings settings95 = settings80.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings80);
        org.elasticsearch.index.IndexSettings indexSettings97 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings80);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting98 = indexSettings97.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Settings settings99 = indexSettings97.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNull(discoveryNodeFilters63);
        org.junit.Assert.assertNull(discoveryNodeFilters64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + property68 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property68.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(params74);
        org.junit.Assert.assertNull(xContentBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(settings95);
        org.junit.Assert.assertNotNull(timeValueSetting98);
        org.junit.Assert.assertNotNull(settings99);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        java.lang.Object obj36 = null;
        boolean boolean37 = settings12.equals(obj36);
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings0.dryRun(settings12);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings12.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strMap41);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings5.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray18 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray19 = settings11.getAsArray("active_allocations", strArray18);
        java.lang.String str21 = settings11.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings11.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean34 = indexScopedSettings5.updateSettings(settings11, builder25, builder32, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder25.put("index.number_of_shards", 10L);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder37.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.Settings settings50 = builder37.build();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.shadow_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("index.uuid", "index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder1.settings(builder57);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.putNull("index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardSetting10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder7 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder7.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray37 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder14.putArray("index.creation_date", (java.util.List<java.lang.String>) strList38);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder14.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder14.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder14.put("10.0", (long) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder48.loadFromSource("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder6.settings(builder48);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = builder48.internalMap();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.put("hi!", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder34.normalizePrefix("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder34.put("", "index.blocks.write");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.setRoutingNumShards((int) (short) 10);
        int int34 = builder31.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings15.getScope();
        boolean boolean18 = indexScopedSettings15.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings20.toXContent(xContentBuilder21, params22);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings20);
        indexScopedSettings15.validate("index.shared_filesystem.recover_on_any_node", settings20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray35 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray36 = settings28.getAsArray("active_allocations", strArray35);
        java.lang.String str38 = settings28.toDelimitedString('4');
        indexScopedSettings26.validate("index.number_of_shards", settings28);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings28);
        java.util.Set<java.lang.String> strSet42 = settings28.names();
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings28);
        java.lang.String str45 = settings28.get("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData46.getInitialRecoveryFilters();
        boolean boolean49 = indexMetaData46.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray59 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray60 = settings52.getAsArray("active_allocations", strArray59);
        java.lang.String str62 = settings52.toDelimitedString('4');
        indexScopedSettings50.validate("index.number_of_shards", settings52);
        java.util.function.Predicate<java.lang.String> strPredicate64 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings65 = settings52.filter(strPredicate64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params67 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = settings52.toXContent(xContentBuilder66, params67);
        org.elasticsearch.Version version70 = null;
        org.elasticsearch.Version version71 = settings52.getAsVersion("index.blocks.metadata", version70);
        java.util.function.Predicate<java.lang.String> strPredicate72 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings73 = settings52.filter(strPredicate72);
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings52);
        long long75 = indexMetaData46.getCreationDate();
        int int76 = indexMetaData46.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap77 = indexMetaData46.getMappings();
        boolean boolean78 = settings28.equals((java.lang.Object) strImmutableOpenMap77);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(params67);
        org.junit.Assert.assertNull(xContentBuilder68);
        org.junit.Assert.assertNull(version71);
        org.junit.Assert.assertNotNull(strPredicate72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.putNull("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder27.putNull("index.");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder33.internalMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strMap34);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder11 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.putNull("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings settings23 = builder19.build();
        java.lang.String str26 = settings23.get("archived.", "index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder10.settings(settings23);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index.version.minimum_compatible" + "'", str26, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData64.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData64.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        int int72 = indexMetaData64.getRoutingNumShards();
        boolean boolean73 = indexSettings57.updateIndexMetaData(indexMetaData64);
        int int74 = indexSettings57.numberOfShards;
        indexSettings57.maxResultWindow = 0;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long8 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder64.putMapping(mappingMetaData65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig60 = indexSettings57.mergeSchedulerConfig;
        boolean boolean61 = indexSettings57.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        org.elasticsearch.common.unit.TimeValue timeValue17 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue18 = settings15.getAsTime("index.number_of_replicas", timeValue17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings15.getGroups("_all", false);
        java.lang.Class<?> wildcardClass22 = settings15.getClass();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.creationDate((long) 10000);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.loadFromSource("_all");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean63 = indexSettings57.isIndexUsingShadowReplicas();
        java.lang.Class<?> wildcardClass64 = indexSettings57.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.index("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.version((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.primaryTerm(0, 1L);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        boolean boolean63 = indexSettings57.warmerEnabled;
        boolean boolean64 = indexSettings57.getqueryStringAnalyzeWildcard();
        indexSettings57.maxRescoreWindow = (byte) -1;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexSettings57.scopedSettings;
        long long68 = indexSettings57.getGcDeletesInMillis();
        indexSettings57.maxRescoreWindow = 1;
        boolean boolean71 = indexSettings57.getisShadowReplicaIndex();
        java.lang.String str72 = indexSettings57.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 60000L + "'", long68 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "_all" + "'", str72, "_all");
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder19.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.normalizePrefix("index.number_of_replicas");
        java.io.InputStream inputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder25 = builder20.loadFromStream("", inputStream24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.creationDate((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        org.elasticsearch.common.unit.TimeValue timeValue17 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue18 = settings15.getAsTime("index.number_of_replicas", timeValue17);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        java.lang.String str22 = settings19.get("index.data_path", "state-");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getAsGroups();
        java.lang.String str25 = settings19.get("false");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "state-" + "'", str22, "state-");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        boolean boolean63 = indexSettings57.warmerEnabled;
        java.lang.String str64 = indexSettings57.customDataPath();
        java.lang.String str65 = indexSettings57.nodeName;
        boolean boolean66 = indexSettings57.defaultAllowUnmappedFields;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting67 = indexSettings57.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.Version version68 = indexSettings57.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(timeValueSetting67);
        org.junit.Assert.assertNotNull(version68);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet6 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) '#', indexMetaData1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        org.elasticsearch.index.translog.Translog.Durability durability65 = indexSettings57.durability;
        boolean boolean66 = indexSettings57.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + durability65 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability65.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings settings4 = builder3.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(settings4);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder9.removeAllAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData64.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData64.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        int int72 = indexMetaData64.getRoutingNumShards();
        boolean boolean73 = indexSettings57.updateIndexMetaData(indexMetaData64);
        boolean boolean74 = indexSettings57.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str65 = indexSettings57.getNodeName();
        java.lang.String str66 = indexSettings57.nodeName;
        long long67 = indexSettings57.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder35.put("index.blocks.read", "false");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("_na_", "index.number_of_shards");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet6 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean8 = indexScopedSettings0.get(booleanSetting7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass27 = strPredicate26.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder21.put("index.creation_date_string", (java.lang.Class) wildcardClass27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder29.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass36 = strPredicate35.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder30.put("index.creation_date_string", (java.lang.Class) wildcardClass36);
        boolean boolean39 = indexScopedSettings0.updateDynamicSettings(settings9, builder28, builder30, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.creation_date", true);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet44 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass45 = wildcardSettingSet44.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder42.put("index.version.upgraded_string", (java.lang.Class) wildcardClass45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property48 = indexScopedSettings47.getScope();
        boolean boolean50 = indexScopedSettings47.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = settings52.toXContent(xContentBuilder53, params54);
        boolean boolean56 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings52);
        indexScopedSettings47.validate("index.shared_filesystem.recover_on_any_node", settings52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray67 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray68 = settings60.getAsArray("active_allocations", strArray67);
        java.lang.String str70 = settings60.toDelimitedString('4');
        indexScopedSettings58.validate("index.number_of_shards", settings60);
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings60);
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings60);
        boolean boolean74 = settings60.isEmpty();
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray83 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray84 = settings76.getAsArray("active_allocations", strArray83);
        java.lang.String[] strArray85 = settings60.getAsArray("index.shared_filesystem", strArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder86 = builder42.put((java.lang.Object[]) strArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: array settings of key + value order doesn't hold correct number of arguments (5)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(wildcardSettingSet6);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(wildcardSettingSet44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + property48 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property48.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNull(xContentBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        int int11 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        java.lang.Class<?> wildcardClass11 = indexMetaData0.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String str34 = builder32.remove("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray42 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray43 = settings35.getAsArray("active_allocations", strArray42);
        java.lang.String str45 = settings35.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue49 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = settings47.getAsBytesSize("index.creation_date", byteSizeValue49);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder32.put(settings47);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet53 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass54 = wildcardSettingSet53.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder32.put("index.number_of_shards", (java.lang.Class) wildcardClass54);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder32.put("index.shared_filesystem.recover_on_any_node", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder32.put("index.version.upgraded", (float) 32);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#", 0);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNull(byteSizeValue50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(wildcardSettingSet53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        boolean boolean55 = false; // flaky: indexSettings52.getisShadowReplicaIndex();
        boolean boolean56 = false; // flaky: indexSettings52.TTLPurgeDisabled;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = null; // flaky: indexSettings52.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings57);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        java.lang.Boolean boolean22 = settings17.getAsBoolean("index.priority", (java.lang.Boolean) true);
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        java.lang.String[] strArray25 = settings17.getAsArray("hi!");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + true + "'", boolean22, true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray25);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        boolean boolean64 = indexSettings57.getqueryStringAnalyzeWildcard();
        boolean boolean65 = indexSettings57.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.putNull("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.blocks.metadata", 1);
        java.lang.String str13 = builder8.remove("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings15.getScope();
        boolean boolean18 = indexScopedSettings15.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting20 = indexScopedSettings15.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray28 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray29 = settings21.getAsArray("active_allocations", strArray28);
        java.lang.String str31 = settings21.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings21.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean44 = indexScopedSettings15.updateSettings(settings21, builder35, builder42, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder35.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder35.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.normalizePrefix("index.creation_date_string");
        java.lang.String str53 = builder51.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder55.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder59.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder64 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder64.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate70 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass71 = strPredicate70.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder65.put("index.creation_date_string", (java.lang.Class) wildcardClass71);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder59.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass71);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder51.put("index.creation_date_string", (java.lang.Class) wildcardClass71);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder8.put("_all", (java.lang.Class) wildcardClass71);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardSetting20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strPredicate70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings57.getNodeSettings();
        int int62 = indexSettings57.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        int int5 = indexMetaData0.getRoutingNumShards();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.putAlias(aliasMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(version6);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder5.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray35 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder12.putArray("index.creation_date", (java.util.List<java.lang.String>) strList36);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder12.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.putNull("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder40.put("", true);
        org.elasticsearch.common.settings.Settings settings46 = builder40.build();
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap48 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData0.getInitialRecoveryFilters();
        long long50 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder3.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.numberOfShards((int) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("active_allocations", (double) 0.0f);
        java.lang.String str18 = builder16.remove("index.blocks.read_only");
        java.lang.String str20 = builder16.get("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder9.settings(builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData22.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData22.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property27 = indexScopedSettings26.getScope();
        boolean boolean29 = indexScopedSettings26.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting31 = indexScopedSettings26.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property33 = indexScopedSettings32.getScope();
        boolean boolean35 = indexScopedSettings32.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting37 = indexScopedSettings32.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray45 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray46 = settings38.getAsArray("active_allocations", strArray45);
        java.lang.String str48 = settings38.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap51 = settings38.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean61 = indexScopedSettings32.updateSettings(settings38, builder52, builder59, "index.shared_filesystem");
        java.lang.Object obj62 = null;
        boolean boolean63 = settings38.equals(obj62);
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings26.dryRun(settings38);
        org.elasticsearch.common.settings.Settings settings66 = settings64.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate67 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property69 = indexScopedSettings68.getScope();
        boolean boolean71 = indexScopedSettings68.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting73 = indexScopedSettings68.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings74 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings66, strPredicate67, indexScopedSettings68);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap75 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state76 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder9.state(state76);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder77.numberOfReplicas((int) (short) 10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + property27 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property27.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardSetting31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + property33 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property33.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(wildcardSetting37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + property69 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property69.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(wildcardSetting73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap75);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state76.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData0.mappingOrDefault("index.number_of_replicas");
        java.util.Set<java.lang.String> strSet32 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        int int33 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap34 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray42 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray43 = settings35.getAsArray("active_allocations", strArray42);
        java.lang.String str45 = settings35.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue49 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = settings47.getAsBytesSize("index.creation_date", byteSizeValue49);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings47);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNull(byteSizeValue50);
        org.junit.Assert.assertNotNull(settings51);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        indexSettings57.maxRescoreWindow = 100;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting62);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.putNull("index.");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder30.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray59 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray60 = settings52.getAsArray("active_allocations", strArray59);
        java.lang.String str62 = settings52.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings52.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder66 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder70 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean75 = indexScopedSettings46.updateSettings(settings52, builder66, builder73, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder66.put("index.number_of_shards", 10L);
        java.lang.String[] strArray87 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder78.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder30.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder8.putArray("index.version.created", (java.util.List<java.lang.String>) strList88);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder8.put("index.priority", (float) 52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        java.util.Set<java.lang.String> strSet63 = indexMetaData61.activeAllocationIds(0);
        long long64 = indexMetaData61.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder64.index("index.shadow_replicas");
        long long67 = builder66.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder66.primaryTerm((int) (short) 0, (long) (byte) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.normalizePrefix("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.put("index.shared_filesystem.recover_on_any_node", "index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("10", (double) 35L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte4 = state3.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder1.mapping("index.shadow_replicas");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        int int66 = indexSettings57.getMaxRescoreWindow();
        indexSettings57.maxRescoreWindow = ' ';
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = indexSettings57.indexMetaData;
        long long70 = indexMetaData69.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder19.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder20.normalizePrefix("index.number_of_replicas");
        java.lang.String str24 = builder22.get("index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.lang.String str65 = indexSettings57.defaultField;
        java.lang.String str66 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        java.util.function.Predicate<java.lang.String> strPredicate68 = indexSettings57.indexNameMatcher;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = indexSettings57.scopedSettings;
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet70 = indexScopedSettings69.getBUILT_IN_INDEX_SETTINGS();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
        org.junit.Assert.assertNotNull(booleanSetting67);
        org.junit.Assert.assertNotNull(strPredicate68);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertNotNull(wildcardSettingSet70);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData58);
        int int65 = indexMetaData58.getRoutingNumShards();
        // The following exception was thrown during execution in test generation
        try {
            int int67 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData58, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property37 = indexScopedSettings36.getScope();
        boolean boolean39 = indexScopedSettings36.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting41 = indexScopedSettings36.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray49 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray50 = settings42.getAsArray("active_allocations", strArray49);
        java.lang.String str52 = settings42.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings42.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean65 = indexScopedSettings36.updateSettings(settings42, builder56, builder63, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder56.put("index.number_of_shards", 10L);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder68.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder20.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList78);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder81.loadFromSource("index.shadow_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap84 = builder83.internalMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + property37 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property37.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardSetting41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(strMap84);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        int int2 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(strSet4);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig63 = indexSettings57.mergePolicyConfig;
        java.lang.String str64 = indexSettings57.defaultField;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue65 = indexSettings57.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertNull(byteSizeValue65);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        long long10 = builder9.version();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property12 = indexScopedSettings11.getScope();
        boolean boolean14 = indexScopedSettings11.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting16 = indexScopedSettings11.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray24 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray25 = settings17.getAsArray("active_allocations", strArray24);
        java.lang.String str27 = settings17.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings17.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean40 = indexScopedSettings11.updateSettings(settings17, builder31, builder38, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder31.put("index.number_of_shards", 10L);
        java.lang.String[] strArray52 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder43.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList53);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray65 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray66 = settings58.getAsArray("active_allocations", strArray65);
        java.lang.String str68 = settings58.toDelimitedString('4');
        indexScopedSettings56.validate("index.number_of_shards", settings58);
        java.util.function.Predicate<java.lang.String> strPredicate70 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings71 = settings58.filter(strPredicate70);
        org.elasticsearch.common.unit.TimeValue timeValue73 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue74 = settings71.getAsTime("index.number_of_replicas", timeValue73);
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray83 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray84 = settings76.getAsArray("active_allocations", strArray83);
        java.lang.String[] strArray85 = settings71.getAsArray("index.blocks.metadata", strArray84);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder55.put(settings71);
        java.lang.String str89 = settings71.get("index.shared_filesystem", "index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings settings90 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings71);
        boolean boolean91 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings90);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder9.settings(settings90);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + property12 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property12.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardSetting16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strPredicate70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(timeValue73);
        org.junit.Assert.assertNotNull(timeValue74);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "index.version.minimum_compatible" + "'", str89, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        int int62 = indexSettings57.getMaxRescoreWindow();
        java.lang.String str63 = indexSettings57.defaultField;
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        boolean boolean65 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        java.lang.String str60 = indexSettings57.getDefaultField();
        boolean boolean61 = indexSettings57.isTTLPurgeDisabled();
        indexSettings57.warmerEnabled = true;
        indexSettings57.setMaxRefreshListeners((int) '4');
        int int66 = indexSettings57.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "_all" + "'", str60, "_all");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        boolean boolean61 = indexSettings57.isShadowReplicaIndex;
        boolean boolean62 = indexSettings57.isShadowReplicaIndex();
        indexSettings57.TTLPurgeDisabled = false;
        indexSettings57.maxResultWindow = 1000;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.putMapping(mappingMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.maxResultWindow;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig66 = indexSettings57.getMergeSchedulerConfig();
        indexSettings57.gcDeletesInMillis = 0L;
        boolean boolean69 = indexSettings57.isShadowReplicaIndex;
        indexSettings57.warmerEnabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData0.getCustoms();
        int int54 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property53 = indexScopedSettings52.getScope();
        boolean boolean55 = indexScopedSettings52.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting57 = indexScopedSettings52.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray65 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray66 = settings58.getAsArray("active_allocations", strArray65);
        java.lang.String str68 = settings58.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings58);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings58.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder72 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder72.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder76 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean81 = indexScopedSettings52.updateSettings(settings58, builder72, builder79, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder72.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = builder84.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder32.put(strMap85);
        java.lang.String str88 = builder32.remove("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings89 = builder32.build();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder93 = builder32.put("index.number_of_replicas.0=index.uuid index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node index.number_of_replicas.3=index.number_of_shards index.number_of_replicas.4=index.version.upgraded_string index.number_of_replicas.5=index.version.minimum_compatible index.number_of_replicas.6=index.data_path index.number_of_shards=10 index.shared_filesystem.recover_on_any_node=index.data_path index.version.created=index.uuid ", 35L, byteSizeUnit92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + property53 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property53.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(settings89);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(settings5);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        long long53 = 0L; // flaky: indexSettings52.gcDeletesInMillis;
        org.elasticsearch.index.translog.Translog.Durability durability54 = null; // flaky: indexSettings52.durability;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 60000L + "'", long53 == 60000L);
// flaky:         org.junit.Assert.assertTrue("'" + durability54 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability54.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder7.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property41 = indexScopedSettings40.getScope();
        boolean boolean43 = indexScopedSettings40.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params47 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = settings45.toXContent(xContentBuilder46, params47);
        boolean boolean49 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings45);
        indexScopedSettings40.validate("index.shared_filesystem.recover_on_any_node", settings45);
        java.lang.String str53 = settings45.get("index.version.upgraded_string", "index.creation_date");
        java.lang.String[] strArray55 = settings45.getAsArray("_all");
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder7.extendArray("index.version.upgraded", strArray55);
        java.lang.String str58 = builder56.remove("index.version.upgraded");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + property41 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property41.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(params47);
        org.junit.Assert.assertNull(xContentBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "index.creation_date" + "'", str53, "index.creation_date");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.numberOfShards(0);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.settings(settings9);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.numberOfShards((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.apache.lucene.util.Version version62 = indexMetaData60.getMinimumCompatibleVersion();
        int int63 = indexMetaData60.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = indexMetaData60.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNull(version62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getdefaultAllowUnmappedFields();
        java.lang.String str63 = indexSettings57.getDefaultField();
        boolean boolean64 = indexSettings57.warmerEnabled;
        boolean boolean65 = indexSettings57.isShadowReplicaIndex;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder1.mapping("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfShards(1000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.setRoutingNumShards((-1));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        org.elasticsearch.common.unit.TimeValue timeValue55 = null; // flaky: indexSettings52.getTranslogSyncInterval();
        boolean boolean56 = false; // flaky: indexSettings52.getqueryStringLenient();
        long long57 = 0L; // flaky: indexSettings52.getGcDeletesInMillis();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting58 = null; // flaky: indexSettings52.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting59 = null; // flaky: indexSettings52.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
// flaky:         org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
// flaky:         org.junit.Assert.assertNotNull(durabilitySetting58);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting59);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.common.logging.ESLogger eSLogger61 = indexSettings57.logger;
        org.elasticsearch.Version version62 = indexSettings57.version;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig63 = indexSettings57.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(eSLogger61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig63);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((-1L));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.creationDate((long) '4');
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder15.loadFromSource("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray27 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray28 = settings20.getAsArray("active_allocations", strArray27);
        java.lang.String str30 = settings20.toDelimitedString('4');
        indexScopedSettings18.validate("index.number_of_shards", settings20);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = settings20.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        java.lang.String str34 = indexScopedSettings33.nodeName();
        java.util.function.Predicate<java.lang.String> strPredicate35 = indexScopedSettings33.getINDEX_SETTINGS_KEY_PREDICATE();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder17.putProperties(strMap32, strPredicate35, strFunction36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder7.settings(builder37);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData0.getCustoms();
        int int54 = indexMetaData0.getNumberOfShards();
        boolean boolean56 = indexMetaData0.isSameUUID("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.Version version57 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(version57);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder7.put("100.0", (int) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder7.put("index.auto_expand_replicas", "");
        org.elasticsearch.common.settings.Settings settings42 = builder7.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray22 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray23 = settings15.getAsArray("active_allocations", strArray22);
        java.lang.String str25 = settings15.toDelimitedString('4');
        indexScopedSettings13.validate("index.number_of_shards", settings15);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder12.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder12.index("active_allocations");
        int int31 = builder30.numberOfShards();
        java.lang.Class<?> wildcardClass32 = builder30.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder6.put("index.shadow_replicas", (java.lang.Class) wildcardClass32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData35.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property38 = indexScopedSettings37.getScope();
        boolean boolean40 = indexScopedSettings37.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting42 = indexScopedSettings37.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray50 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray51 = settings43.getAsArray("active_allocations", strArray50);
        java.lang.String str53 = settings43.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings43);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings43.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder57 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean66 = indexScopedSettings37.updateSettings(settings43, builder57, builder64, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder57.put("index.number_of_shards", 10L);
        java.lang.String[] strArray78 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder69.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList79);
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder69.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings85 = builder69.build();
        java.lang.Boolean boolean88 = settings85.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue90 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue91 = settings85.getAsSize("", sizeValue90);
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings85);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher93 = indexSettings92.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue94 = indexSettings92.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData95 = indexSettings92.getIndexMetaData();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap96 = indexMetaData95.getActiveAllocationIds();
        org.elasticsearch.Version version97 = indexMetaData95.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder33.put("index.version.upgraded", version97);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + property38 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property38.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(wildcardSetting42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertEquals("'" + boolean88 + "' != '" + false + "'", boolean88, false);
        org.junit.Assert.assertNull(sizeValue91);
        org.junit.Assert.assertNotNull(parseFieldMatcher93);
        org.junit.Assert.assertNotNull(timeValue94);
        org.junit.Assert.assertNotNull(indexMetaData95);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap96);
        org.junit.Assert.assertNotNull(version97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData0.mappingOrDefault("index.blocks.write");
        org.elasticsearch.common.io.stream.StreamInput streamInput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexMetaData0.readFrom(streamInput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNull(mappingMetaData16);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder1.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder1.put("", (-1L));
        org.elasticsearch.common.settings.Settings settings6 = builder1.build();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings6, streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder4.settings(settings7);
        long long21 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder20.index("index.creation_date_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.putMapping(mappingMetaData26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(index5);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.blocks.read_only", true);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder7.put("index.blocks.metadata", 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder14 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder14.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray24 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder15.extendArray("index.shared_filesystem.recover_on_any_node", strArray24);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.version.minimum_compatible", (int) (short) 1);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder25.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder7.put(strMap29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.loadFromSource("true");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        boolean boolean22 = settings21.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.putAlias(builder25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        int int4 = builder1.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = builder1.primaryTerm(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData0.getState();
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData13.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings15.getScope();
        boolean boolean18 = indexScopedSettings15.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting20 = indexScopedSettings15.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray28 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray29 = settings21.getAsArray("active_allocations", strArray28);
        java.lang.String str31 = settings21.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings21.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean44 = indexScopedSettings15.updateSettings(settings21, builder35, builder42, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder35.put("index.number_of_shards", 10L);
        java.lang.String[] strArray56 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder47.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList57);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder47.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings63 = builder47.build();
        java.lang.Boolean boolean66 = settings63.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue68 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue69 = settings63.getAsSize("", sizeValue68);
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings63);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher71 = indexSettings70.parseFieldMatcher;
        int int72 = indexSettings70.getMaxResultWindow();
        boolean boolean73 = indexSettings70.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting74 = indexSettings70.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting75 = indexSettings70.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.elasticsearch.common.settings.Settings settings76 = indexSettings70.getSettings();
        java.util.Map<java.lang.String, java.lang.String> strMap77 = settings76.getAsMap();
        org.elasticsearch.index.IndexSettings indexSettings78 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings76);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardSetting20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + boolean66 + "' != '" + false + "'", boolean66, false);
        org.junit.Assert.assertNull(sizeValue69);
        org.junit.Assert.assertNotNull(parseFieldMatcher71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10000 + "'", int72 == 10000);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(booleanSetting74);
        org.junit.Assert.assertNotNull(durabilitySetting75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        org.elasticsearch.common.unit.TimeValue timeValue55 = null; // flaky: indexSettings52.getTranslogSyncInterval();
        boolean boolean56 = false; // flaky: indexSettings52.getqueryStringLenient();
        org.elasticsearch.common.settings.Settings settings57 = null; // flaky: indexSettings52.getNodeSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = null; // flaky: settings57.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
// flaky:         org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(settings57);
// flaky:         org.junit.Assert.assertNotNull(strMap59);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("", 0L);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.internalMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property29 = indexScopedSettings28.getScope();
        boolean boolean31 = indexScopedSettings28.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting33 = indexScopedSettings28.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray41 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray42 = settings34.getAsArray("active_allocations", strArray41);
        java.lang.String str44 = settings34.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings34.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder48 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder52 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean57 = indexScopedSettings28.updateSettings(settings34, builder48, builder55, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder48.put("index.number_of_shards", 10L);
        java.lang.String[] strArray69 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder60.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList70);
        org.elasticsearch.common.settings.Settings settings73 = builder60.build();
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder60.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder60.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap79 = builder60.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder26.put(strMap79);
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder80.put("active_allocations", false);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder80.put("index.=null4index.blocks.metadata=10.04index.creation_date_string=null4index.shared_filesystem.recover_on_any_node.0=index.shared_filesystem.recover_on_any_node4index.shared_filesystem.recover_on_any_node.1=index.version.upgraded_string4index.shared_filesystem.recover_on_any_node.2=active_allocations4index.shared_filesystem.recover_on_any_node.3=archived.4", false);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder90 = builder86.put("index.shared_filesystem", (long) '#', byteSizeUnit89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + property29 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property29.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(wildcardSetting33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        boolean boolean10 = indexMetaData0.isSameUUID("index.version.upgraded");
        int int11 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version13 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(version13);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting59 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        boolean boolean60 = indexSettings57.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(intSetting59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean63 = indexSettings57.isIndexUsingShadowReplicas();
        indexSettings57.maxRefreshListeners = ' ';
        org.elasticsearch.common.settings.Settings settings66 = indexSettings57.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings66);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getALLOW_UNMAPPED();
        long long67 = indexSettings57.gcDeletesInMillis;
        java.lang.String str68 = indexSettings57.customDataPath();
        java.lang.String str69 = indexSettings57.getDefaultField();
        int int70 = indexSettings57.maxRefreshListeners;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting71 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "_all" + "'", str69, "_all");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1000 + "'", int70 == 1000);
        org.junit.Assert.assertNotNull(timeValueSetting71);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        org.elasticsearch.Version version5 = null;
        org.elasticsearch.Version version6 = settings2.getAsVersion("", version5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings2.getAsGroups(true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        indexScopedSettings12.validate("index.number_of_shards", settings14);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings14.filter(strPredicate26);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = settings14.toXContent(xContentBuilder28, params29);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = settings10.toXContent(xContentBuilder11, params29);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = settings2.toXContent(xContentBuilder9, params29);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue35 = settings2.getAsRatio("index.number_of_shards=10 index.shared_filesystem.recover_on_any_node=index.data_path index.version.minimum_compatible=60000.0 ", "index.number_of_shards");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.number_of_shards]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(params29);
        org.junit.Assert.assertNull(xContentBuilder30);
        org.junit.Assert.assertNull(xContentBuilder31);
        org.junit.Assert.assertNull(xContentBuilder32);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        java.lang.String str20 = indexSettings19.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings19.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings19.getINDEX_TTL_DISABLE_PURGE_SETTING();
        int int23 = indexSettings19.maxRescoreWindow;
        indexSettings19.setMaxRescoreWindow(1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder7.put("index.uuid", (float) 0L);
        java.lang.String str38 = builder7.remove("index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = builder2.mapping("index.");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(mappingMetaData4);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        int int66 = indexSettings57.getMaxRescoreWindow();
        indexSettings57.maxRescoreWindow = ' ';
        boolean boolean69 = indexSettings57.isQueryStringAnalyzeWildcard();
        int int70 = indexSettings57.maxRefreshListeners;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = indexSettings57.getIndexMetaData();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1000 + "'", int70 == 1000);
        org.junit.Assert.assertNotNull(indexMetaData71);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting63 = indexSettings57.getDEFAULT_FIELD_SETTING();
        int int64 = indexSettings57.maxResultWindow;
        boolean boolean65 = indexSettings57.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSetting63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }
}
