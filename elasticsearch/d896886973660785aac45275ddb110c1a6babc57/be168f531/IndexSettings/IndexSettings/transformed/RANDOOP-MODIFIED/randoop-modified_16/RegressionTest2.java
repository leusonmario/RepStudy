import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.metadata");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm((int) (short) 100, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        int int10 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("100.0", (float) (short) 0);
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.loadFromStream("index.blocks.read_only", inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putMapping(mappingMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.uuid", custom1);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        long long59 = indexSettings57.gcDeletesInMillis;
        int int60 = indexSettings57.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 60000L + "'", long59 == 60000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.put("index.creation_date_string", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(builder11);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray30 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder21.extendArray("index.shared_filesystem.recover_on_any_node", strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.settings(settings34);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder31.put(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder19.settings(settings34);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings34, streamOutput38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.setRoutingNumShards((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings5.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray18 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray19 = settings11.getAsArray("active_allocations", strArray18);
        java.lang.String str21 = settings11.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings11.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean34 = indexScopedSettings5.updateSettings(settings11, builder25, builder32, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder25.put("index.number_of_shards", 10L);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder37.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.Settings settings50 = builder37.build();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.shadow_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("index.uuid", "index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder1.settings(builder57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder1.creationDate(0L);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardSetting10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        int int97 = indexMetaData61.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder98 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        int int99 = builder98.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder32.put("index.uuid", (double) 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putMapping(mappingMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        boolean boolean63 = indexSettings57.warmerEnabled;
        boolean boolean64 = indexSettings57.getqueryStringAnalyzeWildcard();
        int int65 = indexSettings57.numberOfShards;
        int int66 = indexSettings57.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        indexSettings57.maxRescoreWindow = 1;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting65 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteSizeValueSetting65);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.auto_expand_replicas", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder51 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder54.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder54.put("", (float) (short) 100);
        java.lang.String str62 = builder54.get("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property64 = indexScopedSettings63.getScope();
        boolean boolean66 = indexScopedSettings63.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting68 = indexScopedSettings63.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray76 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray77 = settings69.getAsArray("active_allocations", strArray76);
        java.lang.String str79 = settings69.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings69);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings69.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder83 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder83.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder87 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder87.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean92 = indexScopedSettings63.updateSettings(settings69, builder83, builder90, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder83.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap96 = builder95.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder97 = builder54.put(strMap96);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder50.put(strMap96);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100.0" + "'", str62, "100.0");
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + property64 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property64.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(wildcardSetting68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(strMap96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.put("index.creation_date_string", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(builder11);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder11.normalizePrefix("active_allocations");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder23 = builder11.put(objDictionary22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.creationDate((long) (byte) 1);
        int int23 = builder22.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        indexScopedSettings11.validate("index.number_of_shards", settings13);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.common.settings.Setting.Property property27 = indexScopedSettings0.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + property27 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property27.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) -1);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putAlias(builder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        indexScopedSettings2.validate("index.number_of_shards", settings4);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings16.getAsTime("hi!", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings16);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.putAlias(builder21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        int int65 = indexMetaData64.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params68 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = settings66.toXContent(xContentBuilder67, params68);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings66.getGroups("index.shared_filesystem", true);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings66);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData74.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters76 = indexMetaData74.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state77 = indexMetaData74.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters79 = indexMetaData74.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap80 = indexMetaData74.getAliases();
        int int81 = indexMetaData74.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData74);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff83 = indexMetaData64.diff(indexMetaData74);
        org.elasticsearch.Version version84 = indexMetaData74.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(params68);
        org.junit.Assert.assertNull(xContentBuilder69);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNull(discoveryNodeFilters76);
        org.junit.Assert.assertTrue("'" + state77 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state77.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters79);
        org.junit.Assert.assertNotNull(strImmutableOpenMap80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff83);
        org.junit.Assert.assertNotNull(version84);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        int int62 = indexSettings57.getMaxRescoreWindow();
        boolean boolean63 = indexSettings57.isDefaultAllowUnmappedFields();
        int int64 = indexSettings57.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.removeAlias("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.putAlias(aliasMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.number_of_shards", custom1);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("_na_");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder5.mapping("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        java.lang.String str11 = builder3.get("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property13 = indexScopedSettings12.getScope();
        boolean boolean15 = indexScopedSettings12.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting17 = indexScopedSettings12.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings18.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean41 = indexScopedSettings12.updateSettings(settings18, builder32, builder39, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder3.put(strMap45);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder46.normalizePrefix("primary_terms");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100.0" + "'", str11, "100.0");
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + property13 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property13.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardSetting17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        indexScopedSettings2.validate("index.number_of_shards", settings4);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings16.getAsTime("hi!", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings16);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.primaryTerm((int) (short) 1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings57.getNodeSettings();
        org.elasticsearch.Version version61 = indexSettings57.version;
        int int62 = indexSettings57.maxResultWindow;
        boolean boolean63 = indexSettings57.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.Version version65 = indexSettings57.version;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting66 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(intSetting66);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting60 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.index.translog.Translog.Durability durability62 = indexSettings57.getTranslogDurability();
        indexSettings57.maxResultWindow = 10000;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(intSetting60);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + durability62 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability62.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        int int10 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings6.getGroups("index.blocks.read_only");
        java.lang.Boolean boolean33 = settings6.getAsBoolean("primary_terms", (java.lang.Boolean) true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData35.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property42 = indexScopedSettings41.getScope();
        boolean boolean44 = indexScopedSettings41.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting46 = indexScopedSettings41.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray54 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray55 = settings47.getAsArray("active_allocations", strArray54);
        java.lang.String str57 = settings47.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings47);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings47.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder61.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder65 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean70 = indexScopedSettings41.updateSettings(settings47, builder61, builder68, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder61.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder61.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder75.normalizePrefix("index.creation_date_string");
        java.lang.String str79 = builder77.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder77.put("index.blocks.write", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder77.normalizePrefix("index.shared_filesystem");
        boolean boolean85 = indexMetaData35.equals((java.lang.Object) builder84);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings86 = new org.elasticsearch.common.settings.IndexScopedSettings(settings6, indexScopedSettings34, indexMetaData35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + boolean33 + "' != '" + true + "'", boolean33, true);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + property42 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property42.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(wildcardSetting46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.putNull("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem", (double) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.version.minimum_compatible", false);
        java.lang.String str28 = builder26.remove("_na_");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putCustom("index.version.upgraded", custom8);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("", 0L);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.creation_date", (double) 0L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.index.Index index4 = indexMetaData0.getIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings37 = settings12.getByPrefix("index.version.upgraded_string");
        java.lang.Object obj38 = null;
        boolean boolean39 = settings12.equals(obj38);
        java.util.Set<java.lang.String> strSet40 = settings12.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params44 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = settings42.toXContent(xContentBuilder43, params44);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = settings12.toXContent(xContentBuilder41, params44);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = indexMetaData0.toXContent(xContentBuilder5, params44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(index4);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(params44);
        org.junit.Assert.assertNull(xContentBuilder45);
        org.junit.Assert.assertNull(xContentBuilder46);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        int int63 = indexMetaData61.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput64 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData61.writeTo(streamOutput64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long3 = builder2.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getALLOW_UNMAPPED();
        org.elasticsearch.index.translog.Translog.Durability durability64 = indexSettings57.getdurability();
        org.apache.lucene.index.MergePolicy mergePolicy65 = indexSettings57.getMergePolicy();
        int int66 = indexSettings57.getNumberOfReplicas();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertTrue("'" + durability64 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability64.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(mergePolicy65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(booleanSetting67);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) 'a');
        long long4 = builder1.version();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = builder1.primaryTerm((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        long long59 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue60 = indexSettings57.syncInterval;
        boolean boolean61 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 60000L + "'", long59 == 60000L);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getTranslogSyncInterval();
        org.elasticsearch.Version version62 = indexSettings57.getversion();
        boolean boolean63 = indexSettings57.isWarmerEnabled();
        java.lang.String str64 = indexSettings57.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.common.logging.ESLogger eSLogger61 = indexSettings57.logger;
        boolean boolean62 = indexSettings57.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(eSLogger61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str65 = indexSettings57.getNodeName();
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.getlogger();
        org.elasticsearch.common.settings.Settings settings67 = indexSettings57.settings;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.syncInterval;
        org.elasticsearch.Version version69 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig70 = indexSettings57.getMergeSchedulerConfig();
        boolean boolean71 = indexSettings57.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(eSLogger66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.lang.String str65 = indexSettings57.defaultField;
        java.lang.String str66 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting68 = indexSettings57.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher69 = indexSettings57.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
        org.junit.Assert.assertNotNull(booleanSetting67);
        org.junit.Assert.assertNotNull(booleanSetting68);
        org.junit.Assert.assertNotNull(parseFieldMatcher69);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder53.replacePropertyPlaceholders();
        boolean boolean55 = indexMetaData0.equals((java.lang.Object) builder53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        indexSettings57.gcDeletesInMillis = (short) 10;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting63 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        int int64 = indexSettings57.getMaxResultWindow();
        boolean boolean65 = indexSettings57.isTTLPurgeDisabled();
        org.apache.lucene.index.MergePolicy mergePolicy66 = indexSettings57.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(intSetting63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(mergePolicy66);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        indexScopedSettings11.validate("index.number_of_shards", settings13);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.common.settings.Settings settings28 = settings13.getByPrefix("index.priority");
        java.lang.String[] strArray30 = null;
        java.lang.String[] strArray32 = settings28.getAsArray("archived.", strArray30, (java.lang.Boolean) false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings28.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings28.getGroups("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue41 = settings28.getAsRatio("index.shared_filesystem", "state-");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [state-]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNull(strArray32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        indexSettings57.warmerEnabled = true;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        boolean boolean63 = indexSettings57.isOnSharedFilesystem();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(timeValueSetting62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings31 = settings6.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings31.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings31.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("100.0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder6.mapping("10.0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        java.lang.String str55 = null; // flaky: indexSettings52.customDataPath();
        boolean boolean56 = false; // flaky: indexSettings52.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting57 = null; // flaky: indexSettings52.getINDEX_REFRESH_INTERVAL_SETTING();
// flaky:         indexSettings52.gcDeletesInMillis = (byte) -1;
        int int60 = 0; // flaky: indexSettings52.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet6 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean8 = indexScopedSettings0.get(booleanSetting7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass27 = strPredicate26.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder21.put("index.creation_date_string", (java.lang.Class) wildcardClass27);
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder29.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate35 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass36 = strPredicate35.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder30.put("index.creation_date_string", (java.lang.Class) wildcardClass36);
        boolean boolean39 = indexScopedSettings0.updateDynamicSettings(settings9, builder28, builder30, "_na_");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder30.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder30.put("index.version.upgraded", false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(wildcardSettingSet6);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.durability;
        int int62 = indexSettings57.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = indexSettings57.scopedSettings;
        org.elasticsearch.common.unit.TimeValue timeValue66 = indexSettings57.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(timeValue66);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        java.lang.Class<?> wildcardClass7 = strImmutableOpenMap6.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet66 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        int int67 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters70 = indexMetaData69.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters71 = indexMetaData69.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = indexMetaData69.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData69);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData69.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap75 = indexMetaData69.getAliases();
        boolean boolean77 = indexMetaData69.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray87 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray88 = settings80.getAsArray("active_allocations", strArray87);
        java.lang.String str90 = settings80.toDelimitedString('4');
        indexScopedSettings78.validate("index.number_of_shards", settings80);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings80.getAsGroups(false);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData69, settings80);
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings80);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap96 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNull(discoveryNodeFilters70);
        org.junit.Assert.assertNull(discoveryNodeFilters71);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(strImmutableOpenMap75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(strImmutableOpenMap96);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putCustom("index.blocks.read", custom8);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfReplicas for index [index.data_path]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = settings15.getAsMemory("index.version.created_string", "index.creation_date_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [index.creation_date_string]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.uuid");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder29.putNull("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(builder33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder33.internalMap();
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting63 = indexSettings57.getDEFAULT_FIELD_SETTING();
        int int64 = indexSettings57.maxResultWindow;
        indexSettings57.setTTLPurgeDisabled(true);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher68 = indexSettings57.getParseFieldMatcher();
        java.util.function.Predicate<java.lang.String> strPredicate69 = indexSettings57.getindexNameMatcher();
        int int70 = indexSettings57.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSetting63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(parseFieldMatcher68);
        org.junit.Assert.assertNotNull(strPredicate69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = settings7.toXContent(xContentBuilder8, params9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings7.getGroups("index.shared_filesystem", true);
        java.lang.Object obj14 = null;
        boolean boolean15 = settings7.equals(obj14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap17 = settings7.getGroups("index.blocks.write");
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(params9);
        org.junit.Assert.assertNull(xContentBuilder10);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.setRoutingNumShards(0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putMapping("index.", "index.version.upgraded_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        java.lang.Class<?> wildcardClass65 = timeValueSetting64.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting65 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting67 = indexSettings57.getINDEX_CHECK_ON_STARTUP();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intSetting65);
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
        org.junit.Assert.assertNotNull(strSetting67);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        long long4 = builder1.version();
        java.lang.String str5 = builder1.index();
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.data_path" + "'", str5, "index.data_path");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray18 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray19 = settings11.getAsArray("active_allocations", strArray18);
        java.lang.String str21 = settings11.toDelimitedString('4');
        indexScopedSettings9.validate("index.number_of_shards", settings11);
        java.util.function.Predicate<java.lang.String> strPredicate23 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings24 = settings11.filter(strPredicate23);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params26 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = settings11.toXContent(xContentBuilder25, params26);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder8, params26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(params26);
        org.junit.Assert.assertNull(xContentBuilder27);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.numberOfShards((int) (short) 0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.lang.String str65 = indexSettings57.defaultField;
        java.lang.String str66 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.getsyncInterval();
        indexSettings57.maxRefreshListeners = 0;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
        org.junit.Assert.assertNotNull(booleanSetting67);
        org.junit.Assert.assertNotNull(timeValue68);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings33 = settings8.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings33.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.settings(settings33);
        int int36 = builder35.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.putNull("index.auto_expand_replicas");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder5.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray37 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray38 = settings30.getAsArray("active_allocations", strArray37);
        java.lang.String str40 = settings30.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue44 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = settings30.getAsBytesSize("", byteSizeValue44);
        boolean boolean46 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings30);
        java.util.Map<java.lang.String, java.lang.String> strMap47 = settings30.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder27.put(strMap47);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder48.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.put("", 100.0d);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNull(byteSizeValue45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = indexMetaData0.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings1 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray10 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray11 = settings3.getAsArray("active_allocations", strArray10);
        java.lang.String str13 = settings3.toDelimitedString('4');
        indexScopedSettings1.validate("index.number_of_shards", settings3);
        java.util.function.Predicate<java.lang.String> strPredicate15 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings16 = settings3.filter(strPredicate15);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue19 = settings16.getAsBytesSize("", byteSizeValue18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings16.getGroups("index.priority");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = settings16.getAsMap();
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = settings16.getAsStructuredMap();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings1);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNull(byteSizeValue19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        java.lang.String str58 = indexSettings57.nodeName;
        int int59 = indexSettings57.getNumberOfReplicas();
        org.elasticsearch.index.translog.Translog.Durability durability60 = indexSettings57.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + durability60 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability60.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (byte) 10);
        java.lang.Class<?> wildcardClass4 = builder3.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.created_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder5.settings(builder38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder3.settings(builder38);
        int int41 = builder40.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder53.replacePropertyPlaceholders();
        boolean boolean55 = indexMetaData0.equals((java.lang.Object) builder53);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property57 = indexScopedSettings56.getScope();
        boolean boolean59 = indexScopedSettings56.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting61 = indexScopedSettings56.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property63 = indexScopedSettings62.getScope();
        boolean boolean65 = indexScopedSettings62.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting67 = indexScopedSettings62.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray75 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray76 = settings68.getAsArray("active_allocations", strArray75);
        java.lang.String str78 = settings68.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings68);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings68.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder82 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder82.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder86 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder86.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean91 = indexScopedSettings62.updateSettings(settings68, builder82, builder89, "index.shared_filesystem");
        java.lang.Object obj92 = null;
        boolean boolean93 = settings68.equals(obj92);
        org.elasticsearch.common.settings.Settings settings94 = indexScopedSettings56.dryRun(settings68);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder53.put(settings94);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder97 = builder53.put(objDictionary96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + property57 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property57.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(wildcardSetting61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertTrue("'" + property63 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property63.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(wildcardSetting67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(settings94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNull(version5);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData30.getInitialRecoveryFilters();
        boolean boolean33 = indexMetaData30.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray44 = settings36.getAsArray("active_allocations", strArray43);
        java.lang.String str46 = settings36.toDelimitedString('4');
        indexScopedSettings34.validate("index.number_of_shards", settings36);
        java.util.function.Predicate<java.lang.String> strPredicate48 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings49 = settings36.filter(strPredicate48);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings36.toXContent(xContentBuilder50, params51);
        org.elasticsearch.Version version54 = null;
        org.elasticsearch.Version version55 = settings36.getAsVersion("index.blocks.metadata", version54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings57 = settings36.filter(strPredicate56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData0.diff(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder60.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder60.removeAlias("_all");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNull(xContentBuilder52);
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting64 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        indexSettings57.setTTLPurgeDisabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValueSetting64);
        org.junit.Assert.assertNotNull(timeValueSetting65);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putMapping("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", "index.creation_date_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int55 = builder54.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        int int65 = indexMetaData64.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params68 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = settings66.toXContent(xContentBuilder67, params68);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings66.getGroups("index.shared_filesystem", true);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings66);
        org.elasticsearch.Version version74 = indexMetaData64.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(params68);
        org.junit.Assert.assertNull(xContentBuilder69);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(version74);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting60 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        int int61 = indexSettings57.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(intSetting60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.auto_expand_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.primaryTerm((int) '#', (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("state-");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [state-]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData61.getState();
        byte byte64 = state63.id();
        byte byte65 = state63.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 0 + "'", byte64 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 0 + "'", byte65 == (byte) 0);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData58);
        int int65 = builder64.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.state(state12);
        byte byte14 = state12.id();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Settings settings65 = settings63.getAsSettings("state-");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings65);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting60 = indexSettings57.getALLOW_UNMAPPED();
        boolean boolean61 = indexSettings57.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(booleanSetting60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = indexSettings57.scopedSettings;
        java.lang.String str66 = indexScopedSettings65.nodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_na_");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.upgraded", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder1.mapping("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.getlogger();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting66 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(eSLogger65);
        org.junit.Assert.assertNotNull(intSetting66);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings60.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(booleanSetting61);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData30.getInitialRecoveryFilters();
        boolean boolean33 = indexMetaData30.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray44 = settings36.getAsArray("active_allocations", strArray43);
        java.lang.String str46 = settings36.toDelimitedString('4');
        indexScopedSettings34.validate("index.number_of_shards", settings36);
        java.util.function.Predicate<java.lang.String> strPredicate48 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings49 = settings36.filter(strPredicate48);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings36.toXContent(xContentBuilder50, params51);
        org.elasticsearch.Version version54 = null;
        org.elasticsearch.Version version55 = settings36.getAsVersion("index.blocks.metadata", version54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings57 = settings36.filter(strPredicate56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData0.diff(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder60.creationDate((long) (short) 100);
        int int63 = builder60.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNull(xContentBuilder52);
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.shadow_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder46.put("index.uuid", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder46.putNull("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        org.elasticsearch.common.unit.TimeValue timeValue17 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue18 = settings15.getAsTime("index.number_of_replicas", timeValue17);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings19);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#", custom1);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.blocks.read", "");
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder52.put("state-", (long) (-1));
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder62 = builder58.put("index.blocks.metadata", (long) (short) 10, byteSizeUnit61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        boolean boolean22 = settings21.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.Settings settings24 = indexSettings23.settings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(settings24);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int15 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version17 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(version17);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.common.logging.ESLogger eSLogger58 = indexSettings57.getlogger();
        int int59 = indexSettings57.getMaxRefreshListeners();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(eSLogger58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1000 + "'", int59 == 1000);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexMetaData0.readFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.put("index.shared_filesystem.recover_on_any_node", "");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = builder48.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.put("index.number_of_replicas", (long) 10);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder56 = builder52.put("index.blocks.write", 10000L, byteSizeUnit55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings15.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(timeValue16);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.Version version63 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = indexSettings57.scopedSettings;
        java.lang.String str65 = indexScopedSettings64.nodeName();
        java.lang.String str66 = indexScopedSettings64.nodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.numberOfReplicas((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long10 = builder4.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        indexScopedSettings14.validate("index.number_of_shards", settings16);
        java.util.function.Predicate<java.lang.String> strPredicate28 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings29 = settings16.filter(strPredicate28);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = settings16.toXContent(xContentBuilder30, params31);
        org.elasticsearch.Version version34 = null;
        org.elasticsearch.Version version35 = settings16.getAsVersion("index.blocks.metadata", version34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings0.dryRun(settings16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        java.util.function.Predicate<java.lang.String> strPredicate38 = indexScopedSettings37.getINDEX_SETTINGS_KEY_PREDICATE();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(params31);
        org.junit.Assert.assertNull(xContentBuilder32);
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertNotNull(strPredicate38);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property4 = indexScopedSettings3.getScope();
        boolean boolean6 = indexScopedSettings3.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting8 = indexScopedSettings3.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean32 = indexScopedSettings3.updateSettings(settings9, builder23, builder30, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings34 = settings9.getByPrefix("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.numberOfReplicas((int) 'a');
        boolean boolean39 = settings9.equals((java.lang.Object) 'a');
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings40);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput42 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + property4 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property4.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.version.minimum_compatible", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        int int59 = indexSettings57.getMaxResultWindow();
        boolean boolean60 = indexSettings57.isTTLPurgeDisabled();
        boolean boolean61 = indexSettings57.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData30.getInitialRecoveryFilters();
        boolean boolean33 = indexMetaData30.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray44 = settings36.getAsArray("active_allocations", strArray43);
        java.lang.String str46 = settings36.toDelimitedString('4');
        indexScopedSettings34.validate("index.number_of_shards", settings36);
        java.util.function.Predicate<java.lang.String> strPredicate48 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings49 = settings36.filter(strPredicate48);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings36.toXContent(xContentBuilder50, params51);
        org.elasticsearch.Version version54 = null;
        org.elasticsearch.Version version55 = settings36.getAsVersion("index.blocks.metadata", version54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings57 = settings36.filter(strPredicate56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData0.diff(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters61 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNull(xContentBuilder52);
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertNull(discoveryNodeFilters61);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray7 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray8 = settings0.getAsArray("active_allocations", strArray7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property13 = indexScopedSettings12.getScope();
        boolean boolean15 = indexScopedSettings12.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting17 = indexScopedSettings12.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings18.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean41 = indexScopedSettings12.updateSettings(settings18, builder32, builder39, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.put("index.number_of_shards", 10L);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder44.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList54);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder44.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings60 = builder44.build();
        java.lang.Boolean boolean63 = settings60.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue65 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue66 = settings60.getAsSize("", sizeValue65);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings60);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting68 = indexSettings67.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = null;
        indexSettings67.flushThresholdSize = byteSizeValue69;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting71 = indexSettings67.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Settings settings72 = indexSettings67.getSettings();
        indexSettings67.setMaxResultWindow((int) (byte) 100);
        boolean boolean75 = indexSettings67.isQueryStringAllowLeadingWildcard();
        java.util.function.Predicate<java.lang.String> strPredicate76 = indexSettings67.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings77 = settings0.filter(strPredicate76);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + property13 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property13.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardSetting17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertEquals("'" + boolean63 + "' != '" + false + "'", boolean63, false);
        org.junit.Assert.assertNull(sizeValue66);
        org.junit.Assert.assertNotNull(intSetting68);
        org.junit.Assert.assertNotNull(booleanSetting71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strPredicate76);
        org.junit.Assert.assertNotNull(settings77);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = builder1.primaryTerm((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings15, streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        org.elasticsearch.common.unit.TimeValue timeValue17 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue18 = settings15.getAsTime("index.number_of_replicas", timeValue17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray27 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray28 = settings20.getAsArray("active_allocations", strArray27);
        java.lang.String[] strArray29 = settings15.getAsArray("index.blocks.metadata", strArray28);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings15.getAsGroups();
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property34 = indexScopedSettings33.getScope();
        boolean boolean36 = indexScopedSettings33.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting38 = indexScopedSettings33.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray46 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray47 = settings39.getAsArray("active_allocations", strArray46);
        java.lang.String str49 = settings39.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings39.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder53 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder57 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean62 = indexScopedSettings33.updateSettings(settings39, builder53, builder60, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings64 = settings39.getByPrefix("index.version.upgraded_string");
        java.lang.Object obj65 = null;
        boolean boolean66 = settings39.equals(obj65);
        java.util.Set<java.lang.String> strSet67 = settings39.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = null;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params71 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = settings69.toXContent(xContentBuilder70, params71);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = settings39.toXContent(xContentBuilder68, params71);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray84 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray85 = settings77.getAsArray("active_allocations", strArray84);
        java.lang.String str87 = settings77.toDelimitedString('4');
        indexScopedSettings75.validate("index.number_of_shards", settings77);
        java.util.function.Predicate<java.lang.String> strPredicate89 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings90 = settings77.filter(strPredicate89);
        java.lang.String[] strArray92 = settings77.getAsArray("index.version.created_string");
        java.lang.String[] strArray93 = settings39.getAsArray("index.version.upgraded", strArray92);
        java.lang.String[] strArray94 = settings15.getAsArray("index.version.created", strArray93);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + property34 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property34.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(wildcardSetting38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(params71);
        org.junit.Assert.assertNull(xContentBuilder72);
        org.junit.Assert.assertNull(xContentBuilder73);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strPredicate89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue6 = settings2.getAsRatio("hi!", "index.blocks.write");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.blocks.write]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        boolean boolean4 = indexMetaData1.isSameUUID("index.version.upgraded_string");
        java.lang.String str5 = indexMetaData1.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        boolean boolean8 = indexMetaData1.isSameUUID("hi!");
        org.apache.lucene.util.Version version9 = indexMetaData1.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData1.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData1.getMappings();
        int int14 = indexMetaData1.getNumberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet16 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(0, indexMetaData1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (0) must be greater than the shard id: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "_na_" + "'", str5, "_na_");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData0.getCustoms();
        int int54 = indexMetaData0.getNumberOfShards();
        long long55 = indexMetaData0.getCreationDate();
        int int56 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput57 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        int int65 = indexSettings57.maxRefreshListeners;
        indexSettings57.maxRefreshListeners = '4';
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.getTranslogSyncInterval();
        boolean boolean69 = indexSettings57.warmerEnabled;
        int int70 = indexSettings57.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1000 + "'", int65 == 1000);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10000 + "'", int70 == 10000);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.putMapping(mappingMetaData32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.state(state9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder5.state(state9);
        int int12 = builder11.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig66 = indexSettings57.mergePolicyConfig;
        boolean boolean67 = indexSettings57.isTTLPurgeDisabled();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig68 = indexSettings57.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(mergePolicyConfig66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig68);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putMapping("hi!", "100.0");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.settings.Settings settings53 = null; // flaky: indexSettings52.getNodeSettings();
        boolean boolean54 = false; // flaky: indexSettings52.hasCustomDataPath();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig55 = null; // flaky: indexSettings52.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting56 = null; // flaky: indexSettings52.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(mergePolicyConfig55);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting56);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        indexSettings57.setMaxResultWindow(10);
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings57.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(timeValue62);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        org.elasticsearch.common.unit.TimeValue timeValue55 = null; // flaky: indexSettings52.getTranslogSyncInterval();
        boolean boolean56 = false; // flaky: indexSettings52.getqueryStringLenient();
        long long57 = 0L; // flaky: indexSettings52.getGcDeletesInMillis();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig58 = null; // flaky: indexSettings52.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
// flaky:         org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig58);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings5.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray18 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray19 = settings11.getAsArray("active_allocations", strArray18);
        java.lang.String str21 = settings11.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings11.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean34 = indexScopedSettings5.updateSettings(settings11, builder25, builder32, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder25.put("index.number_of_shards", 10L);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder37.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray59 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray60 = settings52.getAsArray("active_allocations", strArray59);
        java.lang.String str62 = settings52.toDelimitedString('4');
        indexScopedSettings50.validate("index.number_of_shards", settings52);
        java.util.function.Predicate<java.lang.String> strPredicate64 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings65 = settings52.filter(strPredicate64);
        org.elasticsearch.common.unit.TimeValue timeValue67 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue68 = settings65.getAsTime("index.number_of_replicas", timeValue67);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray77 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray78 = settings70.getAsArray("active_allocations", strArray77);
        java.lang.String[] strArray79 = settings65.getAsArray("index.blocks.metadata", strArray78);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder49.put(settings65);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap82 = settings65.getAsGroups(false);
        java.lang.String str84 = settings65.toDelimitedString('4');
        java.lang.String str87 = settings65.get("index.version.created", "primary_terms");
        org.elasticsearch.index.IndexSettings indexSettings88 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings65);
        boolean boolean89 = indexSettings88.isShadowReplicaIndex;
        org.elasticsearch.index.translog.Translog.Durability durability90 = indexSettings88.getTranslogDurability();
        indexSettings88.warmerEnabled = true;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting93 = indexSettings88.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardSetting10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strPredicate64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "primary_terms" + "'", str87, "primary_terms");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + durability90 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability90.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(durabilitySetting93);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher63 = indexSettings57.getParseFieldMatcher();
        boolean boolean64 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(parseFieldMatcher63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(timeValueSetting65);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("hi!", (int) '4');
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder47.loadFromSource("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder52.put("index.data_path", "primary_terms");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder59 = builder55.put("index.creation_date", (long) 10, byteSizeUnit58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.putNull("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem", (double) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.version.minimum_compatible", false);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder23.loadFromSource("index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder23.put("index.data_path", 0L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        indexScopedSettings11.validate("index.number_of_shards", settings13);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.common.settings.Settings settings28 = settings13.getByPrefix("index.priority");
        java.lang.String[] strArray30 = null;
        java.lang.String[] strArray32 = settings28.getAsArray("archived.", strArray30, (java.lang.Boolean) false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings28.getGroups("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings28.getGroups("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", true);
        java.lang.String[] strArray40 = null;
        java.lang.String[] strArray42 = settings28.getAsArray("index.number_of_shards", strArray40, (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNull(strArray32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(strArray42);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.putNull("index.creation_date_string");
        java.lang.String str22 = builder20.get("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder20.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder20.loadFromSource("index.version.upgraded");
        java.io.InputStream inputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder28 = builder20.loadFromStream("index.number_of_shards", inputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int29 = indexSettings28.getMaxRescoreWindow();
        boolean boolean30 = indexSettings28.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue31 = indexSettings28.syncInterval;
        indexSettings28.gcDeletesInMillis = 10000;
        boolean boolean34 = indexSettings28.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeValue31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.put("index.blocks.read", (long) 100, byteSizeUnit3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.loadFromSource("");
        org.elasticsearch.common.settings.Settings settings12 = builder9.build();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData14.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData14.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property18 = indexScopedSettings17.getScope();
        boolean boolean20 = indexScopedSettings17.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting22 = indexScopedSettings17.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray31 = settings23.getAsArray("active_allocations", strArray30);
        java.lang.String str33 = settings23.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings23.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean46 = indexScopedSettings17.updateSettings(settings23, builder37, builder44, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings48 = settings23.getByPrefix("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.numberOfReplicas((int) 'a');
        boolean boolean53 = settings23.equals((java.lang.Object) 'a');
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings54);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property58 = indexScopedSettings57.getScope();
        boolean boolean60 = indexScopedSettings57.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting62 = indexScopedSettings57.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray70 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray71 = settings63.getAsArray("active_allocations", strArray70);
        java.lang.String str73 = settings63.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings63);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings63.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder77 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder77.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder81 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder81.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean86 = indexScopedSettings57.updateSettings(settings63, builder77, builder84, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings88 = settings63.getByPrefix("index.version.upgraded_string");
        java.lang.Object obj89 = null;
        boolean boolean90 = settings63.equals(obj89);
        java.util.Set<java.lang.String> strSet91 = settings63.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder92 = null;
        org.elasticsearch.common.settings.Settings settings93 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params95 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder96 = settings93.toXContent(xContentBuilder94, params95);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder97 = settings63.toXContent(xContentBuilder92, params95);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder98 = settings54.toXContent(xContentBuilder56, params95);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder99 = settings12.toXContent(xContentBuilder13, params95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + property18 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property18.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + property58 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property58.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(wildcardSetting62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(params95);
        org.junit.Assert.assertNull(xContentBuilder96);
        org.junit.Assert.assertNull(xContentBuilder97);
        org.junit.Assert.assertNull(xContentBuilder98);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("", (float) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property14 = indexScopedSettings13.getScope();
        boolean boolean16 = indexScopedSettings13.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting18 = indexScopedSettings13.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray26 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray27 = settings19.getAsArray("active_allocations", strArray26);
        java.lang.String str29 = settings19.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings19.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder33 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean42 = indexScopedSettings13.updateSettings(settings19, builder33, builder40, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder33.put("index.number_of_shards", 10L);
        java.lang.String[] strArray54 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder45.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList55);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder45.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings61 = builder45.build();
        java.lang.Boolean boolean64 = settings61.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue66 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue67 = settings61.getAsSize("", sizeValue66);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings61);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting69 = indexSettings68.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue70 = null;
        indexSettings68.flushThresholdSize = byteSizeValue70;
        org.elasticsearch.index.translog.Translog.Durability durability72 = indexSettings68.getTranslogDurability();
        boolean boolean73 = indexSettings68.hasCustomDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting74 = indexSettings68.getDEFAULT_FIELD_SETTING();
        int int75 = indexSettings68.maxResultWindow;
        org.elasticsearch.Version version76 = indexSettings68.getversion();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder3.put("archived.", version76);
        java.lang.Class<?> wildcardClass78 = builder77.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + property14 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property14.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertEquals("'" + boolean64 + "' != '" + false + "'", boolean64, false);
        org.junit.Assert.assertNull(sizeValue67);
        org.junit.Assert.assertNotNull(intSetting69);
        org.junit.Assert.assertTrue("'" + durability72 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability72.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSetting74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
        org.junit.Assert.assertNotNull(version76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("state-", (double) (byte) -1);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder50.loadFromSource("index.blocks.read");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder50.loadFromSource("index.blocks.read_only");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder58 = builder54.put("archived.", (long) 0, byteSizeUnit57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.shadow_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder49.put("100.0", (long) (byte) 0);
        java.io.InputStream inputStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder55 = builder49.loadFromStream("state-", inputStream54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.Version version14 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(version14);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder19.replacePropertyPlaceholders();
        org.elasticsearch.Version version22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.version.created_string", version22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.state(state5);
        int int7 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putAlias(aliasMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.logger;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings57.refreshInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(booleanSetting64);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.blocks.read", custom1);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray31 = settings23.getAsArray("active_allocations", strArray30);
        java.lang.String str33 = settings23.toDelimitedString('4');
        indexScopedSettings21.validate("index.number_of_shards", settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings23.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray45 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray46 = settings38.getAsArray("active_allocations", strArray45);
        java.lang.String str48 = settings38.toDelimitedString('4');
        indexScopedSettings36.validate("index.number_of_shards", settings38);
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings51 = settings38.filter(strPredicate50);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction52 = null;
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder20.putProperties(strMap35, strPredicate50, strFunction52);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder53.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings55 = builder53.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        int int5 = builder4.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.removeAlias("index.number_of_shards");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet14 = indexScopedSettings8.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_SETTING;
        java.lang.Boolean boolean16 = indexScopedSettings8.get(booleanSetting15);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray24 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray25 = settings17.getAsArray("active_allocations", strArray24);
        java.lang.String str27 = settings17.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate34 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass35 = strPredicate34.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder29.put("index.creation_date_string", (java.lang.Class) wildcardClass35);
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate43 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass44 = strPredicate43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder38.put("index.creation_date_string", (java.lang.Class) wildcardClass44);
        boolean boolean47 = indexScopedSettings8.updateDynamicSettings(settings17, builder36, builder38, "_na_");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        boolean boolean49 = settings17.isEmpty();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(wildcardSettingSet14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        indexSettings57.setMaxRefreshListeners((int) 'a');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        indexScopedSettings2.validate("index.number_of_shards", settings4);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings16.getAsTime("hi!", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder22.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder1.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder1.index("index.blocks.write");
        int int29 = builder28.numberOfReplicas();
        int int30 = builder28.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet6 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer8 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(booleanSetting7, booleanConsumer8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.number_of_shards", 10L);
        java.lang.String str44 = builder42.remove("");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray52 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray53 = settings45.getAsArray("active_allocations", strArray52);
        java.lang.String str55 = settings45.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings45);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings45);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = settings57.getAsBytesSize("index.creation_date", byteSizeValue59);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder42.put(settings57);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params64 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings62.toXContent(xContentBuilder63, params64);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings62.getGroups("index.shared_filesystem", true);
        java.lang.Object obj69 = null;
        boolean boolean70 = settings62.equals(obj69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings0.diff(settings57, settings62);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting73 = indexScopedSettings0.get("index.blocks.read");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(wildcardSettingSet6);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(params64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(wildcardSetting73);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings settings47 = builder32.build();
        java.lang.String[] strArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.extendArray("index.shadow_replicas", strArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder35.put("index.auto_expand_replicas", false);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray48 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray49 = settings41.getAsArray("active_allocations", strArray48);
        java.lang.String str51 = settings41.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue56 = settings41.getAsBytesSize("", byteSizeValue55);
        boolean boolean57 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings41);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = settings41.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder35.put(strMap58);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder63 = builder35.put("", 1L, byteSizeUnit62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNull(byteSizeValue56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        java.lang.String str63 = indexSettings57.getUUID();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting64 = indexSettings57.getDEFAULT_FIELD_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy65 = indexSettings57.getMergePolicy();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_na_" + "'", str63, "_na_");
        org.junit.Assert.assertNotNull(strSetting64);
        org.junit.Assert.assertNotNull(mergePolicy65);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property37 = indexScopedSettings36.getScope();
        boolean boolean39 = indexScopedSettings36.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting41 = indexScopedSettings36.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray49 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray50 = settings42.getAsArray("active_allocations", strArray49);
        java.lang.String str52 = settings42.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings42.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean65 = indexScopedSettings36.updateSettings(settings42, builder56, builder63, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder56.put("index.number_of_shards", 10L);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder68.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder20.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList78);
        java.util.Map<java.lang.String, java.lang.String> strMap82 = builder81.internalMap();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder84 = builder81.put(objDictionary83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + property37 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property37.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardSetting41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder1.mapping("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.index("index.shared_filesystem");
        long long10 = builder1.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.putNull("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings settings12 = builder8.build();
        java.lang.Boolean boolean15 = settings12.getAsBoolean("index.version.upgraded_string", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + true + "'", boolean15, true);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder47.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder47.put("index.creation_date", (double) (byte) -1);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings60.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings60.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        int int64 = indexMetaData62.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap65 = indexMetaData62.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap65);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.auto_expand_replicas");
        int int14 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.primaryTerm((int) (byte) -1, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.index.translog.Translog.Durability durability58 = null;
        indexSettings57.setdurability(durability58);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder6.replacePropertyPlaceholders();
        java.lang.String str9 = builder7.remove("_all");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isIndexUsingShadowReplicas();
        indexSettings57.warmerEnabled = true;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.getFlushThresholdSize();
        org.elasticsearch.common.settings.Settings settings67 = indexSettings57.settings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(byteSizeValue66);
        org.junit.Assert.assertNotNull(settings67);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray54 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray55 = settings47.getAsArray("active_allocations", strArray54);
        java.lang.String str57 = settings47.toDelimitedString('4');
        indexScopedSettings45.validate("index.number_of_shards", settings47);
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings60 = settings47.filter(strPredicate59);
        org.elasticsearch.common.unit.TimeValue timeValue62 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue63 = settings60.getAsTime("index.number_of_replicas", timeValue62);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray72 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray73 = settings65.getAsArray("active_allocations", strArray72);
        java.lang.String[] strArray74 = settings60.getAsArray("index.blocks.metadata", strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder44.put(settings60);
        java.lang.String str78 = settings60.get("index.shared_filesystem", "index.version.minimum_compatible");
        boolean boolean79 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings60);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "index.version.minimum_compatible" + "'", str78, "index.version.minimum_compatible");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet66 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        int int67 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putMapping(mappingMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.creation_date_string");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.loadFromSource("10.0");
        java.nio.file.Path path50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder51 = builder49.loadFromPath(path50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        java.lang.String str55 = null; // flaky: indexSettings52.customDataPath();
// flaky:         indexSettings52.maxRefreshListeners = (short) 1;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings57.getNodeSettings();
        indexSettings57.maxRefreshListeners = 0;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(settings60);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder37.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("", "index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder9.settings(builder41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder9.setRoutingNumShards(32);
        java.lang.String str48 = builder9.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder9.index("_na_");
        int int51 = builder9.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder41.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder41.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder55.normalizePrefix("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder20.settings(builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder20.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder59.putAlias(aliasMetaData60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.lang.String str62 = indexSettings57.defaultField;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getALLOW_UNMAPPED();
        indexSettings57.maxRefreshListeners = (short) 10;
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.logger;
        org.elasticsearch.common.unit.TimeValue timeValue67 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = indexSettings57.getScopedSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "_all" + "'", str62, "_all");
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNotNull(eSLogger66);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        int int62 = indexSettings57.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.primaryTerm(32, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder18.put("index.shared_filesystem", "hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData25.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData25.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData25.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property30 = indexScopedSettings29.getScope();
        boolean boolean32 = indexScopedSettings29.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting34 = indexScopedSettings29.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property36 = indexScopedSettings35.getScope();
        boolean boolean38 = indexScopedSettings35.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting40 = indexScopedSettings35.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray48 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray49 = settings41.getAsArray("active_allocations", strArray48);
        java.lang.String str51 = settings41.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings41.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder55 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder59 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder59.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean64 = indexScopedSettings35.updateSettings(settings41, builder55, builder62, "index.shared_filesystem");
        java.lang.Object obj65 = null;
        boolean boolean66 = settings41.equals(obj65);
        org.elasticsearch.common.settings.Settings settings67 = indexScopedSettings29.dryRun(settings41);
        org.elasticsearch.common.settings.Settings settings69 = settings67.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate70 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property72 = indexScopedSettings71.getScope();
        boolean boolean74 = indexScopedSettings71.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting76 = indexScopedSettings71.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings77 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData25, settings69, strPredicate70, indexScopedSettings71);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap78 = indexMetaData25.getCustoms();
        int int79 = indexMetaData25.getNumberOfShards();
        org.elasticsearch.Version version80 = indexMetaData25.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder23.put("_na_", version80);
        java.io.InputStream inputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder84 = builder23.loadFromStream("index.shadow_replicas", inputStream83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + property30 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property30.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(wildcardSetting34);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + property36 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property36.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(wildcardSetting40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(indexScopedSettings71);
        org.junit.Assert.assertTrue("'" + property72 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property72.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(wildcardSetting76);
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(version80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        java.lang.String str58 = indexSettings57.nodeName;
        boolean boolean59 = indexSettings57.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = indexSettings57.scopedSettings;
        boolean boolean59 = indexSettings57.getisShadowReplicaIndex();
        boolean boolean60 = indexSettings57.queryStringAllowLeadingWildcard;
        int int61 = indexSettings57.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.number_of_replicas", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.removeAllAliases();
        java.lang.String str12 = builder6.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate21 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass22 = strPredicate21.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder16.put("index.creation_date_string", (java.lang.Class) wildcardClass22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder6.settings(builder16);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte27 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder6.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.state(state26);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.putMapping("", "index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte10 = state9.id();
        byte byte11 = state9.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.state(state9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder1.removeAlias("index.version.upgraded");
        int int15 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder1.putAlias(aliasMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 1 + "'", byte10 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 1 + "'", byte11 == (byte) 1);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData64.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData64.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        int int72 = indexMetaData64.getRoutingNumShards();
        boolean boolean73 = indexSettings57.updateIndexMetaData(indexMetaData64);
        int int74 = indexSettings57.numberOfShards;
        boolean boolean75 = indexSettings57.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("100.0", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.numberOfReplicas(0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        org.elasticsearch.Version version11 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(version11);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        indexScopedSettings14.validate("index.number_of_shards", settings16);
        java.util.function.Predicate<java.lang.String> strPredicate28 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings29 = settings16.filter(strPredicate28);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = settings16.toXContent(xContentBuilder30, params31);
        org.elasticsearch.Version version34 = null;
        org.elasticsearch.Version version35 = settings16.getAsVersion("index.blocks.metadata", version34);
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings0.dryRun(settings16);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting38 = indexScopedSettings0.get("archived.");
        java.lang.String str39 = indexScopedSettings0.nodeName();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(params31);
        org.junit.Assert.assertNull(xContentBuilder32);
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNull(wildcardSetting38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder63.putCustom("index.version.minimum_compatible", custom65);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String str34 = builder32.remove("");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.normalizePrefix("10.0");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexMetaData0.readFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("10.0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.version((long) ' ');
        int int8 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        long long63 = indexSettings57.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 60000L + "'", long63 == 60000L);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        indexScopedSettings10.validate("index.number_of_shards", settings12);
        java.util.function.Predicate<java.lang.String> strPredicate24 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings25 = settings12.filter(strPredicate24);
        org.elasticsearch.common.unit.TimeValue timeValue27 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue28 = settings25.getAsTime("index.number_of_replicas", timeValue27);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray37 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray38 = settings30.getAsArray("active_allocations", strArray37);
        java.lang.String[] strArray39 = settings25.getAsArray("index.blocks.metadata", strArray38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder9.settings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings25);
        org.elasticsearch.index.Index index42 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(index42);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings33 = settings8.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings33.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.putCustom("_na_", custom37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.setRoutingNumShards((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder38.primaryTerm(0, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder38.build();
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("index.priority");
        java.lang.String str58 = settings56.toDelimitedString(' ');
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting60 = indexSettings59.getDEFAULT_FIELD_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSetting60);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String str34 = builder32.remove("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray42 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray43 = settings35.getAsArray("active_allocations", strArray42);
        java.lang.String str45 = settings35.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue49 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = settings47.getAsBytesSize("index.creation_date", byteSizeValue49);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder32.put(settings47);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet53 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass54 = wildcardSettingSet53.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder32.put("index.number_of_shards", (java.lang.Class) wildcardClass54);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder32.put("index.shared_filesystem.recover_on_any_node", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("state-", (long) (-1));
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNull(byteSizeValue50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(wildcardSettingSet53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.metadata");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putMapping("index.blocks.read", "index.priority");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting65 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        int int66 = indexSettings57.getNumberOfReplicas();
        java.lang.String str67 = indexSettings57.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(booleanSetting65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder47.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder47.put("active_allocations", false);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = builder47.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder47.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder47.normalizePrefix("index.shared_filesystem");
        java.io.InputStream inputStream57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder58 = builder55.loadFromStream("index.blocks.read", inputStream57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        org.elasticsearch.Version version63 = indexSettings57.version;
        org.elasticsearch.Version version64 = indexSettings57.getversion();
        java.util.function.Predicate<java.lang.String> strPredicate65 = indexSettings57.indexNameMatcher;
        boolean boolean66 = indexSettings57.hasCustomDataPath();
        int int67 = indexSettings57.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(version64);
        org.junit.Assert.assertNotNull(strPredicate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData58.getInitialRecoveryFilters();
        int int60 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.index.Index index61 = indexMetaData58.getMergeSourceIndex();
        int int62 = indexMetaData58.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff63 = indexMetaData0.diff(indexMetaData58);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap64 = indexMetaData58.getActiveAllocationIds();
        org.elasticsearch.Version version65 = indexMetaData58.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(index61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff63);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap64);
        org.junit.Assert.assertNotNull(version65);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getDEFAULT_GC_DELETES();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        boolean boolean60 = indexSettings57.warmerEnabled;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting61 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings57.getDEFAULT_GC_DELETES();
        boolean boolean63 = indexSettings57.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(intSetting61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder3.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.numberOfShards((int) (byte) 100);
        int int10 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = builder3.mapping("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder3.putAlias(aliasMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(mappingMetaData12);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder1.loadFromSource("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = settings6.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        java.lang.String str20 = indexScopedSettings19.nodeName();
        java.util.function.Predicate<java.lang.String> strPredicate21 = indexScopedSettings19.getINDEX_SETTINGS_KEY_PREDICATE();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction22 = null;
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder3.putProperties(strMap18, strPredicate21, strFunction22);
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder3.put("index.number_of_shards", false);
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder3.normalizePrefix("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        long long61 = indexMetaData60.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters62 = indexMetaData60.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters62);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.Version version63 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = indexSettings57.scopedSettings;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params67 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = settings65.toXContent(xContentBuilder66, params67);
        boolean boolean69 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings65);
        boolean boolean70 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings65);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters72 = indexMetaData71.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData71.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings76 = indexScopedSettings64.copy(settings65, indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(params67);
        org.junit.Assert.assertNull(xContentBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNull(discoveryNodeFilters72);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(indexScopedSettings76);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings37 = settings12.getByPrefix("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder5.settings(settings12);
        long long39 = builder38.version();
        java.lang.String str40 = builder38.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index.creation_date" + "'", str40, "index.creation_date");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.Version version60 = indexSettings57.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(version60);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig63 = indexSettings57.mergePolicyConfig;
        java.lang.String str64 = indexSettings57.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(100L);
        long long7 = builder4.version();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate(100L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putMapping("index.version.created_string", "index.version.upgraded_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getALLOW_UNMAPPED();
        long long67 = indexSettings57.gcDeletesInMillis;
        int int68 = indexSettings57.getNumberOfReplicas();
        boolean boolean69 = indexSettings57.getwarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting70 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(timeValueSetting70);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        boolean boolean63 = indexSettings57.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting65 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(byteSizeValueSetting65);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        boolean boolean60 = indexSettings57.warmerEnabled;
        boolean boolean61 = indexSettings57.queryStringAllowLeadingWildcard;
        org.apache.lucene.index.MergePolicy mergePolicy62 = indexSettings57.getMergePolicy();
        indexSettings57.setEnableWarmer(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(mergePolicy62);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings63);
        java.util.Set<java.lang.String> strSet65 = settings64.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strSet65);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.indexMetaData;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting63 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version64 = indexSettings57.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(booleanSetting63);
        org.junit.Assert.assertNotNull(version64);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        boolean boolean10 = indexMetaData0.isSameUUID("index.version.upgraded");
        int int11 = indexMetaData0.getRoutingFactor();
        long long12 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getDEFAULT_GC_DELETES();
        indexSettings57.setTTLPurgeDisabled(false);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap68 = indexMetaData64.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData71 = indexMetaData64.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.index.Index index72 = indexMetaData64.getMergeSourceIndex();
        indexSettings57.indexMetaData = indexMetaData64;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = indexSettings57.getFlushThresholdSize();
        boolean boolean75 = indexSettings57.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertNotNull(strImmutableOpenMap68);
        org.junit.Assert.assertNull(mappingMetaData71);
        org.junit.Assert.assertNull(index72);
        org.junit.Assert.assertNotNull(byteSizeValue74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.settings.Settings settings53 = null; // flaky: indexSettings52.getNodeSettings();
        boolean boolean54 = false; // flaky: indexSettings52.hasCustomDataPath();
        int int55 = 0; // flaky: indexSettings52.getNumberOfReplicas();
        boolean boolean56 = false; // flaky: indexSettings52.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean65 = indexSettings57.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(booleanSetting64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings52.refreshInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting54 = null; // flaky: indexSettings52.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = null; // flaky: indexSettings52.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting54);
// flaky:         org.junit.Assert.assertNotNull(byteSizeValue55);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("10.0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        int int4 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.index("index.uuid");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.putMapping(mappingMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        java.lang.String[] strArray62 = new java.lang.String[] { "active_allocations", "index.shared_filesystem", "index.uuid", "", "index.uuid", "index.version.created", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index.shared_filesystem", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder48.putArray("index.priority", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder48.put("index.blocks.read", 1000);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder68.replacePropertyPlaceholders();
        java.util.concurrent.TimeUnit timeUnit72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder73 = builder68.put("index.creation_date", 0L, timeUnit72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData61.mapping("index.version.created_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData65);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.primaryTerm((int) (byte) 0, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData61.getState();
        java.lang.String str64 = indexMetaData61.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        int int66 = indexMetaData61.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_na_" + "'", str64, "_na_");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder46.put("index.data_path", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder46.loadFromSource("index.version.created");
        java.io.InputStream inputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder54 = builder46.loadFromStream("index.version.upgraded_string", inputStream53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        int int62 = indexSettings57.getMaxRescoreWindow();
        java.lang.String str63 = indexSettings57.defaultField;
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig65 = indexSettings57.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig65);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.internalMap();
        java.util.concurrent.TimeUnit timeUnit36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder37 = builder32.put("index.", (long) (byte) 10, timeUnit36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.creationDate((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putMapping("index.number_of_replicas", "index.data_path");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.version(0L);
        int int11 = builder10.getRoutingNumShards();
        int int12 = builder10.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting65 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher66 = indexSettings57.getParseFieldMatcher();
        indexSettings57.setTTLPurgeDisabled(false);
        java.lang.String str69 = indexSettings57.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intSetting65);
        org.junit.Assert.assertNotNull(parseFieldMatcher66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "_na_" + "'", str69, "_na_");
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings52.refreshInterval;
// flaky:         indexSettings52.maxResultWindow = (short) -1;
        org.elasticsearch.common.unit.TimeValue timeValue56 = null; // flaky: indexSettings52.refreshInterval;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = null; // flaky: indexSettings52.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertNotNull(timeValue56);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings57);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.apache.lucene.util.Version version20 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings52 = settings27.getByPrefix("index.version.upgraded_string");
        java.lang.String[] strArray54 = null;
        java.lang.String[] strArray56 = settings27.getAsArray("", strArray54, (java.lang.Boolean) false);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings27);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig58 = indexSettings57.getMergeSchedulerConfig();
        indexSettings57.maxResultWindow = 'a';
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig58);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.common.unit.TimeValue timeValue54 = null; // flaky: indexSettings52.syncInterval;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue55 = null;
// flaky:         indexSettings52.flushThresholdSize = byteSizeValue55;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue54);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.Version version63 = indexSettings57.getIndexVersionCreated();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue64 = indexSettings57.getFlushThresholdSize();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting65 = indexSettings57.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNull(byteSizeValue64);
        org.junit.Assert.assertNotNull(booleanSetting65);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray54 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray55 = settings47.getAsArray("active_allocations", strArray54);
        java.lang.String str57 = settings47.toDelimitedString('4');
        indexScopedSettings45.validate("index.number_of_shards", settings47);
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings60 = settings47.filter(strPredicate59);
        org.elasticsearch.common.unit.TimeValue timeValue62 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue63 = settings60.getAsTime("index.number_of_replicas", timeValue62);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray72 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray73 = settings65.getAsArray("active_allocations", strArray72);
        java.lang.String[] strArray74 = settings60.getAsArray("index.blocks.metadata", strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder44.put(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings60.getAsGroups(false);
        java.lang.String str79 = settings60.toDelimitedString('4');
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings60.getGroups("state-");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue84 = settings60.getAsRatio("index.version.created", "index.creation_date_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.creation_date_string]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strMap81);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.putNull("index.");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder18.loadFromSource("index.version.created");
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.loadFromStream("index.shadow_replicas", inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder40.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = builder40.build();
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings56.getAsSize("", sizeValue61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings63.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertNotNull(booleanSetting64);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        boolean boolean63 = indexSettings57.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.getIndexMetaData();
        int int65 = indexMetaData64.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting63 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        boolean boolean64 = indexSettings57.isOnSharedFilesystem();
        indexSettings57.TTLPurgeDisabled = true;
        boolean boolean67 = indexSettings57.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(timeValueSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        java.lang.String str61 = indexSettings60.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "_na_" + "'", str61, "_na_");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap64 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap64);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.common.unit.TimeValue timeValue54 = null; // flaky: indexSettings52.syncInterval;
        boolean boolean55 = false; // flaky: indexSettings52.queryStringAnalyzeWildcard;
        org.elasticsearch.common.logging.ESLogger eSLogger56 = null; // flaky: indexSettings52.getlogger();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig57 = null; // flaky: indexSettings52.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertNotNull(eSLogger56);
// flaky:         org.junit.Assert.assertNotNull(mergeSchedulerConfig57);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", 1000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.put("index.uuid", (long) 'a', byteSizeUnit47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte13 = state12.id();
        byte byte14 = state12.id();
        byte byte15 = state12.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder8.state(state12);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 1 + "'", byte13 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 1 + "'", byte14 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 1 + "'", byte15 == (byte) 1);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.scopedSettings;
        boolean boolean64 = indexSettings57.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(timeValue65);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData8.getInitialRecoveryFilters();
        boolean boolean11 = indexMetaData8.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData8.getState();
        byte byte14 = state13.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder7.state(state13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder1.state(state13);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("", custom3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.put("index.creation_date_string", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(builder11);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray30 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder21.extendArray("index.shared_filesystem.recover_on_any_node", strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.settings(settings34);
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder31.put(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder19.settings(settings34);
        int int38 = builder19.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("100.0", (int) (short) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray61 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray62 = settings54.getAsArray("active_allocations", strArray61);
        java.lang.String str64 = settings54.toDelimitedString('4');
        indexScopedSettings52.validate("index.number_of_shards", settings54);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = settings54.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder48.put(strMap66);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder71 = builder67.put("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#", (long) (short) -1, byteSizeUnit70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        java.util.Set<java.lang.String> strSet61 = settings54.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder64.settings(settings65);
        org.elasticsearch.Version version68 = null;
        org.elasticsearch.Version version69 = settings65.getAsVersion("", version68);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings65.getAsGroups(true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = null;
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder74 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray84 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray85 = settings77.getAsArray("active_allocations", strArray84);
        java.lang.String str87 = settings77.toDelimitedString('4');
        indexScopedSettings75.validate("index.number_of_shards", settings77);
        java.util.function.Predicate<java.lang.String> strPredicate89 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings90 = settings77.filter(strPredicate89);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder91 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params92 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder93 = settings77.toXContent(xContentBuilder91, params92);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = settings73.toXContent(xContentBuilder74, params92);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder95 = settings65.toXContent(xContentBuilder72, params92);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder96 = settings54.toXContent(xContentBuilder62, params92);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(version69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strPredicate89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(params92);
        org.junit.Assert.assertNull(xContentBuilder93);
        org.junit.Assert.assertNull(xContentBuilder94);
        org.junit.Assert.assertNull(xContentBuilder95);
        org.junit.Assert.assertNull(xContentBuilder96);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting65 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(intSetting65);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        boolean boolean4 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
        boolean boolean6 = settings0.equals((java.lang.Object) (short) 10);
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings0);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) 100);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        indexScopedSettings2.validate("index.number_of_shards", settings4);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        org.elasticsearch.common.unit.TimeValue timeValue18 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue19 = settings16.getAsTime("hi!", timeValue18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder22.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder1.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder1.index("index.blocks.write");
        int int29 = builder28.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.index("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.index("");
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings60.getTranslogDurability();
        org.elasticsearch.common.settings.Settings settings62 = indexSettings60.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings62);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings33 = settings8.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings33.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.putCustom("_na_", custom37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder35.removeAlias("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder35.version(10L);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        indexSettings57.warmerEnabled = true;
        indexSettings57.maxResultWindow = 10000;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        java.lang.String str20 = indexSettings19.getUUID();
        org.elasticsearch.Version version21 = indexSettings19.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(version21);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.version(0L);
        long long11 = builder10.version();
        int int12 = builder10.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings9);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property22 = indexScopedSettings21.getScope();
        boolean boolean24 = indexScopedSettings21.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting26 = indexScopedSettings21.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray34 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray35 = settings27.getAsArray("active_allocations", strArray34);
        java.lang.String str37 = settings27.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings27.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean50 = indexScopedSettings21.updateSettings(settings27, builder41, builder48, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder41.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder41.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder55.normalizePrefix("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder20.settings(builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder20.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder59.putAlias(builder60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + property22 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property22.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardSetting26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap53 = indexMetaData0.getCustoms();
        int int54 = indexMetaData0.getNumberOfShards();
        boolean boolean56 = indexMetaData0.isSameUUID("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder32.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap53 = builder32.internalMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strMap53);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData1.getAliases();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData1.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData1.getAliases();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet9 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(32, indexMetaData1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (32) must be greater than the shard id: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings10.toXContent(xContentBuilder11, params12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        indexScopedSettings5.validate("index.shared_filesystem.recover_on_any_node", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        indexScopedSettings16.validate("index.number_of_shards", settings18);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.common.settings.Settings settings33 = settings18.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings18);
        java.lang.String str35 = indexSettings34.getUUID();
        indexSettings34.setTTLPurgeDisabled(false);
        boolean boolean38 = indexSettings34.getqueryStringLenient();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting39 = indexSettings34.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertNull(xContentBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "_na_" + "'", str35, "_na_");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeValueSetting39);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = settings10.toXContent(xContentBuilder11, params12);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        indexScopedSettings5.validate("index.shared_filesystem.recover_on_any_node", settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray25 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray26 = settings18.getAsArray("active_allocations", strArray25);
        java.lang.String str28 = settings18.toDelimitedString('4');
        indexScopedSettings16.validate("index.number_of_shards", settings18);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.common.settings.Settings settings33 = settings18.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings18);
        java.lang.String str35 = indexSettings34.getUUID();
        indexSettings34.setTTLPurgeDisabled(false);
        boolean boolean38 = indexSettings34.getqueryStringLenient();
        boolean boolean39 = indexSettings34.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertNull(xContentBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "_na_" + "'", str35, "_na_");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property32 = indexScopedSettings31.getScope();
        boolean boolean34 = indexScopedSettings31.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = settings36.toXContent(xContentBuilder37, params38);
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings36);
        indexScopedSettings31.validate("index.shared_filesystem.recover_on_any_node", settings36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray51 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray52 = settings44.getAsArray("active_allocations", strArray51);
        java.lang.String str54 = settings44.toDelimitedString('4');
        indexScopedSettings42.validate("index.number_of_shards", settings44);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings44);
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings44);
        boolean boolean58 = settings44.isEmpty();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray67 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray68 = settings60.getAsArray("active_allocations", strArray67);
        java.lang.String[] strArray69 = settings44.getAsArray("index.shared_filesystem", strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder20.extendArray("hi!", strArray69);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("index.creation_date_string", (int) (short) 1);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder75 = builder70.put(objDictionary74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + property32 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property32.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(params38);
        org.junit.Assert.assertNull(xContentBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings57.getTranslogDurability();
        org.elasticsearch.Version version64 = indexSettings57.getversion();
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(version64);
        org.junit.Assert.assertNotNull(timeValue65);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.state(state3);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder4.settings(settings7);
        long long21 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.setRoutingNumShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder20.removeAlias("primary_terms");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.blocks.read_only");
        // The following exception was thrown during execution in test generation
        try {
            long long7 = builder5.primaryTerm(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        int int59 = indexSettings57.getMaxResultWindow();
        boolean boolean60 = indexSettings57.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.upgraded");
        long long2 = builder1.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        java.lang.String str13 = settings5.get("index.version.upgraded_string", "index.creation_date");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings5.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData16.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings18.getScope();
        boolean boolean21 = indexScopedSettings18.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting23 = indexScopedSettings18.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray31 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray32 = settings24.getAsArray("active_allocations", strArray31);
        java.lang.String str34 = settings24.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings24.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean47 = indexScopedSettings18.updateSettings(settings24, builder38, builder45, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.put("index.number_of_shards", 10L);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder50.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList60);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = builder50.build();
        java.lang.Boolean boolean69 = settings66.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue71 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue72 = settings66.getAsSize("", sizeValue71);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings66);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting74 = indexSettings73.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = null;
        indexSettings73.flushThresholdSize = byteSizeValue75;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings73.getQUERY_STRING_ANALYZE_WILDCARD();
        int int78 = indexSettings73.getNumberOfReplicas();
        boolean boolean79 = indexSettings73.getwarmerEnabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = indexSettings73.getIndexMetaData();
        org.elasticsearch.Version version81 = indexSettings73.getIndexVersionCreated();
        org.elasticsearch.Version version82 = settings5.getAsVersion("index.shadow_replicas", version81);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.creation_date" + "'", str13, "index.creation_date");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertEquals("'" + boolean69 + "' != '" + false + "'", boolean69, false);
        org.junit.Assert.assertNull(sizeValue72);
        org.junit.Assert.assertNotNull(intSetting74);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertNotNull(version82);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder9.primaryTerm(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings33 = settings8.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings33.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.settings(settings33);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.putMapping("hi!", "index.version.upgraded_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder28.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder49.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder51.putCustom("", custom53);
        java.lang.Class<?> wildcardClass55 = builder51.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder28.put("archived.", (java.lang.Class) wildcardClass55);
        java.lang.String str58 = builder56.get("index.shadow_replicas");
        java.lang.String str60 = builder56.get("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder66.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList93 = new java.util.ArrayList<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList93, strArray92);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder69.putArray("index.creation_date", (java.util.List<java.lang.String>) strList93);
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder56.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList93);
        org.elasticsearch.common.settings.Settings settings97 = builder56.build();
        org.elasticsearch.index.IndexSettings indexSettings98 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings97);
        long long99 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(settings97);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1L + "'", long99 == 1L);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int7 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData9.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap15 = indexMetaData9.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.Version version65 = indexSettings57.version;
        java.util.function.Predicate<java.lang.String> strPredicate66 = indexSettings57.getindexNameMatcher();
        indexSettings57.setMaxRefreshListeners((int) 'a');
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.Setting.Property property70 = indexScopedSettings69.getScope();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + property70 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property70.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        indexSettings57.warmerEnabled = true;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig63 = indexSettings57.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(mergePolicyConfig63);
        org.junit.Assert.assertNotNull(intSetting64);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting60 = indexSettings57.getDEFAULT_FIELD_SETTING();
        indexSettings57.setEnableWarmer(false);
        indexSettings57.maxResultWindow = ' ';
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(strSetting60);
        org.junit.Assert.assertNotNull(timeValue65);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet6 = indexScopedSettings0.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer8 = null;
        indexScopedSettings0.addSettingsUpdateConsumer(booleanSetting7, booleanConsumer8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.number_of_shards", 10L);
        java.lang.String str44 = builder42.remove("");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray52 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray53 = settings45.getAsArray("active_allocations", strArray52);
        java.lang.String str55 = settings45.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings45);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings45);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = settings57.getAsBytesSize("index.creation_date", byteSizeValue59);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder42.put(settings57);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params64 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = settings62.toXContent(xContentBuilder63, params64);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings62.getGroups("index.shared_filesystem", true);
        java.lang.Object obj69 = null;
        boolean boolean70 = settings62.equals(obj69);
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings0.diff(settings57, settings62);
        java.lang.String str74 = settings71.get("index.blocks.metadata", "index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(wildcardSettingSet6);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(params64);
        org.junit.Assert.assertNull(xContentBuilder65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "false" + "'", str74, "false");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = builder32.build();
        org.elasticsearch.common.settings.Settings settings50 = settings48.getAsSettings("index.priority");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings48, streamOutput51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray11 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray12 = settings4.getAsArray("active_allocations", strArray11);
        java.lang.String str14 = settings4.toDelimitedString('4');
        indexScopedSettings2.validate("index.number_of_shards", settings4);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings17 = settings4.filter(strPredicate16);
        org.elasticsearch.common.unit.TimeValue timeValue19 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue20 = settings17.getAsTime("index.number_of_replicas", timeValue19);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray29 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray30 = settings22.getAsArray("active_allocations", strArray29);
        java.lang.String[] strArray31 = settings17.getAsArray("index.blocks.metadata", strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder1.settings(settings17);
        int int33 = builder32.numberOfReplicas();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.putAlias(aliasMetaData34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings16 = settings2.getAsSettings("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData18.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property21 = indexScopedSettings20.getScope();
        boolean boolean23 = indexScopedSettings20.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting25 = indexScopedSettings20.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray33 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray34 = settings26.getAsArray("active_allocations", strArray33);
        java.lang.String str36 = settings26.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings26.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder44 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean49 = indexScopedSettings20.updateSettings(settings26, builder40, builder47, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.put("index.number_of_shards", 10L);
        java.lang.String[] strArray61 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder52.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList62);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder52.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings68 = builder52.build();
        java.lang.Boolean boolean71 = settings68.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue73 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue74 = settings68.getAsSize("", sizeValue73);
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings68);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting76 = indexSettings75.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue77 = null;
        indexSettings75.flushThresholdSize = byteSizeValue77;
        org.elasticsearch.index.translog.Translog.Durability durability79 = indexSettings75.getTranslogDurability();
        boolean boolean80 = indexSettings75.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings81 = indexSettings75.getSettings();
        boolean boolean82 = indexSettings75.TTLPurgeDisabled;
        java.lang.String str83 = indexSettings75.getNodeName();
        org.elasticsearch.common.logging.ESLogger eSLogger84 = indexSettings75.getlogger();
        org.elasticsearch.common.settings.Settings settings85 = indexSettings75.settings;
        org.elasticsearch.common.unit.TimeValue timeValue86 = indexSettings75.syncInterval;
        org.elasticsearch.Version version87 = indexSettings75.getIndexVersionCreated();
        org.elasticsearch.Version version88 = settings16.getAsVersion("false", version87);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + property21 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property21.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(wildcardSetting25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertEquals("'" + boolean71 + "' != '" + false + "'", boolean71, false);
        org.junit.Assert.assertNull(sizeValue74);
        org.junit.Assert.assertNotNull(intSetting76);
        org.junit.Assert.assertTrue("'" + durability79 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability79.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(eSLogger84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(timeValue86);
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertNotNull(version88);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig61 = indexSettings57.mergeSchedulerConfig;
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings57.getDEFAULT_REFRESH_INTERVAL();
        int int63 = indexSettings57.getMaxRefreshListeners();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1000 + "'", int63 == 1000);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings15.getScope();
        boolean boolean18 = indexScopedSettings15.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings20.toXContent(xContentBuilder21, params22);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings20);
        indexScopedSettings15.validate("index.shared_filesystem.recover_on_any_node", settings20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray35 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray36 = settings28.getAsArray("active_allocations", strArray35);
        java.lang.String str38 = settings28.toDelimitedString('4');
        indexScopedSettings26.validate("index.number_of_shards", settings28);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings28);
        java.util.Set<java.lang.String> strSet42 = settings28.names();
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings28);
        int int44 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData30.getInitialRecoveryFilters();
        boolean boolean33 = indexMetaData30.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray44 = settings36.getAsArray("active_allocations", strArray43);
        java.lang.String str46 = settings36.toDelimitedString('4');
        indexScopedSettings34.validate("index.number_of_shards", settings36);
        java.util.function.Predicate<java.lang.String> strPredicate48 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings49 = settings36.filter(strPredicate48);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings36.toXContent(xContentBuilder50, params51);
        org.elasticsearch.Version version54 = null;
        org.elasticsearch.Version version55 = settings36.getAsVersion("index.blocks.metadata", version54);
        java.util.function.Predicate<java.lang.String> strPredicate56 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings57 = settings36.filter(strPredicate56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData0.diff(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int61 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNull(xContentBuilder52);
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertNotNull(strPredicate56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        java.util.function.Predicate<java.lang.String> strPredicate29 = indexSettings28.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = indexSettings28.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData30);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue8 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue9 = settings0.getAsSize("index.blocks.read", sizeValue8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.number_of_shards", 10L);
        java.lang.String[] strArray51 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder42.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList52);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder42.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = builder42.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray68 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray69 = settings61.getAsArray("active_allocations", strArray68);
        java.lang.String str71 = settings61.toDelimitedString('4');
        indexScopedSettings59.validate("index.number_of_shards", settings61);
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings74 = settings61.filter(strPredicate73);
        org.elasticsearch.common.settings.Settings settings75 = settings58.filter(strPredicate73);
        org.elasticsearch.common.settings.Settings settings76 = settings0.filter(strPredicate73);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings76, streamOutput77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(sizeValue9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = indexSettings57.flushThresholdSize;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig61 = indexSettings57.mergeSchedulerConfig;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        java.lang.String str63 = indexSettings57.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(byteSizeValue60);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings settings35 = builder34.build();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder34.put("index.priority", (double) 1L);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder38.putNull("index.uuid");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings.Builder builder5 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder5.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder6.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray35 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder12.putArray("index.creation_date", (java.util.List<java.lang.String>) strList36);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder12.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.putNull("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder40.put("", true);
        org.elasticsearch.common.settings.Settings settings46 = builder40.build();
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings46);
        long long48 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput49 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting62 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        boolean boolean63 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability64 = indexSettings57.getTranslogDurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(byteSizeValueSetting62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + durability64 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability64.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.creation_date_string");
        java.lang.String str38 = builder36.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder40.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder44.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.loadFromSource("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate55 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass56 = strPredicate55.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder50.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder44.put("index.auto_expand_replicas", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder36.put("index.creation_date_string", (java.lang.Class) wildcardClass56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property61 = indexScopedSettings60.getScope();
        boolean boolean63 = indexScopedSettings60.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting65 = indexScopedSettings60.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray73 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray74 = settings66.getAsArray("active_allocations", strArray73);
        java.lang.String str76 = settings66.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings66);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings66.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder80 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder80.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder84 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean89 = indexScopedSettings60.updateSettings(settings66, builder80, builder87, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings91 = settings66.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap92 = settings91.getAsGroups();
        org.elasticsearch.common.settings.Settings.Builder builder93 = builder59.put(settings91);
        java.util.concurrent.TimeUnit timeUnit96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder97 = builder93.put("primary_terms", 35L, timeUnit96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + property61 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property61.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardSetting65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strMap92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder3.putNull("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder5.normalizePrefix("index.creation_date_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("active_allocations");
        int int2 = builder1.getRoutingNumShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder38.build();
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("index.priority");
        java.lang.String str58 = settings56.toDelimitedString(' ');
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        java.util.Set<java.lang.String> strSet61 = null; // flaky: indexMetaData0.activeAllocationIds((int) '4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(strSet61);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", 1.0d);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray22 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray23 = settings15.getAsArray("active_allocations", strArray22);
        java.lang.String str25 = settings15.toDelimitedString('4');
        indexScopedSettings13.validate("index.number_of_shards", settings15);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder12.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder12.index("active_allocations");
        int int31 = builder30.numberOfShards();
        java.lang.Class<?> wildcardClass32 = builder30.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder6.put("index.shadow_replicas", (java.lang.Class) wildcardClass32);
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.loadFromStream("index.data_path", inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        boolean boolean4 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property9 = indexScopedSettings8.getScope();
        boolean boolean11 = indexScopedSettings8.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting13 = indexScopedSettings8.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray21 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray22 = settings14.getAsArray("active_allocations", strArray21);
        java.lang.String str24 = settings14.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap27 = settings14.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder28.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder32 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean37 = indexScopedSettings8.updateSettings(settings14, builder28, builder35, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("index.number_of_shards", 10L);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder40.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList50);
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder40.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings56 = builder40.build();
        java.lang.Boolean boolean59 = settings56.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue61 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue62 = settings56.getAsSize("", sizeValue61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings56);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting64 = indexSettings63.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue65 = null;
        indexSettings63.flushThresholdSize = byteSizeValue65;
        org.elasticsearch.index.translog.Translog.Durability durability67 = indexSettings63.getTranslogDurability();
        long long68 = indexSettings63.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue69 = indexSettings63.refreshInterval;
        org.elasticsearch.common.unit.TimeValue timeValue70 = settings0.getAsTime("_na_", timeValue69);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + property9 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property9.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardSetting13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(sizeValue62);
        org.junit.Assert.assertNotNull(intSetting64);
        org.junit.Assert.assertTrue("'" + durability67 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability67.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 60000L + "'", long68 == 60000L);
        org.junit.Assert.assertNotNull(timeValue69);
        org.junit.Assert.assertNotNull(timeValue70);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfReplicas(10);
        java.lang.String str11 = builder10.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version21 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(version21);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        indexSettings57.maxRefreshListeners = (byte) 10;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData64.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData64.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        int int72 = indexMetaData64.getRoutingNumShards();
        boolean boolean73 = indexSettings57.updateIndexMetaData(indexMetaData64);
        java.lang.String str74 = indexSettings57.getDefaultField();
        org.elasticsearch.Version version75 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = indexSettings57.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "_all" + "'", str74, "_all");
        org.junit.Assert.assertNotNull(version75);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property15 = indexScopedSettings14.getScope();
        boolean boolean17 = indexScopedSettings14.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting19 = indexScopedSettings14.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray27 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray28 = settings20.getAsArray("active_allocations", strArray27);
        java.lang.String str30 = settings20.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap33 = settings20.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean43 = indexScopedSettings14.updateSettings(settings20, builder34, builder41, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings45 = settings20.getByPrefix("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.numberOfReplicas((int) 'a');
        boolean boolean50 = settings20.equals((java.lang.Object) 'a');
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings51);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property55 = indexScopedSettings54.getScope();
        boolean boolean57 = indexScopedSettings54.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting59 = indexScopedSettings54.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray67 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray68 = settings60.getAsArray("active_allocations", strArray67);
        java.lang.String str70 = settings60.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings60.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder74 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder74.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder78 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder78.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean83 = indexScopedSettings54.updateSettings(settings60, builder74, builder81, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings85 = settings60.getByPrefix("index.version.upgraded_string");
        java.lang.Object obj86 = null;
        boolean boolean87 = settings60.equals(obj86);
        java.util.Set<java.lang.String> strSet88 = settings60.names();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder89 = null;
        org.elasticsearch.common.settings.Settings settings90 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder91 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params92 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder93 = settings90.toXContent(xContentBuilder91, params92);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = settings60.toXContent(xContentBuilder89, params92);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder95 = settings51.toXContent(xContentBuilder53, params92);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder10, params92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + property15 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property15.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardSetting19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + property55 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property55.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(wildcardSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(params92);
        org.junit.Assert.assertNull(xContentBuilder93);
        org.junit.Assert.assertNull(xContentBuilder94);
        org.junit.Assert.assertNull(xContentBuilder95);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strMap0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        java.lang.String str46 = builder32.remove("state-");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        int int4 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("10.0");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(aliasMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getdefaultAllowUnmappedFields();
        java.lang.String str63 = indexSettings57.getDefaultField();
        boolean boolean64 = indexSettings57.warmerEnabled;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(timeValueSetting65);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        int int66 = indexSettings57.getMaxRescoreWindow();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig67 = indexSettings57.mergePolicyConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData68.getInitialRecoveryFilters();
        boolean boolean71 = indexMetaData68.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap72 = indexMetaData68.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state73 = indexMetaData68.getState();
        indexSettings57.indexMetaData = indexMetaData68;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData68.includeFilters();
        org.elasticsearch.common.settings.Settings settings76 = indexMetaData68.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData78 = indexMetaData68.mappingOrDefault("index.creation_date");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertNotNull(mergePolicyConfig67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap72);
        org.junit.Assert.assertTrue("'" + state73 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state73.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNull(mappingMetaData78);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.putAlias(builder10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(version8);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        long long5 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.removeAlias("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        int int65 = indexMetaData64.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        org.elasticsearch.common.unit.TimeValue timeValue55 = null; // flaky: indexSettings52.getTranslogSyncInterval();
        boolean boolean56 = false; // flaky: indexSettings52.getqueryStringLenient();
        java.util.function.Predicate<java.lang.String> strPredicate57 = null; // flaky: indexSettings52.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
// flaky:         org.junit.Assert.assertNotNull(timeValue55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(strPredicate57);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("", custom12);
        java.lang.String str14 = builder10.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        java.lang.String str36 = builder34.get("index.version.upgraded_string");
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet38 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass39 = wildcardSettingSet38.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder34.put("index.shadow_replicas", (java.lang.Class) wildcardClass39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("state-");
        java.lang.Class<?> wildcardClass44 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder40.put("index.blocks.read", (java.lang.Class) wildcardClass44);
        java.lang.Class class47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder48 = builder45.put("index.number_of_shards", class47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(wildcardSettingSet38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder35.putNull("index.version.upgraded_string");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder35.put("", true);
        org.elasticsearch.common.settings.Settings settings41 = builder35.build();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder35.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.version.minimum_compatible", (double) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder32.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder32.put("archived.", "index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder32.put("index.creation_date_string", "100.0");
        java.nio.file.Path path58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder59 = builder57.loadFromPath(path58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.setRoutingNumShards((int) (short) 0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        java.lang.String[] strArray62 = new java.lang.String[] { "active_allocations", "index.shared_filesystem", "index.uuid", "", "index.uuid", "index.version.created", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index.shared_filesystem", "index.shared_filesystem.recover_on_any_node", "index.number_of_replicas", "index." };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder48.putArray("index.priority", (java.util.List<java.lang.String>) strList63);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder48.put("index.blocks.read", 1000);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder68.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap70 = builder68.internalMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        int int1 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder17.normalizePrefix("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("", 0L);
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder23.loadFromStream("index.data_path", inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = indexSettings57.getScopedSettings();
        boolean boolean66 = indexSettings57.isIndexUsingShadowReplicas();
        boolean boolean67 = indexSettings57.queryStringAllowLeadingWildcard;
        int int68 = indexSettings57.maxRefreshListeners;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1000 + "'", int68 == 1000);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData61.getState();
        org.apache.lucene.util.Version version64 = indexMetaData61.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = indexMetaData61.readFrom(streamInput65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version64);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.shared_filesystem", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.removeAlias("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.state(state13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder8.state(state13);
        java.lang.String str16 = builder15.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.version.created_string" + "'", str16, "index.version.created_string");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        java.lang.String str63 = indexSettings57.getNodeName();
        java.lang.String str64 = indexSettings57.getDefaultField();
        org.elasticsearch.common.settings.Settings settings65 = indexSettings57.getNodeSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting66 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(byteSizeValueSetting66);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder7.putCustom("active_allocations", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.state(state18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder5.state(state18);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings60.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings60.indexMetaData;
        boolean boolean63 = indexSettings60.isOnSharedFilesystem();
        int int64 = indexSettings60.maxRescoreWindow;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = indexSettings60.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertNotNull(timeValueSetting65);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property6 = indexScopedSettings5.getScope();
        boolean boolean8 = indexScopedSettings5.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings5.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray18 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray19 = settings11.getAsArray("active_allocations", strArray18);
        java.lang.String str21 = settings11.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings11.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder25.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean34 = indexScopedSettings5.updateSettings(settings11, builder25, builder32, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder25.put("index.number_of_shards", 10L);
        java.lang.String[] strArray46 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder37.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList47);
        org.elasticsearch.common.settings.Settings settings50 = builder37.build();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder51.put("index.shadow_replicas", (long) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder51.put("index.uuid", "index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder1.settings(builder57);
        long long59 = builder1.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + property6 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property6.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardSetting10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        int int97 = indexMetaData61.getNumberOfShards();
        long long98 = indexMetaData61.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-1L) + "'", long98 == (-1L));
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.Version version61 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters63 = indexMetaData62.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters64 = indexMetaData62.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData62.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property68 = indexScopedSettings67.getScope();
        boolean boolean70 = indexScopedSettings67.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params74 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = settings72.toXContent(xContentBuilder73, params74);
        boolean boolean76 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings72);
        indexScopedSettings67.validate("index.shared_filesystem.recover_on_any_node", settings72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray87 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray88 = settings80.getAsArray("active_allocations", strArray87);
        java.lang.String str90 = settings80.toDelimitedString('4');
        indexScopedSettings78.validate("index.number_of_shards", settings80);
        org.elasticsearch.common.settings.Settings settings92 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings80);
        org.elasticsearch.common.settings.Settings settings93 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.common.settings.Settings settings95 = settings80.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings80);
        org.elasticsearch.index.IndexSettings indexSettings97 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings80);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap98 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNull(discoveryNodeFilters63);
        org.junit.Assert.assertNull(discoveryNodeFilters64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + property68 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property68.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(params74);
        org.junit.Assert.assertNull(xContentBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(settings95);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap98);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        java.util.function.Predicate<java.lang.String> strPredicate14 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings15 = settings2.filter(strPredicate14);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = settings2.toXContent(xContentBuilder16, params17);
        org.elasticsearch.Version version20 = null;
        org.elasticsearch.Version version21 = settings2.getAsVersion("index.blocks.metadata", version20);
        java.util.function.Predicate<java.lang.String> strPredicate22 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings23 = settings2.filter(strPredicate22);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue26 = settings23.getAsRatio("index.shared_filesystem.recover_on_any_node", "state-");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [state-]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(params17);
        org.junit.Assert.assertNull(xContentBuilder18);
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertNotNull(strPredicate22);
        org.junit.Assert.assertNotNull(settings23);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        boolean boolean63 = indexSettings57.warmerEnabled;
        boolean boolean64 = indexSettings57.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder43.putCustom("", custom45);
        java.lang.Class<?> wildcardClass47 = builder43.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder20.put("archived.", (java.lang.Class) wildcardClass47);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder48.put("100.0", (int) (short) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray61 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray62 = settings54.getAsArray("active_allocations", strArray61);
        java.lang.String str64 = settings54.toDelimitedString('4');
        indexScopedSettings52.validate("index.number_of_shards", settings54);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = settings54.getAsMap();
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder48.put(strMap66);
        org.elasticsearch.common.settings.Settings settings68 = builder48.build();
        boolean boolean69 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings68);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.putAlias(builder12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder38.build();
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("index.priority");
        java.lang.String str58 = settings56.toDelimitedString(' ');
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap60 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap60);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder38.loadFromSource("index.number_of_shards");
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder38.put("index.blocks.write", false);
        org.elasticsearch.common.settings.Settings.Builder builder57 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder57.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder58.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray73 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray74 = settings66.getAsArray("active_allocations", strArray73);
        java.lang.String str76 = settings66.toDelimitedString('4');
        indexScopedSettings64.validate("index.number_of_shards", settings66);
        java.util.function.Predicate<java.lang.String> strPredicate78 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings79 = settings66.filter(strPredicate78);
        org.elasticsearch.common.unit.TimeValue timeValue81 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue82 = settings79.getAsTime("index.number_of_replicas", timeValue81);
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray91 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray92 = settings84.getAsArray("active_allocations", strArray91);
        java.lang.String[] strArray93 = settings79.getAsArray("index.blocks.metadata", strArray92);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder61.extendArray("archived.", strArray93);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder38.extendArray("index.number_of_shards", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = builder5.settings(builder38);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strPredicate78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(timeValue81);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray54 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray55 = settings47.getAsArray("active_allocations", strArray54);
        java.lang.String str57 = settings47.toDelimitedString('4');
        indexScopedSettings45.validate("index.number_of_shards", settings47);
        java.util.function.Predicate<java.lang.String> strPredicate59 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings60 = settings47.filter(strPredicate59);
        org.elasticsearch.common.unit.TimeValue timeValue62 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue63 = settings60.getAsTime("index.number_of_replicas", timeValue62);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray72 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray73 = settings65.getAsArray("active_allocations", strArray72);
        java.lang.String[] strArray74 = settings60.getAsArray("index.blocks.metadata", strArray73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder44.put(settings60);
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder75.loadFromSource("archived.");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) (short) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.setRoutingNumShards(10000);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder22.putCustom("index.blocks.metadata", custom24);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.putAlias(aliasMetaData26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings31 = settings6.getByPrefix("index.version.upgraded_string");
        java.lang.Object obj32 = null;
        boolean boolean33 = settings6.equals(obj32);
        java.util.Set<java.lang.String> strSet34 = settings6.names();
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings6);
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder36.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder37.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder40.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray66 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder43.putArray("index.creation_date", (java.util.List<java.lang.String>) strList67);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder43.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder43.put("index.version.minimum_compatible", true);
        boolean boolean75 = settings6.equals((java.lang.Object) builder43);
        org.elasticsearch.common.settings.Settings.Builder builder78 = builder43.put("index.version.upgraded_string", (long) (short) 0);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.setRoutingNumShards((int) (byte) -1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property17 = indexScopedSettings16.getScope();
        boolean boolean19 = indexScopedSettings16.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting21 = indexScopedSettings16.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray29 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray30 = settings22.getAsArray("active_allocations", strArray29);
        java.lang.String str32 = settings22.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings22.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder36.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder40 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder40.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean45 = indexScopedSettings16.updateSettings(settings22, builder36, builder43, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder43.putNull("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder43.putNull("index.");
        org.elasticsearch.common.settings.Settings settings50 = builder43.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder13.settings(builder43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder51.putCustom("index.shared_filesystem", custom53);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + property17 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property17.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardSetting21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig66 = indexSettings57.mergePolicyConfig;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property68 = indexScopedSettings67.getScope();
        boolean boolean70 = indexScopedSettings67.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params74 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = settings72.toXContent(xContentBuilder73, params74);
        boolean boolean76 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings72);
        indexScopedSettings67.validate("index.shared_filesystem.recover_on_any_node", settings72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray87 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray88 = settings80.getAsArray("active_allocations", strArray87);
        java.lang.String str90 = settings80.toDelimitedString('4');
        indexScopedSettings78.validate("index.number_of_shards", settings80);
        org.elasticsearch.common.settings.Settings settings92 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings80);
        org.elasticsearch.common.settings.Settings settings93 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.common.unit.TimeValue timeValue95 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        org.elasticsearch.common.unit.TimeValue timeValue96 = settings80.getAsTime("index.number_of_shards", timeValue95);
        indexSettings57.setRefreshInterval(timeValue96);
        java.lang.Class<?> wildcardClass98 = timeValue96.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(mergePolicyConfig66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + property68 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property68.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(params74);
        org.junit.Assert.assertNull(xContentBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(timeValue95);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = settings5.toXContent(xContentBuilder6, params7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        indexScopedSettings0.validate("index.shared_filesystem.recover_on_any_node", settings5);
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings0.get("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(params7);
        org.junit.Assert.assertNull(xContentBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.auto_expand_replicas]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.primaryTerm((int) 'a', (long) 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String str34 = builder32.remove("");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray42 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray43 = settings35.getAsArray("active_allocations", strArray42);
        java.lang.String str45 = settings35.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue49 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue50 = settings47.getAsBytesSize("index.creation_date", byteSizeValue49);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder32.put(settings47);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet53 = org.elasticsearch.common.settings.IndexScopedSettings.BUILT_IN_INDEX_SETTINGS;
        java.lang.Class<?> wildcardClass54 = wildcardSettingSet53.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder32.put("index.number_of_shards", (java.lang.Class) wildcardClass54);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder32.put("index.shared_filesystem.recover_on_any_node", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder32.put("index.version.created", "_all");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNull(byteSizeValue50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(wildcardSettingSet53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings63);
        java.lang.Boolean boolean67 = settings63.getAsBoolean("index.shared_filesystem", (java.lang.Boolean) false);
        java.lang.String str69 = settings63.get("_all");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertEquals("'" + boolean67 + "' != '" + false + "'", boolean67, false);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.Settings settings61 = indexSettings57.getNodeSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(booleanSetting62);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.shared_filesystem", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.data_path", true);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.loadFromSource("index.shadow_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings15.getScope();
        boolean boolean18 = indexScopedSettings15.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting20 = indexScopedSettings15.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray28 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray29 = settings21.getAsArray("active_allocations", strArray28);
        java.lang.String str31 = settings21.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings21.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder35 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean44 = indexScopedSettings15.updateSettings(settings21, builder35, builder42, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder35.put("index.number_of_shards", 10L);
        java.lang.String[] strArray56 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder47.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList57);
        org.elasticsearch.common.settings.Settings settings60 = builder47.build();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder47.put("index.priority", 100L);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property65 = indexScopedSettings64.getScope();
        boolean boolean67 = indexScopedSettings64.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params71 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = settings69.toXContent(xContentBuilder70, params71);
        boolean boolean73 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings69);
        indexScopedSettings64.validate("index.shared_filesystem.recover_on_any_node", settings69);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray84 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray85 = settings77.getAsArray("active_allocations", strArray84);
        java.lang.String str87 = settings77.toDelimitedString('4');
        indexScopedSettings75.validate("index.number_of_shards", settings77);
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings77);
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings64.archiveUnknownOrBrokenSettings(settings77);
        boolean boolean91 = settings77.isEmpty();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap94 = settings77.getGroups("index.number_of_replicas", true);
        org.elasticsearch.common.settings.Settings.Builder builder95 = builder63.put(settings77);
        java.lang.String[] strArray97 = settings77.getAsArray("");
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder11.extendArray("index.number_of_shards", strArray97);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardSetting20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + property65 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property65.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(params71);
        org.junit.Assert.assertNull(xContentBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strMap94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings60.getTranslogDurability();
        org.elasticsearch.index.translog.Translog.Durability durability62 = indexSettings60.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + durability62 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability62.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder0.put("index.auto_expand_replicas", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder6.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder8.replacePropertyPlaceholders();
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.loadFromStream("index.shared_filesystem", inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting60 = indexSettings57.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting61 = indexSettings57.getINDEX_TRANSLOG_DURABILITY_SETTING();
        int int62 = indexSettings57.numberOfShards;
        int int63 = indexSettings57.getMaxRescoreWindow();
        java.lang.String str64 = indexSettings57.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(booleanSetting60);
        org.junit.Assert.assertNotNull(durabilitySetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10000 + "'", int63 == 10000);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings48 = builder32.build();
        org.elasticsearch.common.settings.Settings settings50 = settings48.getAsSettings("index.priority");
        java.lang.String str52 = settings50.toDelimitedString(' ');
        java.util.Map<java.lang.String, java.lang.String> strMap53 = settings50.getAsMap();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strMap53);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.maxResultWindow;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig66 = indexSettings57.getMergeSchedulerConfig();
        indexSettings57.gcDeletesInMillis = 0L;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting69 = indexSettings57.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting70 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig66);
        org.junit.Assert.assertNotNull(byteSizeValueSetting69);
        org.junit.Assert.assertNotNull(booleanSetting70);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.loadFromSource("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder47.put("hi!", (int) '4');
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder47.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder26.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.normalizePrefix("index.creation_date_string");
        java.lang.String str44 = builder42.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder42.put("index.blocks.write", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder42.normalizePrefix("index.shared_filesystem");
        boolean boolean50 = indexMetaData0.equals((java.lang.Object) builder49);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder54 = builder49.put("index.blocks.write", (long) '4', byteSizeUnit53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder32.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder32.put("index.version.created_string", (int) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.priority", "index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNull(index3);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        java.lang.String str5 = builder4.index();
        int int6 = builder4.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.version.minimum_compatible" + "'", str5, "index.version.minimum_compatible");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        indexSettings19.setEnableWarmer(true);
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting22 = indexSettings19.getDEFAULT_FIELD_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSetting22);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting61 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig62 = indexSettings57.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(intSetting61);
        org.junit.Assert.assertNotNull(mergePolicyConfig62);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(10000);
        long long13 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.common.unit.TimeValue timeValue61 = indexSettings57.getTranslogSyncInterval();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray71 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray72 = settings64.getAsArray("active_allocations", strArray71);
        java.lang.String str74 = settings64.toDelimitedString('4');
        indexScopedSettings62.validate("index.number_of_shards", settings64);
        java.util.function.Predicate<java.lang.String> strPredicate76 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings77 = settings64.filter(strPredicate76);
        org.elasticsearch.common.unit.TimeValue timeValue79 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue80 = settings77.getAsTime("index.number_of_replicas", timeValue79);
        indexSettings57.setGCDeletes(timeValue79);
        boolean boolean82 = indexSettings57.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strPredicate76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(timeValue79);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String str6 = builder4.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings7 = builder4.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        int int62 = indexSettings57.getMaxRescoreWindow();
        java.lang.String str63 = indexSettings57.defaultField;
        int int64 = indexSettings57.getMaxResultWindow();
        java.lang.String str65 = indexSettings57.nodeName;
        int int66 = indexSettings57.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder1 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params2 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder3 = settings0.toXContent(xContentBuilder1, params2);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap6 = settings0.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue8 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue9 = settings0.getAsSize("index.blocks.read", sizeValue8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder30.put("index.number_of_shards", 10L);
        java.lang.String[] strArray51 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder42.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList52);
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder42.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings58 = builder42.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray68 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray69 = settings61.getAsArray("active_allocations", strArray68);
        java.lang.String str71 = settings61.toDelimitedString('4');
        indexScopedSettings59.validate("index.number_of_shards", settings61);
        java.util.function.Predicate<java.lang.String> strPredicate73 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings74 = settings61.filter(strPredicate73);
        org.elasticsearch.common.settings.Settings settings75 = settings58.filter(strPredicate73);
        org.elasticsearch.common.settings.Settings settings76 = settings0.filter(strPredicate73);
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings0);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(params2);
        org.junit.Assert.assertNull(xContentBuilder3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(sizeValue9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strPredicate73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        long long29 = indexMetaData0.getCreationDate();
        int int30 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput31 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        int int62 = indexSettings57.getMaxRescoreWindow();
        java.lang.String str63 = indexSettings57.defaultField;
        int int64 = indexSettings57.getMaxResultWindow();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting65 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting66 = indexSettings57.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        int int67 = indexSettings57.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertNotNull(intSetting65);
        org.junit.Assert.assertNotNull(timeValueSetting66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.Version version63 = indexSettings57.getversion();
        java.lang.String str64 = indexSettings57.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.syncInterval;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting66 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(timeValueSetting66);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long5 = builder3.primaryTerm(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray12 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray13 = settings5.getAsArray("active_allocations", strArray12);
        java.lang.String str15 = settings5.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        boolean boolean18 = settings17.isEmpty();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings17);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        boolean boolean65 = indexSettings57.isShadowReplicaIndex;
        int int66 = indexSettings57.getMaxRefreshListeners();
        org.elasticsearch.common.logging.ESLogger eSLogger67 = indexSettings57.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1000 + "'", int66 == 1000);
        org.junit.Assert.assertNotNull(eSLogger67);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean63 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean65 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue66 = indexSettings57.flushThresholdSize;
        org.elasticsearch.common.settings.Settings settings67 = indexSettings57.nodeSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(booleanSetting62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(booleanSetting64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(byteSizeValue66);
        org.junit.Assert.assertNotNull(settings67);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.number_of_replicas");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property37 = indexScopedSettings36.getScope();
        boolean boolean39 = indexScopedSettings36.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting41 = indexScopedSettings36.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray49 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray50 = settings42.getAsArray("active_allocations", strArray49);
        java.lang.String str52 = settings42.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings42.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder56.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder60 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder60.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean65 = indexScopedSettings36.updateSettings(settings42, builder56, builder63, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder56.put("index.number_of_shards", 10L);
        java.lang.String[] strArray77 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder68.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList78);
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder20.putArray("index.version.minimum_compatible", (java.util.List<java.lang.String>) strList78);
        java.lang.String str83 = builder81.remove("");
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder81.put("100.0", (double) (short) 100);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder90 = builder86.put("index.auto_expand_replicas", 1L, byteSizeUnit89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + property37 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property37.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardSetting41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.numberOfReplicas((int) (short) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        org.elasticsearch.common.unit.TimeValue timeValue53 = null; // flaky: indexSettings52.syncInterval;
        int int54 = 0; // flaky: indexSettings52.getNumberOfShards();
// flaky:         indexSettings52.maxResultWindow = 0;
        org.elasticsearch.Version version57 = null; // flaky: indexSettings52.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
// flaky:         org.junit.Assert.assertNotNull(version57);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray9 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray10 = settings2.getAsArray("active_allocations", strArray9);
        java.lang.String str12 = settings2.toDelimitedString('4');
        indexScopedSettings0.validate("index.number_of_shards", settings2);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings2);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings14.getAsSize("hi!", sizeValue16);
        org.elasticsearch.common.settings.Settings.Builder builder19 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder19.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray35 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray36 = settings28.getAsArray("active_allocations", strArray35);
        java.lang.String str38 = settings28.toDelimitedString('4');
        indexScopedSettings26.validate("index.number_of_shards", settings28);
        java.util.function.Predicate<java.lang.String> strPredicate40 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings41 = settings28.filter(strPredicate40);
        org.elasticsearch.common.unit.TimeValue timeValue43 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue44 = settings41.getAsTime("index.number_of_replicas", timeValue43);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray53 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray54 = settings46.getAsArray("active_allocations", strArray53);
        java.lang.String[] strArray55 = settings41.getAsArray("index.blocks.metadata", strArray54);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder23.extendArray("archived.", strArray55);
        java.lang.String[] strArray57 = settings14.getAsArray("index.blocks.read_only", strArray55);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap97 = indexMetaData61.getAliases();
        org.elasticsearch.index.Index index98 = indexMetaData61.getMergeSourceIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass99 = index98.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(strImmutableOpenMap97);
        org.junit.Assert.assertNull(index98);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray14 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray15 = settings7.getAsArray("active_allocations", strArray14);
        java.lang.String str17 = settings7.toDelimitedString('4');
        indexScopedSettings5.validate("index.number_of_shards", settings7);
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings20 = settings7.filter(strPredicate19);
        org.elasticsearch.common.unit.TimeValue timeValue22 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue23 = settings20.getAsTime("index.number_of_replicas", timeValue22);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray32 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray33 = settings25.getAsArray("active_allocations", strArray32);
        java.lang.String[] strArray34 = settings20.getAsArray("index.blocks.metadata", strArray33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder4.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder2.settings(settings20);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder2.primaryTerm((int) (short) 10, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        boolean boolean55 = false; // flaky: indexSettings52.getisShadowReplicaIndex();
        boolean boolean56 = false; // flaky: indexSettings52.TTLPurgeDisabled;
        int int57 = 0; // flaky: indexSettings52.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10000 + "'", int57 == 10000);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        indexSettings57.gcDeletesInMillis = (short) 10;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting63 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        boolean boolean64 = indexSettings57.hasCustomDataPath();
        boolean boolean65 = indexSettings57.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting66 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        java.util.function.Predicate<java.lang.String> strPredicate67 = indexSettings57.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(intSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(intSetting66);
        org.junit.Assert.assertNotNull(strPredicate67);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(index9);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        boolean boolean63 = indexSettings57.warmerEnabled;
        boolean boolean64 = indexSettings57.getqueryStringAnalyzeWildcard();
        boolean boolean66 = indexSettings57.matchesIndexName("");
        long long67 = indexSettings57.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = builder9.build();
        int int11 = indexMetaData10.getNumberOfShards();
        int int12 = indexMetaData10.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData10.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(index3);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        boolean boolean59 = indexSettings57.isQueryStringAllowLeadingWildcard();
        java.lang.String str60 = indexSettings57.getDefaultField();
        indexSettings57.maxRefreshListeners = (short) 10;
        indexSettings57.setEnableWarmer(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "_all" + "'", str60, "_all");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.Version version65 = indexSettings57.version;
        org.elasticsearch.common.unit.TimeValue timeValue66 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue66;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(timeValue66);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.number_of_replicas");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.number_of_replicas]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String[] strArray10 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "index.version.upgraded_string", "active_allocations", "archived." };
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.extendArray("index.shared_filesystem.recover_on_any_node", strArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.settings(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder11.put(settings14);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("hi!", (double) (byte) 1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray31 = settings23.getAsArray("active_allocations", strArray30);
        java.lang.String str33 = settings23.toDelimitedString('4');
        indexScopedSettings21.validate("index.number_of_shards", settings23);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = settings23.getAsMap();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray45 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray46 = settings38.getAsArray("active_allocations", strArray45);
        java.lang.String str48 = settings38.toDelimitedString('4');
        indexScopedSettings36.validate("index.number_of_shards", settings38);
        java.util.function.Predicate<java.lang.String> strPredicate50 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings51 = settings38.filter(strPredicate50);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction52 = null;
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder20.putProperties(strMap35, strPredicate50, strFunction52);
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strPredicate50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strMap54);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData61.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.creationDate((-1L));
        long long6 = builder5.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        int int62 = indexSettings57.getMaxRescoreWindow();
        org.apache.lucene.index.MergePolicy mergePolicy63 = indexSettings57.getMergePolicy();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting64 = indexSettings57.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = indexSettings57.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10000 + "'", int62 == 10000);
        org.junit.Assert.assertNotNull(mergePolicy63);
        org.junit.Assert.assertNotNull(strSetting64);
        org.junit.Assert.assertNotNull(timeValueSetting65);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.putNull("index.shared_filesystem.recover_on_any_node");
        java.lang.String str50 = builder48.remove("_all");
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder48.putNull("index.version.minimum_compatible");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property55 = indexScopedSettings54.getScope();
        boolean boolean57 = indexScopedSettings54.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting59 = indexScopedSettings54.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray67 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray68 = settings60.getAsArray("active_allocations", strArray67);
        java.lang.String str70 = settings60.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap73 = settings60.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder74 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder74.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder78 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder78.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean83 = indexScopedSettings54.updateSettings(settings60, builder74, builder81, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder74.put("index.number_of_shards", 10L);
        java.lang.String[] strArray95 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList96 = new java.util.ArrayList<java.lang.String>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList96, strArray95);
        org.elasticsearch.common.settings.Settings.Builder builder98 = builder86.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList96);
        org.elasticsearch.common.settings.Settings.Builder builder99 = builder48.putArray("index.data_path", (java.util.List<java.lang.String>) strList96);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + property55 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property55.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(wildcardSetting59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("index.creation_date_string");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.version.minimum_compatible", "index.version.upgraded_string", "index.", "index.shared_filesystem", "state-", "index.version.minimum_compatible", "active_allocations", "index.version.created_string", "index.shared_filesystem", "", "index.shared_filesystem.recover_on_any_node", "archived.", "state-", "index.version.created", "active_allocations", "index.uuid", "index.version.created_string", "state-", "state-", "index.creation_date", "index.blocks.read_only" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder7.putArray("index.creation_date", (java.util.List<java.lang.String>) strList31);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder7.putNull("index.blocks.read_only");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder7.put("index.version.minimum_compatible", true);
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder7.normalizePrefix("index.shared_filesystem");
        java.nio.file.Path path41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder42 = builder40.loadFromPath(path41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.logger;
        org.elasticsearch.common.unit.TimeValue timeValue63 = indexSettings57.refreshInterval;
        boolean boolean64 = indexSettings57.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("_na_", 100.0d);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder10 = builder4.put("index.version.upgraded", (long) (short) -1, byteSizeUnit9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        boolean boolean62 = indexSettings57.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str65 = indexSettings57.getNodeName();
        org.elasticsearch.common.logging.ESLogger eSLogger66 = indexSettings57.getlogger();
        org.elasticsearch.common.settings.Settings settings67 = indexSettings57.settings;
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.syncInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting69 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(eSLogger66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(intSetting69);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder29.putNull("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(builder33);
        java.lang.String str36 = builder33.get("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder33.put("state-", (long) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.version.upgraded_string", (double) 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        java.lang.String str64 = indexSettings57.defaultField;
        java.lang.String str65 = indexSettings57.defaultField;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig66 = indexSettings57.getMergeSchedulerConfig();
        indexSettings57.setMaxRescoreWindow((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "_all" + "'", str64, "_all");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_all" + "'", str65, "_all");
        org.junit.Assert.assertNotNull(mergeSchedulerConfig66);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.setRoutingNumShards((-1));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.getsyncInterval();
        int int65 = indexSettings57.getMaxRescoreWindow();
        int int66 = indexSettings57.getMaxRescoreWindow();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig67 = indexSettings57.mergePolicyConfig;
        org.elasticsearch.index.translog.Translog.Durability durability68 = indexSettings57.durability;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10000 + "'", int66 == 10000);
        org.junit.Assert.assertNotNull(mergePolicyConfig67);
        org.junit.Assert.assertTrue("'" + durability68 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability68.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.index("false");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.creationDate((long) 100);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.shared_filesystem", custom5);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = builder3.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property8 = indexScopedSettings7.getScope();
        boolean boolean10 = indexScopedSettings7.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting12 = indexScopedSettings7.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray20 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray21 = settings13.getAsArray("active_allocations", strArray20);
        java.lang.String str23 = settings13.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings13);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings13.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean36 = indexScopedSettings7.updateSettings(settings13, builder27, builder34, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder27.put("index.number_of_shards", 10L);
        java.lang.String[] strArray48 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder39.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList49);
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder39.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings55 = builder39.build();
        java.lang.Boolean boolean58 = settings55.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue60 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue61 = settings55.getAsBytesSize("index.blocks.read", byteSizeValue60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings55);
        boolean boolean63 = indexSettings62.isQueryStringAnalyzeWildcard();
        int int64 = indexSettings62.maxRefreshListeners;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + property8 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property8.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardSetting12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertEquals("'" + boolean58 + "' != '" + false + "'", boolean58, false);
        org.junit.Assert.assertNull(byteSizeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1000 + "'", int64 == 1000);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder20.loadFromSource("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.creation_date_string");
        java.lang.String str38 = builder36.get("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder36.put("index.blocks.write", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder36.normalizePrefix("index.shared_filesystem");
        java.lang.String[] strArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.putArray("index.version.upgraded_string", strArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read_only");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings33 = settings8.getByPrefix("index.version.upgraded_string");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings33.getAsGroups();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.putCustom("_na_", custom37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder35.removeAlias("index.version.upgraded_string");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder35.primaryTerm(0, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        int int65 = indexSettings57.maxRefreshListeners;
        indexSettings57.maxRefreshListeners = '4';
        org.elasticsearch.common.unit.TimeValue timeValue68 = indexSettings57.getTranslogSyncInterval();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher69 = indexSettings57.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1000 + "'", int65 == 1000);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(parseFieldMatcher69);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.numberOfShards(0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.version(0L);
        int int11 = builder10.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.index("primary_terms");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting65 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean66 = indexSettings57.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(booleanSetting65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        int int5 = indexMetaData0.getRoutingNumShards();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean9 = indexMetaData0.isSameUUID("10.0");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder29.putNull("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(builder33);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder38 = builder33.put("index.shared_filesystem.recover_on_any_node", (long) (byte) 100, byteSizeUnit37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        indexSettings57.gcDeletesInMillis = (short) 10;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting63 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        boolean boolean64 = indexSettings57.hasCustomDataPath();
        boolean boolean65 = indexSettings57.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting66 = indexSettings57.getMAX_REFRESH_LISTENERS_PER_SHARD();
        org.elasticsearch.common.unit.TimeValue timeValue67 = indexSettings57.syncInterval;
        int int68 = indexSettings57.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(intSetting63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(intSetting66);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10000 + "'", int68 == 10000);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder1.replacePropertyPlaceholders();
        java.lang.String str4 = builder2.remove("index.blocks.read");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        java.lang.String str55 = null; // flaky: indexSettings52.customDataPath();
        boolean boolean56 = false; // flaky: indexSettings52.queryStringAnalyzeWildcard;
        boolean boolean57 = false; // flaky: indexSettings52.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue58 = null; // flaky: indexSettings52.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValue58);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getqueryStringLenient();
        org.elasticsearch.common.logging.ESLogger eSLogger63 = indexSettings57.getlogger();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        org.elasticsearch.common.unit.TimeValue timeValue65 = indexSettings57.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getALLOW_UNMAPPED();
        long long67 = indexSettings57.gcDeletesInMillis;
        java.lang.String str68 = indexSettings57.customDataPath();
        org.elasticsearch.Version version69 = indexSettings57.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(eSLogger63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(booleanSetting66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(version69);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = settings8.toXContent(xContentBuilder9, params10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings8.getGroups("index.shared_filesystem", true);
        org.elasticsearch.common.unit.SizeValue sizeValue16 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue17 = settings8.getAsSize("index.blocks.read", sizeValue16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property19 = indexScopedSettings18.getScope();
        boolean boolean21 = indexScopedSettings18.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting23 = indexScopedSettings18.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray31 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray32 = settings24.getAsArray("active_allocations", strArray31);
        java.lang.String str34 = settings24.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings24.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean47 = indexScopedSettings18.updateSettings(settings24, builder38, builder45, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.put("index.number_of_shards", 10L);
        java.lang.String[] strArray59 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder50.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList60);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder50.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings66 = builder50.build();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray76 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray77 = settings69.getAsArray("active_allocations", strArray76);
        java.lang.String str79 = settings69.toDelimitedString('4');
        indexScopedSettings67.validate("index.number_of_shards", settings69);
        java.util.function.Predicate<java.lang.String> strPredicate81 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings82 = settings69.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings83 = settings66.filter(strPredicate81);
        org.elasticsearch.common.settings.Settings settings84 = settings8.filter(strPredicate81);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings84);
        java.lang.String str86 = indexSettings85.defaultField;
        int int87 = indexSettings85.numberOfShards;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting88 = indexSettings85.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNull(xContentBuilder11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(sizeValue17);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + property19 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property19.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardSetting23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "_all" + "'", str86, "_all");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(booleanSetting88);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property32 = indexScopedSettings31.getScope();
        boolean boolean34 = indexScopedSettings31.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = settings36.toXContent(xContentBuilder37, params38);
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings36);
        indexScopedSettings31.validate("index.shared_filesystem.recover_on_any_node", settings36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray51 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray52 = settings44.getAsArray("active_allocations", strArray51);
        java.lang.String str54 = settings44.toDelimitedString('4');
        indexScopedSettings42.validate("index.number_of_shards", settings44);
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings44);
        org.elasticsearch.common.settings.Settings settings57 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings44);
        boolean boolean58 = settings44.isEmpty();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray67 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray68 = settings60.getAsArray("active_allocations", strArray67);
        java.lang.String[] strArray69 = settings44.getAsArray("index.shared_filesystem", strArray68);
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder20.extendArray("hi!", strArray69);
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder20.put("archived.", (long) 1000);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + property32 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property32.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(params38);
        org.junit.Assert.assertNull(xContentBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.loadFromSource("active_allocations");
        java.lang.String str9 = builder7.get("index.priority");
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder12 = builder7.loadFromStream("index.number_of_replicas", inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings57.getNodeSettings();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher61 = indexSettings57.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(parseFieldMatcher61);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting65 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean66 = indexSettings57.getqueryStringAllowLeadingWildcard();
        boolean boolean67 = indexSettings57.getisShadowReplicaIndex();
        int int68 = indexSettings57.getMaxRefreshListeners();
        boolean boolean69 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(booleanSetting65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1000 + "'", int68 == 1000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        int int59 = indexSettings57.getMaxResultWindow();
        int int60 = indexSettings57.getMaxResultWindow();
        indexSettings57.warmerEnabled = true;
        boolean boolean63 = indexSettings57.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10000 + "'", int59 == 10000);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10000 + "'", int60 == 10000);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfReplicas((int) (short) 1);
        int int6 = builder5.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = indexSettings57.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters65 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData64.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters69 = indexMetaData64.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap70 = indexMetaData64.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        int int72 = indexMetaData64.getRoutingNumShards();
        boolean boolean73 = indexSettings57.updateIndexMetaData(indexMetaData64);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData64.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters75 = indexMetaData64.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(discoveryNodeFilters65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNull(discoveryNodeFilters75);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) (byte) 0);
        int int14 = builder11.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = builder11.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.shared_filesystem", custom5);
        long long7 = builder3.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        java.lang.String str6 = builder4.remove("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.normalizePrefix("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("index.number_of_replicas", (int) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.shadow_replicas", true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.Version version62 = indexSettings57.getIndexVersionCreated();
        indexSettings57.maxRescoreWindow = 0;
        org.elasticsearch.Version version65 = indexSettings57.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = indexSettings57.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(booleanSetting66);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings57.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = settings60.getAsStructuredMap();
        java.util.Set<java.lang.String> strSet62 = settings60.names();
        org.elasticsearch.common.settings.Settings settings64 = settings60.getByPrefix("index.number_of_shards");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(settings64);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        boolean boolean63 = indexSettings57.getwarmerEnabled();
        int int64 = indexSettings57.maxRescoreWindow;
        int int65 = indexSettings57.maxRescoreWindow;
        org.elasticsearch.common.settings.Settings settings66 = indexSettings57.getSettings();
        indexSettings57.TTLPurgeDisabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10000 + "'", int64 == 10000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10000 + "'", int65 == 10000);
        org.junit.Assert.assertNotNull(settings66);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNull(version5);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher59 = indexSettings57.getParseFieldMatcher();
        org.elasticsearch.common.settings.Settings settings60 = indexSettings57.getNodeSettings();
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = settings60.getAsStructuredMap();
        java.util.Set<java.lang.String> strSet62 = settings60.names();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings60, streamOutput63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(parseFieldMatcher59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_ANALYZE_WILDCARD();
        int int62 = indexSettings57.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        boolean boolean64 = indexSettings57.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(booleanSetting61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("active_allocations", custom7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings9);
        java.lang.String str21 = builder1.index();
        int int22 = builder1.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.Version version59 = indexSettings57.getversion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = indexSettings57.getScopedSettings();
        org.elasticsearch.Version version61 = indexSettings57.getIndexVersionCreated();
        indexSettings57.setwarmerEnabled(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig64 = indexSettings57.mergeSchedulerConfig;
        int int65 = indexSettings57.maxRefreshListeners;
        indexSettings57.maxRefreshListeners = '4';
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig68 = indexSettings57.mergePolicyConfig;
        indexSettings57.maxRefreshListeners = '4';
        java.lang.String str71 = indexSettings57.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1000 + "'", int65 == 1000);
        org.junit.Assert.assertNotNull(mergePolicyConfig68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "_all" + "'", str71, "_all");
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder27.normalizePrefix("index.version.created");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder31.put("", "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder34.normalizePrefix("index.version.upgraded");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder34.put("hi!", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("archived.", 0L);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        int int97 = indexSettings96.getNumberOfShards();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig98 = indexSettings96.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting99 = indexSettings96.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig98);
        org.junit.Assert.assertNotNull(booleanSetting99);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher62 = indexSettings57.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(parseFieldMatcher62);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        indexScopedSettings4.validate("index.number_of_shards", settings6);
        java.util.function.Predicate<java.lang.String> strPredicate18 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings19 = settings6.filter(strPredicate18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = settings6.toXContent(xContentBuilder20, params21);
        org.elasticsearch.Version version24 = null;
        org.elasticsearch.Version version25 = settings6.getAsVersion("index.blocks.metadata", version24);
        java.util.function.Predicate<java.lang.String> strPredicate26 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings27 = settings6.filter(strPredicate26);
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData0.mappingOrDefault("index.number_of_replicas");
        java.util.Set<java.lang.String> strSet32 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strPredicate18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(params21);
        org.junit.Assert.assertNull(xContentBuilder22);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strPredicate26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNull(strSet32);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder5 = builder4.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.shared_filesystem", (float) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.data_path", true);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.loadFromSource("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings57.getindexNameMatcher();
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        boolean boolean64 = indexSettings57.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting65 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate66 = indexSettings57.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(timeValueSetting65);
        org.junit.Assert.assertNotNull(strPredicate66);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        long long58 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.syncInterval;
        org.elasticsearch.Version version60 = indexSettings57.getIndexVersionCreated();
        boolean boolean61 = indexSettings57.getdefaultAllowUnmappedFields();
        java.lang.String str62 = indexSettings57.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = indexSettings57.parseFieldMatcher;
        org.elasticsearch.common.unit.TimeValue timeValue59 = indexSettings57.refreshInterval;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting60 = indexSettings57.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting61 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(parseFieldMatcher58);
        org.junit.Assert.assertNotNull(timeValue59);
        org.junit.Assert.assertNotNull(intSetting60);
        org.junit.Assert.assertNotNull(booleanSetting61);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        long long62 = indexSettings57.gcDeletesInMillis;
        org.elasticsearch.common.settings.Settings settings63 = indexSettings57.getSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings57.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger65 = indexSettings57.getlogger();
        indexSettings57.setMaxRescoreWindow(10000);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting68 = indexSettings57.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(timeValueSetting64);
        org.junit.Assert.assertNotNull(eSLogger65);
        org.junit.Assert.assertNotNull(booleanSetting68);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings57.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = indexSettings57.getIndexMetaData();
        org.elasticsearch.Version version63 = indexMetaData62.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(version63);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.common.unit.TimeValue timeValue61 = org.elasticsearch.index.IndexSettings.DEFAULT_GC_DELETES;
        indexSettings57.refreshInterval = timeValue61;
        boolean boolean63 = indexSettings57.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexSettings57.indexMetaData;
        indexSettings57.setMaxRefreshListeners((int) (byte) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(indexMetaData64);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder0.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("active_allocations", (double) 0.0f);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder3.putNull("archived.");
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.blocks.metadata", 1);
        java.lang.String str13 = builder8.get("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.blocks.read_only");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.readDiffFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.shared_filesystem", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfShards((int) 'a');
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.logging.ESLogger eSLogger62 = indexSettings57.getlogger();
        boolean boolean63 = indexSettings57.warmerEnabled;
        boolean boolean64 = indexSettings57.getqueryStringAnalyzeWildcard();
        int int65 = indexSettings57.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig66 = indexSettings57.mergePolicyConfig;
        int int67 = indexSettings57.maxResultWindow;
        org.elasticsearch.Version version68 = indexSettings57.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(eSLogger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
        org.junit.Assert.assertNotNull(version68);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        boolean boolean53 = false; // flaky: indexSettings52.defaultAllowUnmappedFields;
        org.elasticsearch.Version version54 = null; // flaky: indexSettings52.version;
        org.elasticsearch.common.settings.Settings settings55 = null;
// flaky:         indexSettings52.settings = settings55;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertNotNull(version54);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData9.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property14 = indexScopedSettings13.getScope();
        boolean boolean16 = indexScopedSettings13.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting18 = indexScopedSettings13.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property20 = indexScopedSettings19.getScope();
        boolean boolean22 = indexScopedSettings19.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting24 = indexScopedSettings19.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray32 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray33 = settings25.getAsArray("active_allocations", strArray32);
        java.lang.String str35 = settings25.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings25.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder39 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder43 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder43.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean48 = indexScopedSettings19.updateSettings(settings25, builder39, builder46, "index.shared_filesystem");
        java.lang.Object obj49 = null;
        boolean boolean50 = settings25.equals(obj49);
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings13.dryRun(settings25);
        org.elasticsearch.common.settings.Settings settings53 = settings51.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property56 = indexScopedSettings55.getScope();
        boolean boolean58 = indexScopedSettings55.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting60 = indexScopedSettings55.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings61 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData9, settings53, strPredicate54, indexScopedSettings55);
        int int62 = indexMetaData9.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params65 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings63.toXContent(xContentBuilder64, params65);
        boolean boolean67 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings63);
        boolean boolean68 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings63);
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings63);
        org.elasticsearch.index.translog.Translog.Durability durability70 = indexSettings69.getTranslogDurability();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = indexSettings69.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData71);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff73 = indexMetaData0.diff(indexMetaData71);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData71, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + property14 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property14.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardSetting18);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + property20 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property20.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardSetting24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + property56 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property56.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(wildcardSetting60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(params65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + durability70 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability70.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(indexMetaDataDiff73);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int8 = builder7.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.blocks.metadata", (double) 10.0f);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("100.0", (double) (short) 1);
        boolean boolean69 = indexMetaData0.equals((java.lang.Object) (short) 1);
        org.elasticsearch.Version version70 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(version70);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putCustom("index.creation_date", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.putCustom("index.blocks.write", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("state-", custom14);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = builder12.mapping("index.blocks.write");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(mappingMetaData17);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        int int53 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean59 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings54);
        org.elasticsearch.Version version61 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters63 = indexMetaData62.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters64 = indexMetaData62.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData62.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData62.getCustoms();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property68 = indexScopedSettings67.getScope();
        boolean boolean70 = indexScopedSettings67.hasDynamicSetting("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params74 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = settings72.toXContent(xContentBuilder73, params74);
        boolean boolean76 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings72);
        indexScopedSettings67.validate("index.shared_filesystem.recover_on_any_node", settings72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray87 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray88 = settings80.getAsArray("active_allocations", strArray87);
        java.lang.String str90 = settings80.toDelimitedString('4');
        indexScopedSettings78.validate("index.number_of_shards", settings80);
        org.elasticsearch.common.settings.Settings settings92 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings80);
        org.elasticsearch.common.settings.Settings settings93 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.common.settings.Settings settings95 = settings80.getByPrefix("index.priority");
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings80);
        org.elasticsearch.index.IndexSettings indexSettings97 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings80);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting98 = indexSettings97.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting99 = indexSettings97.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNull(discoveryNodeFilters63);
        org.junit.Assert.assertNull(discoveryNodeFilters64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + property68 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property68.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(params74);
        org.junit.Assert.assertNull(xContentBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertNotNull(settings95);
        org.junit.Assert.assertNotNull(timeValueSetting98);
        org.junit.Assert.assertNotNull(timeValueSetting99);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        boolean boolean62 = indexSettings57.getdefaultAllowUnmappedFields();
        java.lang.String str63 = indexSettings57.getDefaultField();
        boolean boolean64 = indexSettings57.warmerEnabled;
        boolean boolean65 = indexSettings57.isShadowReplicaIndex;
        java.lang.String str66 = indexSettings57.getDefaultField();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "_all" + "'", str63, "_all");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "_all" + "'", str66, "_all");
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property7 = indexScopedSettings6.getScope();
        boolean boolean9 = indexScopedSettings6.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting11 = indexScopedSettings6.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray19 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray20 = settings12.getAsArray("active_allocations", strArray19);
        java.lang.String str22 = settings12.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings12.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean35 = indexScopedSettings6.updateSettings(settings12, builder26, builder33, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder26.put("index.number_of_shards", 10L);
        java.lang.String[] strArray47 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder38.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList48);
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder38.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings54 = builder38.build();
        org.elasticsearch.common.settings.Settings settings56 = settings54.getAsSettings("index.priority");
        java.lang.String str58 = settings56.toDelimitedString(' ');
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.common.logging.ESLogger eSLogger60 = indexSettings59.getlogger();
        indexSettings59.setwarmerEnabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + property7 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property7.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardSetting11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(eSLogger60);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability59 = null;
        indexSettings57.durability = durability59;
        java.util.function.Predicate<java.lang.String> strPredicate61 = indexSettings57.indexNameMatcher;
        boolean boolean62 = indexSettings57.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(strPredicate61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
        int int2 = builder1.numberOfReplicas();
        int int3 = builder1.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = builder1.primaryTerm((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("active_allocations");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("");
        int int11 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass17 = strPredicate16.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder11.put("index.creation_date_string", (java.lang.Class) wildcardClass17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte22 = state21.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder1.state(state21);
        byte byte24 = state21.id();
        byte byte25 = state21.id();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property4 = indexScopedSettings3.getScope();
        boolean boolean6 = indexScopedSettings3.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting8 = indexScopedSettings3.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray16 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray17 = settings9.getAsArray("active_allocations", strArray16);
        java.lang.String str19 = settings9.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings9.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder23 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder27 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean32 = indexScopedSettings3.updateSettings(settings9, builder23, builder30, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings settings34 = settings9.getByPrefix("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.numberOfReplicas((int) 'a');
        boolean boolean39 = settings9.equals((java.lang.Object) 'a');
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings9);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int43 = indexMetaData0.getRoutingNumShards();
        int int44 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = null;
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray57 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray58 = settings50.getAsArray("active_allocations", strArray57);
        java.lang.String str60 = settings50.toDelimitedString('4');
        indexScopedSettings48.validate("index.number_of_shards", settings50);
        java.util.function.Predicate<java.lang.String> strPredicate62 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings63 = settings50.filter(strPredicate62);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params65 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = settings50.toXContent(xContentBuilder64, params65);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = settings46.toXContent(xContentBuilder47, params65);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder45, params65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + property4 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property4.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(params65);
        org.junit.Assert.assertNull(xContentBuilder66);
        org.junit.Assert.assertNull(xContentBuilder67);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray74 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray75 = settings67.getAsArray("active_allocations", strArray74);
        java.lang.String str77 = settings67.toDelimitedString('4');
        indexScopedSettings65.validate("index.number_of_shards", settings67);
        java.util.function.Predicate<java.lang.String> strPredicate79 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.common.settings.Settings settings80 = settings67.filter(strPredicate79);
        org.elasticsearch.common.unit.TimeValue timeValue82 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue83 = settings80.getAsTime("index.number_of_replicas", timeValue82);
        org.elasticsearch.common.settings.Settings settings85 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray92 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray93 = settings85.getAsArray("active_allocations", strArray92);
        java.lang.String[] strArray94 = settings80.getAsArray("index.blocks.metadata", strArray93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder64.settings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings96 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings80);
        int int97 = indexSettings96.getNumberOfShards();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig98 = indexSettings96.mergePolicyConfig;
        java.lang.String str99 = indexSettings96.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strPredicate79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder3.mapping("index.uuid");
        int int8 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder3.mapping("10.0");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings.Builder builder47 = builder44.put("index.creation_date", (float) 1000);
        java.nio.file.Path path48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder49 = builder47.loadFromPath(path48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting62 = indexSettings57.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean63 = indexSettings57.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = indexSettings57.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean65 = indexSettings57.getqueryStringAnalyzeWildcard();
        java.lang.String str66 = indexSettings57.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(booleanSetting62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(booleanSetting64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.removeAllAliases();
        java.lang.String str10 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.removeAlias("index.uuid");
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder13.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.blocks.metadata", (double) 10.0f);
        java.util.function.Predicate<java.lang.String> strPredicate19 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        java.lang.Class<?> wildcardClass20 = strPredicate19.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder14.put("index.creation_date_string", (java.lang.Class) wildcardClass20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder4.settings(builder14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte25 = state24.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder4.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder2.state(state24);
        byte byte28 = state24.id();
        byte byte29 = state24.id();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 0 + "'", byte29 == (byte) 0);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property5 = indexScopedSettings4.getScope();
        boolean boolean7 = indexScopedSettings4.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting9 = indexScopedSettings4.get("active_allocations");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property11 = indexScopedSettings10.getScope();
        boolean boolean13 = indexScopedSettings10.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting15 = indexScopedSettings10.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray23 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray24 = settings16.getAsArray("active_allocations", strArray23);
        java.lang.String str26 = settings16.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings16.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder34.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean39 = indexScopedSettings10.updateSettings(settings16, builder30, builder37, "index.shared_filesystem");
        java.lang.Object obj40 = null;
        boolean boolean41 = settings16.equals(obj40);
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings4.dryRun(settings16);
        org.elasticsearch.common.settings.Settings settings44 = settings42.getByPrefix("index.creation_date_string");
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property47 = indexScopedSettings46.getScope();
        boolean boolean49 = indexScopedSettings46.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting51 = indexScopedSettings46.get("active_allocations");
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44, strPredicate45, indexScopedSettings46);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = indexMetaData0.primaryTerm((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + property5 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property5.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardSetting9);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + property11 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property11.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardSetting15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + property47 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property47.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardSetting51);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property1 = indexScopedSettings0.getScope();
        boolean boolean3 = indexScopedSettings0.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting5 = indexScopedSettings0.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray13 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray14 = settings6.getAsArray("active_allocations", strArray13);
        java.lang.String str16 = settings6.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings6.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder24 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean29 = indexScopedSettings0.updateSettings(settings6, builder20, builder27, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder20.put("index.number_of_shards", 10L);
        java.lang.String[] strArray41 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder32.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList42);
        org.elasticsearch.common.settings.Settings settings45 = builder32.build();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder32.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder32.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder48.normalizePrefix("=index.shared_filesystem#index.version.createdindex.shared_filesystem.recover_on_any_node=index.data_path#");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder54 = builder50.put("primary_terms", (long) 'a', byteSizeUnit53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + property1 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property1.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardSetting5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.common.settings.Setting.Property property3 = indexScopedSettings2.getScope();
        boolean boolean5 = indexScopedSettings2.hasDynamicSetting("");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting7 = indexScopedSettings2.get("active_allocations");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        java.lang.String[] strArray15 = new java.lang.String[] { "index.version.created_string", "index.version.minimum_compatible", "active_allocations", "index.number_of_replicas", "hi!" };
        java.lang.String[] strArray16 = settings8.getAsArray("active_allocations", strArray15);
        java.lang.String str18 = settings8.toDelimitedString('4');
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings8.getAsGroups(true);
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder22.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder26 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.shared_filesystem.recover_on_any_node", "index.data_path");
        boolean boolean31 = indexScopedSettings2.updateSettings(settings8, builder22, builder29, "index.shared_filesystem");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder22.put("index.number_of_shards", 10L);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.uuid", "index.shared_filesystem.recover_on_any_node", "index.shared_filesystem.recover_on_any_node", "index.number_of_shards", "index.version.upgraded_string", "index.version.minimum_compatible", "index.data_path" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder34.putArray("index.number_of_replicas", (java.util.List<java.lang.String>) strList44);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder34.put("index.version.created", "index.uuid");
        org.elasticsearch.common.settings.Settings settings50 = builder34.build();
        java.lang.Boolean boolean53 = settings50.getAsBoolean("index.version.upgraded", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue55 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue56 = settings50.getAsSize("", sizeValue55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings50);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting58 = indexSettings57.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue59 = null;
        indexSettings57.flushThresholdSize = byteSizeValue59;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = indexSettings57.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings62 = indexMetaData61.getSettings();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings62.getGroups("index.number_of_replicas.0=index.uuid#index.number_of_replicas.1=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.2=index.shared_filesystem.recover_on_any_node#index.number_of_replicas.3=index.number_of_shards#index.number_of_replicas.4=index.version.upgraded_string#index.number_of_replicas.5=index.version.minimum_compatible#index.number_of_replicas.6=index.data_path#index.number_of_shards=10#index.shared_filesystem.recover_on_any_node=index.data_path#index.version.created=index.uuid#");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + property3 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property3.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertEquals("'" + boolean53 + "' != '" + false + "'", boolean53, false);
        org.junit.Assert.assertNull(sizeValue56);
        org.junit.Assert.assertNotNull(intSetting58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap64);
    }
}
