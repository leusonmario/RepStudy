/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 11:52:14 GMT 2021
 */

package org.elasticsearch.index;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.function.Predicate;
import org.apache.log4j.Category;
import org.apache.log4j.helpers.Loader;
import org.apache.log4j.helpers.OptionConverter;
import org.apache.log4j.spi.LoggerRepository;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.settings.IndexScopedSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.index.IndexSettings;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IndexSettings_ESTest extends IndexSettings_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getRoutingNumShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getRoutingFactor());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(indexMetaData0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) indexMetaData0.SETTING_NUMBER_OF_REPLICAS);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getRoutingNumShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getRoutingFactor());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertNotNull(predicate0);
      
      Settings settings0 = null;
      IndexScopedSettings indexScopedSettings0 = null;
      IndexSettings indexSettings0 = null;
      try {
        indexSettings0 = new IndexSettings(indexMetaData0, settings0, predicate0, indexScopedSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.IndexSettings", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      IndexMetaData indexMetaData0 = null;
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      IndexSettings indexSettings0 = null;
      try {
        indexSettings0 = new IndexSettings(indexMetaData0, settings0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.elasticsearch.common.settings.IndexScopedSettings
         //
         verifyException("org.elasticsearch.index.IndexSettings", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      IndexMetaData indexMetaData0 = null;
      Settings settings0 = null;
      IndexSettings indexSettings0 = null;
      try {
        indexSettings0 = new IndexSettings(indexMetaData0, settings0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.elasticsearch.common.settings.IndexScopedSettings
         //
         verifyException("org.elasticsearch.index.IndexSettings", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertNotNull(fakeRestRequest0);
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      String string0 = "jvc>fl.XSB|I`(M9[";
      byte[] byteArray0 = new byte[3];
      int int0 = 0;
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      String string1 = "";
      IndexMetaData indexMetaData0 = metaData0.index(string1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotSame(string1, string0);
      assertNull(indexMetaData0);
      assertFalse(string1.equals((Object)string0));
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) indexMetaData0.SETTING_NUMBER_OF_REPLICAS);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotSame(string1, string0);
      assertNotNull(predicate0);
      assertFalse(string1.equals((Object)string0));
      
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotSame(string1, string0);
      assertNotNull(predicate2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<String> predicate3 = predicate2.or(predicate0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotSame(string1, string0);
      assertNotNull(predicate3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      Predicate<String> predicate4 = predicate3.negate();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotSame(string1, string0);
      assertNotNull(predicate4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      
      IndexScopedSettings indexScopedSettings0 = null;
      IndexSettings indexSettings0 = null;
      try {
        indexSettings0 = new IndexSettings(indexMetaData0, settings0, predicate4, indexScopedSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.IndexSettings", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      IndexMetaData indexMetaData0 = null;
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Predicate<String> predicate0 = null;
      try {  
      predicate0 = IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
      } catch(NoClassDefFoundError e) {}
  }
}
